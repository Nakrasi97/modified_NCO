Script started on 2024-09-24 17:38:09+00:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="314" LINES="79"]
[?2004h(base) ]0;jovyan@edb2125453fd: ~/modified_NCO/multi-objective/MORAM[01;32mjovyan@edb2125453fd[00m:[01;34m~/modified_NCO/multi-objective/MORAM[00m$ nvidia-smi[5Pclearnvidia-smipython run.py[8Pclearpython run.py
[?2004l2024-09-24 17:38:24.292919: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-09-24 17:38:24.334425: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-09-24 17:38:24.334472: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-09-24 17:38:24.335646: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-09-24 17:38:24.342232: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-09-24 17:38:25.312662: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
Starting run...
{'H': 100,
 'baseline': 'NoBaseline',
 'batch_size': 5,
 'bl_alpha': 0.05,
 'bl_warmup_epochs': 0,
 'checkpoint_encoder': False,
 'checkpoint_epochs': 50,
 'correlation': 0.0,
 'data_distribution': None,
 'embedding_dim': 128,
 'epoch_size': 2400,
 'epoch_start': 0,
 'eval_batch_size': 200,
 'eval_only': False,
 'exp_beta': 0.8,
 'hidden_dim': 128,
 'ledger_size': 500,
 'load_path': None,
 'log_dir': 'logs',
 'log_step': 50,
 'lower_bound': 0.0,
 'lr_critic': 0.0001,
 'lr_decay': 0.99,
 'lr_model': 0.0005,
 'max_capacity': 100,
 'max_grad_norm': 1.0,
 'model': 'attention',
 'n_encode_layers': 3,
 'n_epochs': 1,
 'no_cuda': False,
 'no_progress_bar': False,
 'no_tensorboard': False,
 'normalization': 'batch',
 'num_objs': 2,
 'num_top': 5,
 'num_weights': 10,
 'output_dir': 'outputs',
 'problem': 'bsp',
 'reference_point': 40,
 'resume': None,
 'run_name': 'run_20240924T173827',
 'save_dir': 'outputs/bsp_500/run_20240924T173827',
 'seed': 1234,
 'shrink_size': None,
 'start_time': 1727199507.5395489,
 'tanh_clipping': 10.0,
 'upper_bound': 1.0,
 'use_cuda': False,
 'val_dataset': None,
 'val_size': 1000}
Setting random seed...
Setting up TensorBoard logger...
Creating output directory...
Setting up weight list and logger list...
Generating weights for 2 objectives...
Weights: [tensor([0., 1.]), tensor([0.1111, 0.8889]), tensor([0.2222, 0.7778]), tensor([0.3333, 0.6667]), tensor([0.4444, 0.5556]), tensor([0.5556, 0.4444]), tensor([0.6667, 0.3333]), tensor([0.7778, 0.2222]), tensor([0.8889, 0.1111]), tensor([1., 0.])]
Setting up device...
Loading problem definition...
Loading data from load_path or resume...
Initializing model...
Model initialized with total parameters: 1287171
Overwriting model parameters by parameters to load, if available...
Initializing baseline...
Loading baseline from data, if available...
Initializing optimizer...
Loading optimizer state, if available...
Initializing learning rate scheduler...
Creating validation dataset...
Creating dataset samples:   0%|                                                                                                                                                                                                                                                                  | 0/1000 [00:00<?, ?it/s]Creating dataset samples:   0%|▎                                                                                                                                                                                                                                                         | 1/1000 [00:00<04:01,  4.13it/s]Creating dataset samples:   0%|█▎                                                                                                                                                                                                                                                        | 5/1000 [00:00<01:01, 16.31it/s]Creating dataset samples:   1%|██▎                                                                                                                                                                                                                                                       | 9/1000 [00:00<00:43, 22.76it/s]Creating dataset samples:   1%|███▏                                                                                                                                                                                                                                                     | 13/1000 [00:00<00:36, 26.84it/s]Creating dataset samples:   2%|████▏                                                                                                                                                                                                                                                    | 17/1000 [00:00<00:33, 29.48it/s]Creating dataset samples:   2%|█████▏                                                                                                                                                                                                                                                   | 21/1000 [00:00<00:31, 31.50it/s]Creating dataset samples:   2%|██████▏                                                                                                                                                                                                                                                  | 25/1000 [00:00<00:29, 32.86it/s]Creating dataset samples:   3%|███████▏                                                                                                                                                                                                                                                 | 29/1000 [00:01<00:28, 33.77it/s]Creating dataset samples:   3%|████████▏                                                                                                                                                                                                                                                | 33/1000 [00:01<00:28, 34.51it/s]Creating dataset samples:   4%|█████████▏                                                                                                                                                                                                                                               | 37/1000 [00:01<00:27, 34.45it/s]Creating dataset samples:   4%|██████████▏                                                                                                                                                                                                                                              | 41/1000 [00:01<00:27, 34.29it/s]Creating dataset samples:   4%|███████████▏                                                                                                                                                                                                                                             | 45/1000 [00:01<00:27, 34.79it/s]Creating dataset samples:   5%|████████████▏                                                                                                                                                                                                                                            | 49/1000 [00:01<00:27, 35.06it/s]Creating dataset samples:   5%|█████████████▏                                                                                                                                                                                                                                           | 53/1000 [00:01<00:26, 35.51it/s]Creating dataset samples:   6%|██████████████▏                                                                                                                                                                                                                                          | 57/1000 [00:01<00:26, 35.81it/s]Creating dataset samples:   6%|███████████████▏                                                                                                                                                                                                                                         | 61/1000 [00:01<00:26, 36.02it/s]Creating dataset samples:   6%|████████████████▏                                                                                                                                                                                                                                        | 65/1000 [00:02<00:26, 35.93it/s]Creating dataset samples:   7%|█████████████████▏                                                                                                                                                                                                                                       | 69/1000 [00:02<00:25, 35.89it/s]Creating dataset samples:   7%|██████████████████▏                                                                                                                                                                                                                                      | 73/1000 [00:02<00:26, 35.58it/s]Creating dataset samples:   8%|███████████████████▏                                                                                                                                                                                                                                     | 77/1000 [00:02<00:26, 35.44it/s]Creating dataset samples:   8%|████████████████████▏                                                                                                                                                                                                                                    | 81/1000 [00:02<00:25, 35.79it/s]Creating dataset samples:   8%|█████████████████████▏                                                                                                                                                                                                                                   | 85/1000 [00:02<00:25, 35.94it/s]Creating dataset samples:   9%|██████████████████████▏                                                                                                                                                                                                                                  | 89/1000 [00:02<00:25, 35.88it/s]Creating dataset samples:   9%|███████████████████████▏                                                                                                                                                                                                                                 | 93/1000 [00:02<00:25, 36.09it/s]Creating dataset samples:  10%|████████████████████████▏                                                                                                                                                                                                                                | 97/1000 [00:02<00:25, 36.04it/s]Creating dataset samples:  10%|█████████████████████████                                                                                                                                                                                                                               | 101/1000 [00:03<00:24, 36.02it/s]Creating dataset samples:  10%|██████████████████████████                                                                                                                                                                                                                              | 105/1000 [00:03<00:24, 36.16it/s]Creating dataset samples:  11%|███████████████████████████                                                                                                                                                                                                                             | 109/1000 [00:03<00:24, 35.97it/s]Creating dataset samples:  11%|████████████████████████████                                                                                                                                                                                                                            | 113/1000 [00:03<00:24, 36.07it/s]Creating dataset samples:  12%|█████████████████████████████                                                                                                                                                                                                                           | 117/1000 [00:03<00:24, 35.34it/s]Creating dataset samples:  12%|██████████████████████████████                                                                                                                                                                                                                          | 121/1000 [00:03<00:25, 34.96it/s]Creating dataset samples:  12%|███████████████████████████████                                                                                                                                                                                                                         | 125/1000 [00:03<00:25, 34.30it/s]Creating dataset samples:  13%|███████████████████████████████▉                                                                                                                                                                                                                        | 129/1000 [00:03<00:25, 34.15it/s]Creating dataset samples:  13%|████████████████████████████████▉                                                                                                                                                                                                                       | 133/1000 [00:03<00:25, 34.16it/s]Creating dataset samples:  14%|█████████████████████████████████▉                                                                                                                                                                                                                      | 137/1000 [00:04<00:24, 34.58it/s]Creating dataset samples:  14%|██████████████████████████████████▉                                                                                                                                                                                                                     | 141/1000 [00:04<00:24, 34.91it/s]Creating dataset samples:  14%|███████████████████████████████████▉                                                                                                                                                                                                                    | 145/1000 [00:04<00:24, 35.25it/s]Creating dataset samples:  15%|████████████████████████████████████▉                                                                                                                                                                                                                   | 149/1000 [00:04<00:23, 35.60it/s]Creating dataset samples:  15%|█████████████████████████████████████▉                                                                                                                                                                                                                  | 153/1000 [00:04<00:23, 35.64it/s]Creating dataset samples:  16%|██████████████████████████████████████▉                                                                                                                                                                                                                 | 157/1000 [00:04<00:23, 35.64it/s]Creating dataset samples:  16%|███████████████████████████████████████▉                                                                                                                                                                                                                | 161/1000 [00:04<00:23, 35.80it/s]Creating dataset samples:  16%|████████████████████████████████████████▉                                                                                                                                                                                                               | 165/1000 [00:04<00:23, 35.85it/s]Creating dataset samples:  17%|█████████████████████████████████████████▉                                                                                                                                                                                                              | 169/1000 [00:04<00:23, 35.96it/s]Creating dataset samples:  17%|██████████████████████████████████████████▉                                                                                                                                                                                                             | 173/1000 [00:05<00:23, 35.86it/s]Creating dataset samples:  18%|███████████████████████████████████████████▉                                                                                                                                                                                                            | 177/1000 [00:05<00:22, 35.79it/s]Creating dataset samples:  18%|████████████████████████████████████████████▉                                                                                                                                                                                                           | 181/1000 [00:05<00:22, 35.77it/s]Creating dataset samples:  18%|█████████████████████████████████████████████▉                                                                                                                                                                                                          | 185/1000 [00:05<00:22, 35.85it/s]Creating dataset samples:  19%|██████████████████████████████████████████████▊                                                                                                                                                                                                         | 189/1000 [00:05<00:22, 35.87it/s]Creating dataset samples:  19%|███████████████████████████████████████████████▊                                                                                                                                                                                                        | 193/1000 [00:05<00:22, 36.02it/s]Creating dataset samples:  20%|████████████████████████████████████████████████▊                                                                                                                                                                                                       | 197/1000 [00:05<00:22, 36.09it/s]Creating dataset samples:  20%|█████████████████████████████████████████████████▊                                                                                                                                                                                                      | 201/1000 [00:05<00:22, 36.07it/s]Creating dataset samples:  20%|██████████████████████████████████████████████████▊                                                                                                                                                                                                     | 205/1000 [00:05<00:22, 36.03it/s]Creating dataset samples:  21%|███████████████████████████████████████████████████▊                                                                                                                                                                                                    | 209/1000 [00:06<00:21, 36.08it/s]Creating dataset samples:  21%|████████████████████████████████████████████████████▊                                                                                                                                                                                                   | 213/1000 [00:06<00:21, 35.84it/s]Creating dataset samples:  22%|█████████████████████████████████████████████████████▊                                                                                                                                                                                                  | 217/1000 [00:06<00:21, 35.81it/s]Creating dataset samples:  22%|██████████████████████████████████████████████████████▊                                                                                                                                                                                                 | 221/1000 [00:06<00:22, 35.25it/s]Creating dataset samples:  22%|███████████████████████████████████████████████████████▊                                                                                                                                                                                                | 225/1000 [00:06<00:21, 35.25it/s]Creating dataset samples:  23%|████████████████████████████████████████████████████████▊                                                                                                                                                                                               | 229/1000 [00:06<00:21, 35.38it/s]Creating dataset samples:  23%|█████████████████████████████████████████████████████████▊                                                                                                                                                                                              | 233/1000 [00:06<00:21, 35.05it/s]Creating dataset samples:  24%|██████████████████████████████████████████████████████████▊                                                                                                                                                                                             | 237/1000 [00:06<00:22, 34.56it/s]Creating dataset samples:  24%|███████████████████████████████████████████████████████████▊                                                                                                                                                                                            | 241/1000 [00:07<00:22, 34.24it/s]Creating dataset samples:  24%|████████████████████████████████████████████████████████████▊                                                                                                                                                                                           | 245/1000 [00:07<00:22, 34.01it/s]Creating dataset samples:  25%|█████████████████████████████████████████████████████████████▊                                                                                                                                                                                          | 249/1000 [00:07<00:21, 34.26it/s]Creating dataset samples:  25%|██████████████████████████████████████████████████████████████▋                                                                                                                                                                                         | 253/1000 [00:07<00:21, 34.45it/s]Creating dataset samples:  26%|███████████████████████████████████████████████████████████████▋                                                                                                                                                                                        | 257/1000 [00:07<00:21, 34.96it/s]Creating dataset samples:  26%|████████████████████████████████████████████████████████████████▋                                                                                                                                                                                       | 261/1000 [00:07<00:21, 35.18it/s]Creating dataset samples:  26%|█████████████████████████████████████████████████████████████████▋                                                                                                                                                                                      | 265/1000 [00:07<00:20, 35.30it/s]Creating dataset samples:  27%|██████████████████████████████████████████████████████████████████▋                                                                                                                                                                                     | 269/1000 [00:07<00:20, 35.53it/s]Creating dataset samples:  27%|███████████████████████████████████████████████████████████████████▋                                                                                                                                                                                    | 273/1000 [00:07<00:20, 35.74it/s]Creating dataset samples:  28%|████████████████████████████████████████████████████████████████████▋                                                                                                                                                                                   | 277/1000 [00:08<00:20, 35.84it/s]Creating dataset samples:  28%|█████████████████████████████████████████████████████████████████████▋                                                                                                                                                                                  | 281/1000 [00:08<00:20, 35.87it/s]Creating dataset samples:  28%|██████████████████████████████████████████████████████████████████████▋                                                                                                                                                                                 | 285/1000 [00:08<00:20, 35.60it/s]Creating dataset samples:  29%|███████████████████████████████████████████████████████████████████████▋                                                                                                                                                                                | 289/1000 [00:08<00:19, 35.73it/s]Creating dataset samples:  29%|████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                               | 293/1000 [00:08<00:19, 35.79it/s]Creating dataset samples:  30%|█████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                              | 297/1000 [00:08<00:19, 35.78it/s]Creating dataset samples:  30%|██████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                             | 301/1000 [00:08<00:19, 35.64it/s]Creating dataset samples:  30%|███████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                            | 305/1000 [00:08<00:19, 35.73it/s]Creating dataset samples:  31%|████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                           | 309/1000 [00:08<00:19, 35.72it/s]Creating dataset samples:  31%|█████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                          | 313/1000 [00:09<00:19, 35.88it/s]Creating dataset samples:  32%|██████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                         | 317/1000 [00:09<00:18, 36.09it/s]Creating dataset samples:  32%|███████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                        | 321/1000 [00:09<00:18, 35.95it/s]Creating dataset samples:  32%|████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                       | 325/1000 [00:09<00:18, 35.91it/s]Creating dataset samples:  33%|█████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                      | 329/1000 [00:09<00:18, 35.91it/s]Creating dataset samples:  33%|██████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                     | 333/1000 [00:09<00:18, 35.92it/s]Creating dataset samples:  34%|███████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                    | 337/1000 [00:09<00:18, 35.96it/s]Creating dataset samples:  34%|████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                   | 341/1000 [00:09<00:18, 35.98it/s]Creating dataset samples:  34%|█████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                  | 345/1000 [00:09<00:18, 36.11it/s]Creating dataset samples:  35%|██████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                 | 349/1000 [00:10<00:18, 35.59it/s]Creating dataset samples:  35%|███████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                | 353/1000 [00:10<00:19, 33.79it/s]Creating dataset samples:  36%|████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                               | 357/1000 [00:10<00:19, 33.71it/s]Creating dataset samples:  36%|█████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                              | 361/1000 [00:10<00:19, 33.31it/s]Creating dataset samples:  36%|██████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                             | 365/1000 [00:10<00:18, 33.69it/s]Creating dataset samples:  37%|███████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                            | 369/1000 [00:10<00:18, 33.82it/s]Creating dataset samples:  37%|████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                           | 373/1000 [00:10<00:18, 34.43it/s]Creating dataset samples:  38%|█████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                          | 377/1000 [00:10<00:17, 34.87it/s]Creating dataset samples:  38%|██████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                         | 381/1000 [00:10<00:17, 35.18it/s]Creating dataset samples:  38%|███████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                        | 385/1000 [00:11<00:17, 35.40it/s]Creating dataset samples:  39%|████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                       | 389/1000 [00:11<00:17, 35.45it/s]Creating dataset samples:  39%|█████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                      | 393/1000 [00:11<00:17, 35.29it/s]Creating dataset samples:  40%|██████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                     | 397/1000 [00:11<00:17, 34.74it/s]Creating dataset samples:  40%|███████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                    | 401/1000 [00:11<00:17, 34.18it/s]Creating dataset samples:  40%|████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                   | 405/1000 [00:11<00:17, 34.69it/s]Creating dataset samples:  41%|█████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                  | 409/1000 [00:11<00:16, 35.13it/s]Creating dataset samples:  41%|██████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                 | 413/1000 [00:11<00:16, 35.40it/s]Creating dataset samples:  42%|███████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                | 417/1000 [00:12<00:16, 35.53it/s]Creating dataset samples:  42%|████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                               | 421/1000 [00:12<00:16, 35.78it/s]Creating dataset samples:  42%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                              | 425/1000 [00:12<00:16, 35.82it/s]Creating dataset samples:  43%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                             | 429/1000 [00:12<00:15, 35.99it/s]Creating dataset samples:  43%|███████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                            | 433/1000 [00:12<00:15, 36.02it/s]Creating dataset samples:  44%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                           | 437/1000 [00:12<00:15, 36.17it/s]Creating dataset samples:  44%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                          | 441/1000 [00:12<00:15, 36.21it/s]Creating dataset samples:  44%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                         | 445/1000 [00:12<00:15, 36.32it/s]Creating dataset samples:  45%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                        | 449/1000 [00:12<00:15, 36.24it/s]Creating dataset samples:  45%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                       | 453/1000 [00:13<00:15, 36.21it/s]Creating dataset samples:  46%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                      | 457/1000 [00:13<00:15, 36.14it/s]Creating dataset samples:  46%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                     | 461/1000 [00:13<00:14, 36.13it/s]Creating dataset samples:  46%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                    | 465/1000 [00:13<00:14, 36.29it/s]Creating dataset samples:  47%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                   | 469/1000 [00:13<00:15, 35.28it/s]Creating dataset samples:  47%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                  | 473/1000 [00:13<00:15, 34.92it/s]Creating dataset samples:  48%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                 | 477/1000 [00:13<00:15, 34.22it/s]Creating dataset samples:  48%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                | 481/1000 [00:13<00:15, 34.18it/s]Creating dataset samples:  48%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                               | 485/1000 [00:13<00:15, 34.33it/s]Creating dataset samples:  49%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                              | 489/1000 [00:14<00:14, 34.81it/s]Creating dataset samples:  49%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                             | 493/1000 [00:14<00:14, 35.24it/s]Creating dataset samples:  50%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                            | 497/1000 [00:14<00:14, 35.25it/s]Creating dataset samples:  50%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                           | 501/1000 [00:14<00:14, 35.46it/s]Creating dataset samples:  50%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                          | 505/1000 [00:14<00:13, 35.51it/s]Creating dataset samples:  51%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                         | 509/1000 [00:14<00:13, 35.68it/s]Creating dataset samples:  51%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                        | 513/1000 [00:14<00:13, 35.57it/s]Creating dataset samples:  52%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                       | 517/1000 [00:14<00:13, 35.78it/s]Creating dataset samples:  52%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                      | 521/1000 [00:14<00:13, 35.73it/s]Creating dataset samples:  52%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                     | 525/1000 [00:15<00:13, 35.81it/s]Creating dataset samples:  53%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                    | 529/1000 [00:15<00:13, 35.76it/s]Creating dataset samples:  53%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                   | 533/1000 [00:15<00:13, 35.82it/s]Creating dataset samples:  54%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                  | 537/1000 [00:15<00:12, 35.84it/s]Creating dataset samples:  54%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                 | 541/1000 [00:15<00:12, 35.68it/s]Creating dataset samples:  55%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                | 545/1000 [00:15<00:12, 35.73it/s]Creating dataset samples:  55%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                               | 549/1000 [00:15<00:12, 35.69it/s]Creating dataset samples:  55%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                              | 553/1000 [00:15<00:12, 35.76it/s]Creating dataset samples:  56%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                             | 557/1000 [00:15<00:12, 35.82it/s]Creating dataset samples:  56%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                            | 561/1000 [00:16<00:12, 35.88it/s]Creating dataset samples:  56%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                            | 565/1000 [00:16<00:12, 35.98it/s]Creating dataset samples:  57%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                           | 569/1000 [00:16<00:12, 35.55it/s]Creating dataset samples:  57%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                          | 573/1000 [00:16<00:11, 35.62it/s]Creating dataset samples:  58%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                         | 577/1000 [00:16<00:11, 35.56it/s]Creating dataset samples:  58%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                        | 581/1000 [00:16<00:12, 34.60it/s]Creating dataset samples:  58%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                       | 585/1000 [00:16<00:12, 33.94it/s]Creating dataset samples:  59%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                      | 589/1000 [00:16<00:12, 33.75it/s]Creating dataset samples:  59%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                     | 593/1000 [00:16<00:12, 33.38it/s]Creating dataset samples:  60%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                    | 597/1000 [00:17<00:12, 33.48it/s]Creating dataset samples:  60%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                   | 601/1000 [00:17<00:11, 33.57it/s]Creating dataset samples:  60%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                  | 605/1000 [00:17<00:11, 34.04it/s]Creating dataset samples:  61%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                 | 609/1000 [00:17<00:11, 34.52it/s]Creating dataset samples:  61%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                | 613/1000 [00:17<00:11, 34.90it/s]Creating dataset samples:  62%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                               | 617/1000 [00:17<00:10, 35.23it/s]Creating dataset samples:  62%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                              | 621/1000 [00:17<00:10, 35.28it/s]Creating dataset samples:  62%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                             | 625/1000 [00:17<00:10, 35.50it/s]Creating dataset samples:  63%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                            | 629/1000 [00:18<00:10, 35.55it/s]Creating dataset samples:  63%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                           | 633/1000 [00:18<00:10, 35.69it/s]Creating dataset samples:  64%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                          | 637/1000 [00:18<00:10, 35.64it/s]Creating dataset samples:  64%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                         | 641/1000 [00:18<00:10, 35.48it/s]Creating dataset samples:  64%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                        | 645/1000 [00:18<00:10, 35.34it/s]Creating dataset samples:  65%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                       | 649/1000 [00:18<00:09, 35.22it/s]Creating dataset samples:  65%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                      | 653/1000 [00:18<00:09, 34.71it/s]Creating dataset samples:  66%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                     | 657/1000 [00:18<00:09, 34.90it/s]Creating dataset samples:  66%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                    | 661/1000 [00:18<00:09, 35.15it/s]Creating dataset samples:  66%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                   | 665/1000 [00:19<00:09, 35.36it/s]Creating dataset samples:  67%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                  | 669/1000 [00:19<00:09, 35.45it/s]Creating dataset samples:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                 | 673/1000 [00:19<00:09, 35.48it/s]Creating dataset samples:  68%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                | 677/1000 [00:19<00:09, 35.55it/s]Creating dataset samples:  68%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                               | 681/1000 [00:19<00:08, 35.54it/s]Creating dataset samples:  68%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                              | 685/1000 [00:19<00:08, 35.68it/s]Creating dataset samples:  69%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                             | 689/1000 [00:19<00:08, 35.78it/s]Creating dataset samples:  69%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                            | 693/1000 [00:19<00:08, 35.84it/s]Creating dataset samples:  70%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                           | 697/1000 [00:19<00:08, 35.87it/s]Creating dataset samples:  70%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                          | 701/1000 [00:20<00:08, 35.21it/s]Creating dataset samples:  70%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                         | 705/1000 [00:20<00:08, 34.56it/s]Creating dataset samples:  71%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                        | 709/1000 [00:20<00:08, 33.96it/s]Creating dataset samples:  71%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                       | 713/1000 [00:20<00:08, 33.79it/s]Creating dataset samples:  72%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                      | 717/1000 [00:20<00:08, 34.00it/s]Creating dataset samples:  72%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                     | 721/1000 [00:20<00:08, 34.14it/s]Creating dataset samples:  72%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                    | 725/1000 [00:20<00:07, 34.56it/s]Creating dataset samples:  73%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                   | 729/1000 [00:20<00:07, 34.85it/s]Creating dataset samples:  73%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                  | 733/1000 [00:20<00:07, 35.19it/s]Creating dataset samples:  74%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                 | 737/1000 [00:21<00:07, 35.37it/s]Creating dataset samples:  74%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                | 741/1000 [00:21<00:07, 35.49it/s]Creating dataset samples:  74%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                               | 745/1000 [00:21<00:07, 35.56it/s]Creating dataset samples:  75%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                              | 749/1000 [00:21<00:07, 35.45it/s]Creating dataset samples:  75%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                             | 753/1000 [00:21<00:07, 35.26it/s]Creating dataset samples:  76%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                            | 757/1000 [00:21<00:06, 35.27it/s]Creating dataset samples:  76%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                           | 761/1000 [00:21<00:06, 34.95it/s]Creating dataset samples:  76%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                          | 765/1000 [00:21<00:06, 35.11it/s]Creating dataset samples:  77%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                         | 769/1000 [00:21<00:06, 35.31it/s]Creating dataset samples:  77%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                        | 773/1000 [00:22<00:06, 35.40it/s]Creating dataset samples:  78%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                       | 777/1000 [00:22<00:06, 35.55it/s]Creating dataset samples:  78%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                      | 781/1000 [00:22<00:06, 35.78it/s]Creating dataset samples:  78%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                     | 785/1000 [00:22<00:06, 35.77it/s]Creating dataset samples:  79%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                    | 789/1000 [00:22<00:05, 35.56it/s]Creating dataset samples:  79%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                   | 793/1000 [00:22<00:05, 35.71it/s]Creating dataset samples:  80%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                  | 797/1000 [00:22<00:05, 35.83it/s]Creating dataset samples:  80%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                 | 801/1000 [00:22<00:05, 35.85it/s]Creating dataset samples:  80%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                | 805/1000 [00:22<00:05, 36.08it/s]Creating dataset samples:  81%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                               | 809/1000 [00:23<00:05, 36.18it/s]Creating dataset samples:  81%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                              | 813/1000 [00:23<00:05, 36.00it/s]Creating dataset samples:  82%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                             | 817/1000 [00:23<00:05, 35.62it/s]Creating dataset samples:  82%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                            | 821/1000 [00:23<00:05, 34.77it/s]Creating dataset samples:  82%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                           | 825/1000 [00:23<00:05, 34.19it/s]Creating dataset samples:  83%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                          | 829/1000 [00:23<00:05, 33.68it/s]Creating dataset samples:  83%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                         | 833/1000 [00:23<00:04, 33.87it/s]Creating dataset samples:  84%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                        | 837/1000 [00:23<00:04, 34.00it/s]Creating dataset samples:  84%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                       | 841/1000 [00:24<00:04, 34.51it/s]Creating dataset samples:  84%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                      | 845/1000 [00:24<00:04, 34.99it/s]Creating dataset samples:  85%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                     | 849/1000 [00:24<00:04, 35.30it/s]Creating dataset samples:  85%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                    | 853/1000 [00:24<00:04, 35.37it/s]Creating dataset samples:  86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                   | 857/1000 [00:24<00:04, 35.47it/s]Creating dataset samples:  86%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                  | 861/1000 [00:24<00:03, 35.43it/s]Creating dataset samples:  86%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                 | 865/1000 [00:24<00:03, 35.49it/s]Creating dataset samples:  87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                | 869/1000 [00:24<00:03, 35.58it/s]Creating dataset samples:  87%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                               | 873/1000 [00:24<00:03, 35.65it/s]Creating dataset samples:  88%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                              | 877/1000 [00:25<00:03, 35.77it/s]Creating dataset samples:  88%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                             | 881/1000 [00:25<00:03, 35.75it/s]Creating dataset samples:  88%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                            | 885/1000 [00:25<00:03, 35.72it/s]Creating dataset samples:  89%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                           | 889/1000 [00:25<00:03, 35.78it/s]Creating dataset samples:  89%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                          | 893/1000 [00:25<00:02, 35.85it/s]Creating dataset samples:  90%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                         | 897/1000 [00:25<00:02, 35.88it/s]Creating dataset samples:  90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                        | 901/1000 [00:25<00:02, 35.83it/s]Creating dataset samples:  90%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                       | 905/1000 [00:25<00:02, 35.74it/s]Creating dataset samples:  91%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                      | 909/1000 [00:25<00:02, 35.74it/s]Creating dataset samples:  91%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                     | 913/1000 [00:26<00:02, 35.85it/s]Creating dataset samples:  92%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                    | 917/1000 [00:26<00:02, 35.82it/s]Creating dataset samples:  92%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                   | 921/1000 [00:26<00:02, 35.55it/s]Creating dataset samples:  92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                  | 925/1000 [00:26<00:02, 35.52it/s]Creating dataset samples:  93%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                 | 929/1000 [00:26<00:01, 35.55it/s]Creating dataset samples:  93%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                | 933/1000 [00:26<00:01, 35.52it/s]Creating dataset samples:  94%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍               | 937/1000 [00:26<00:01, 34.62it/s]Creating dataset samples:  94%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎              | 941/1000 [00:26<00:01, 33.87it/s]Creating dataset samples:  94%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎             | 945/1000 [00:26<00:01, 33.55it/s]Creating dataset samples:  95%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎            | 949/1000 [00:27<00:01, 33.63it/s]Creating dataset samples:  95%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎           | 953/1000 [00:27<00:01, 33.83it/s]Creating dataset samples:  96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎          | 957/1000 [00:27<00:01, 34.36it/s]Creating dataset samples:  96%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎         | 961/1000 [00:27<00:01, 34.84it/s]Creating dataset samples:  96%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎        | 965/1000 [00:27<00:00, 35.11it/s]Creating dataset samples:  97%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎       | 969/1000 [00:27<00:00, 35.47it/s]Creating dataset samples:  97%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎      | 973/1000 [00:27<00:00, 35.26it/s]Creating dataset samples:  98%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎     | 977/1000 [00:27<00:00, 35.50it/s]Creating dataset samples:  98%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎    | 981/1000 [00:28<00:00, 35.62it/s]Creating dataset samples:  98%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎   | 985/1000 [00:28<00:00, 35.79it/s]Creating dataset samples:  99%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎  | 989/1000 [00:28<00:00, 35.71it/s]Creating dataset samples:  99%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎ | 993/1000 [00:28<00:00, 35.77it/s]Creating dataset samples: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎| 997/1000 [00:28<00:00, 35.71it/s]Creating dataset samples: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:28<00:00, 35.04it/s]
Starting training process...
Start train epoch 0, lr=0.0005 for run run_20240924T173827
Creating dataset samples:   0%|                                                                                                                                                                                                                                                                  | 0/2400 [00:00<?, ?it/s]Creating dataset samples:   0%|▍                                                                                                                                                                                                                                                         | 4/2400 [00:00<01:07, 35.33it/s]Creating dataset samples:   0%|▊                                                                                                                                                                                                                                                         | 8/2400 [00:00<01:07, 35.40it/s]Creating dataset samples:   0%|█▏                                                                                                                                                                                                                                                       | 12/2400 [00:00<01:07, 35.33it/s]Creating dataset samples:   1%|█▋                                                                                                                                                                                                                                                       | 16/2400 [00:00<01:07, 35.42it/s]Creating dataset samples:   1%|██                                                                                                                                                                                                                                                       | 20/2400 [00:00<01:06, 35.67it/s]Creating dataset samples:   1%|██▍                                                                                                                                                                                                                                                      | 24/2400 [00:00<01:06, 35.47it/s]Creating dataset samples:   1%|██▉                                                                                                                                                                                                                                                      | 28/2400 [00:00<01:07, 35.35it/s]Creating dataset samples:   1%|███▎                                                                                                                                                                                                                                                     | 32/2400 [00:00<01:06, 35.43it/s]Creating dataset samples:   2%|███▋                                                                                                                                                                                                                                                     | 36/2400 [00:01<01:06, 35.45it/s]Creating dataset samples:   2%|████▏                                                                                                                                                                                                                                                    | 40/2400 [00:01<01:06, 35.49it/s]Creating dataset samples:   2%|████▌                                                                                                                                                                                                                                                    | 44/2400 [00:01<01:06, 35.55it/s]Creating dataset samples:   2%|████▉                                                                                                                                                                                                                                                    | 48/2400 [00:01<01:06, 35.51it/s]Creating dataset samples:   2%|█████▍                                                                                                                                                                                                                                                   | 52/2400 [00:01<01:07, 34.79it/s]Creating dataset samples:   2%|█████▊                                                                                                                                                                                                                                                   | 56/2400 [00:01<01:08, 34.27it/s]Creating dataset samples:   2%|██████▏                                                                                                                                                                                                                                                  | 60/2400 [00:01<01:09, 33.76it/s]Creating dataset samples:   3%|██████▋                                                                                                                                                                                                                                                  | 64/2400 [00:01<01:09, 33.74it/s]Creating dataset samples:   3%|███████                                                                                                                                                                                                                                                  | 68/2400 [00:01<01:08, 33.87it/s]Creating dataset samples:   3%|███████▍                                                                                                                                                                                                                                                 | 72/2400 [00:02<01:08, 34.20it/s]Creating dataset samples:   3%|███████▉                                                                                                                                                                                                                                                 | 76/2400 [00:02<01:07, 34.33it/s]Creating dataset samples:   3%|████████▎                                                                                                                                                                                                                                                | 80/2400 [00:02<01:07, 34.62it/s]Creating dataset samples:   4%|████████▋                                                                                                                                                                                                                                                | 84/2400 [00:02<01:06, 34.99it/s]Creating dataset samples:   4%|█████████▏                                                                                                                                                                                                                                               | 88/2400 [00:02<01:05, 35.05it/s]Creating dataset samples:   4%|█████████▌                                                                                                                                                                                                                                               | 92/2400 [00:02<01:05, 35.20it/s]Creating dataset samples:   4%|█████████▉                                                                                                                                                                                                                                               | 96/2400 [00:02<01:05, 35.26it/s]Creating dataset samples:   4%|██████████▎                                                                                                                                                                                                                                             | 100/2400 [00:02<01:05, 35.38it/s]Creating dataset samples:   4%|██████████▋                                                                                                                                                                                                                                             | 104/2400 [00:02<01:05, 35.29it/s]Creating dataset samples:   4%|███████████▏                                                                                                                                                                                                                                            | 108/2400 [00:03<01:05, 35.15it/s]Creating dataset samples:   5%|███████████▌                                                                                                                                                                                                                                            | 112/2400 [00:03<01:04, 35.29it/s]Creating dataset samples:   5%|███████████▉                                                                                                                                                                                                                                            | 116/2400 [00:03<01:05, 34.89it/s]Creating dataset samples:   5%|████████████▍                                                                                                                                                                                                                                           | 120/2400 [00:03<01:08, 33.28it/s]Creating dataset samples:   5%|████████████▊                                                                                                                                                                                                                                           | 124/2400 [00:03<01:07, 33.70it/s]Creating dataset samples:   5%|█████████████▏                                                                                                                                                                                                                                          | 128/2400 [00:03<01:06, 34.02it/s]Creating dataset samples:   6%|█████████████▋                                                                                                                                                                                                                                          | 132/2400 [00:03<01:05, 34.47it/s]Creating dataset samples:   6%|██████████████                                                                                                                                                                                                                                          | 136/2400 [00:03<01:04, 34.85it/s]Creating dataset samples:   6%|██████████████▍                                                                                                                                                                                                                                         | 140/2400 [00:04<01:04, 35.05it/s]Creating dataset samples:   6%|██████████████▉                                                                                                                                                                                                                                         | 144/2400 [00:04<01:03, 35.28it/s]Creating dataset samples:   6%|███████████████▎                                                                                                                                                                                                                                        | 148/2400 [00:04<01:03, 35.31it/s]Creating dataset samples:   6%|███████████████▋                                                                                                                                                                                                                                        | 152/2400 [00:04<01:03, 35.23it/s]Creating dataset samples:   6%|████████████████                                                                                                                                                                                                                                        | 156/2400 [00:04<01:03, 35.21it/s]Creating dataset samples:   7%|████████████████▌                                                                                                                                                                                                                                       | 160/2400 [00:04<01:04, 34.63it/s]Creating dataset samples:   7%|████████████████▉                                                                                                                                                                                                                                       | 164/2400 [00:04<01:04, 34.41it/s]Creating dataset samples:   7%|█████████████████▎                                                                                                                                                                                                                                      | 168/2400 [00:04<01:06, 33.66it/s]Creating dataset samples:   7%|█████████████████▊                                                                                                                                                                                                                                      | 172/2400 [00:04<01:06, 33.56it/s]Creating dataset samples:   7%|██████████████████▏                                                                                                                                                                                                                                     | 176/2400 [00:05<01:07, 33.04it/s]Creating dataset samples:   8%|██████████████████▌                                                                                                                                                                                                                                     | 180/2400 [00:05<01:06, 33.35it/s]Creating dataset samples:   8%|███████████████████                                                                                                                                                                                                                                     | 184/2400 [00:05<01:06, 33.50it/s]Creating dataset samples:   8%|███████████████████▍                                                                                                                                                                                                                                    | 188/2400 [00:05<01:04, 34.10it/s]Creating dataset samples:   8%|███████████████████▊                                                                                                                                                                                                                                    | 192/2400 [00:05<01:03, 34.55it/s]Creating dataset samples:   8%|████████████████████▎                                                                                                                                                                                                                                   | 196/2400 [00:05<01:03, 34.86it/s]Creating dataset samples:   8%|████████████████████▋                                                                                                                                                                                                                                   | 200/2400 [00:05<01:02, 35.03it/s]Creating dataset samples:   8%|█████████████████████                                                                                                                                                                                                                                   | 204/2400 [00:05<01:02, 35.34it/s]Creating dataset samples:   9%|█████████████████████▍                                                                                                                                                                                                                                  | 208/2400 [00:05<01:01, 35.45it/s]Creating dataset samples:   9%|█████████████████████▉                                                                                                                                                                                                                                  | 212/2400 [00:06<01:01, 35.43it/s]Creating dataset samples:   9%|██████████████████████▎                                                                                                                                                                                                                                 | 216/2400 [00:06<01:01, 35.38it/s]Creating dataset samples:   9%|██████████████████████▋                                                                                                                                                                                                                                 | 220/2400 [00:06<01:01, 35.37it/s]Creating dataset samples:   9%|███████████████████████▏                                                                                                                                                                                                                                | 224/2400 [00:06<01:01, 35.49it/s]Creating dataset samples:  10%|███████████████████████▌                                                                                                                                                                                                                                | 228/2400 [00:06<01:01, 35.53it/s]Creating dataset samples:  10%|███████████████████████▉                                                                                                                                                                                                                                | 232/2400 [00:06<01:00, 35.56it/s]Creating dataset samples:  10%|████████████████████████▍                                                                                                                                                                                                                               | 236/2400 [00:06<01:00, 35.48it/s]Creating dataset samples:  10%|████████████████████████▊                                                                                                                                                                                                                               | 240/2400 [00:06<01:00, 35.65it/s]Creating dataset samples:  10%|█████████████████████████▏                                                                                                                                                                                                                              | 244/2400 [00:06<01:00, 35.59it/s]Creating dataset samples:  10%|█████████████████████████▋                                                                                                                                                                                                                              | 248/2400 [00:07<01:01, 35.02it/s]Creating dataset samples:  10%|██████████████████████████                                                                                                                                                                                                                              | 252/2400 [00:07<01:01, 34.93it/s]Creating dataset samples:  11%|██████████████████████████▍                                                                                                                                                                                                                             | 256/2400 [00:07<01:01, 35.13it/s]Creating dataset samples:  11%|██████████████████████████▊                                                                                                                                                                                                                             | 260/2400 [00:07<01:00, 35.35it/s]Creating dataset samples:  11%|███████████████████████████▎                                                                                                                                                                                                                            | 264/2400 [00:07<01:00, 35.45it/s]Creating dataset samples:  11%|███████████████████████████▋                                                                                                                                                                                                                            | 268/2400 [00:07<01:00, 35.47it/s]Creating dataset samples:  11%|████████████████████████████                                                                                                                                                                                                                            | 272/2400 [00:07<01:00, 35.43it/s]Creating dataset samples:  12%|████████████████████████████▌                                                                                                                                                                                                                           | 276/2400 [00:07<00:59, 35.52it/s]Creating dataset samples:  12%|████████████████████████████▉                                                                                                                                                                                                                           | 280/2400 [00:08<00:59, 35.47it/s]Creating dataset samples:  12%|█████████████████████████████▎                                                                                                                                                                                                                          | 284/2400 [00:08<01:01, 34.47it/s]Creating dataset samples:  12%|█████████████████████████████▊                                                                                                                                                                                                                          | 288/2400 [00:08<01:01, 34.27it/s]Creating dataset samples:  12%|██████████████████████████████▏                                                                                                                                                                                                                         | 292/2400 [00:08<01:02, 33.47it/s]Creating dataset samples:  12%|██████████████████████████████▌                                                                                                                                                                                                                         | 296/2400 [00:08<01:03, 33.27it/s]Creating dataset samples:  12%|███████████████████████████████                                                                                                                                                                                                                         | 300/2400 [00:08<01:03, 33.23it/s]Creating dataset samples:  13%|███████████████████████████████▍                                                                                                                                                                                                                        | 304/2400 [00:08<01:02, 33.64it/s]Creating dataset samples:  13%|███████████████████████████████▊                                                                                                                                                                                                                        | 308/2400 [00:08<01:01, 34.13it/s]Creating dataset samples:  13%|████████████████████████████████▏                                                                                                                                                                                                                       | 312/2400 [00:08<01:00, 34.55it/s]Creating dataset samples:  13%|████████████████████████████████▋                                                                                                                                                                                                                       | 316/2400 [00:09<00:59, 34.89it/s]Creating dataset samples:  13%|█████████████████████████████████                                                                                                                                                                                                                       | 320/2400 [00:09<00:59, 34.93it/s]Creating dataset samples:  14%|█████████████████████████████████▍                                                                                                                                                                                                                      | 324/2400 [00:09<00:59, 35.09it/s]Creating dataset samples:  14%|█████████████████████████████████▉                                                                                                                                                                                                                      | 328/2400 [00:09<00:59, 35.10it/s]Creating dataset samples:  14%|██████████████████████████████████▎                                                                                                                                                                                                                     | 332/2400 [00:09<00:58, 35.37it/s]Creating dataset samples:  14%|██████████████████████████████████▋                                                                                                                                                                                                                     | 336/2400 [00:09<00:58, 35.38it/s]Creating dataset samples:  14%|███████████████████████████████████▏                                                                                                                                                                                                                    | 340/2400 [00:09<00:58, 35.22it/s]Creating dataset samples:  14%|███████████████████████████████████▌                                                                                                                                                                                                                    | 344/2400 [00:09<00:58, 35.23it/s]Creating dataset samples:  14%|███████████████████████████████████▉                                                                                                                                                                                                                    | 348/2400 [00:09<00:57, 35.43it/s]Creating dataset samples:  15%|████████████████████████████████████▎                                                                                                                                                                                                                   | 352/2400 [00:10<00:57, 35.58it/s]Creating dataset samples:  15%|████████████████████████████████████▊                                                                                                                                                                                                                   | 356/2400 [00:10<00:57, 35.60it/s]Creating dataset samples:  15%|█████████████████████████████████████▏                                                                                                                                                                                                                  | 360/2400 [00:10<00:57, 35.60it/s]Creating dataset samples:  15%|█████████████████████████████████████▌                                                                                                                                                                                                                  | 364/2400 [00:10<00:57, 35.54it/s]Creating dataset samples:  15%|██████████████████████████████████████                                                                                                                                                                                                                  | 368/2400 [00:10<00:57, 35.63it/s]Creating dataset samples:  16%|██████████████████████████████████████▍                                                                                                                                                                                                                 | 372/2400 [00:10<00:56, 35.64it/s]Creating dataset samples:  16%|██████████████████████████████████████▊                                                                                                                                                                                                                 | 376/2400 [00:10<00:56, 35.73it/s]Creating dataset samples:  16%|███████████████████████████████████████▎                                                                                                                                                                                                                | 380/2400 [00:10<00:56, 35.53it/s]Creating dataset samples:  16%|███████████████████████████████████████▋                                                                                                                                                                                                                | 384/2400 [00:10<00:56, 35.47it/s]Creating dataset samples:  16%|████████████████████████████████████████                                                                                                                                                                                                                | 388/2400 [00:11<00:56, 35.58it/s]Creating dataset samples:  16%|████████████████████████████████████████▌                                                                                                                                                                                                               | 392/2400 [00:11<00:56, 35.51it/s]Creating dataset samples:  16%|████████████████████████████████████████▉                                                                                                                                                                                                               | 396/2400 [00:11<00:56, 35.28it/s]Creating dataset samples:  17%|█████████████████████████████████████████▎                                                                                                                                                                                                              | 400/2400 [00:11<00:58, 34.41it/s]Creating dataset samples:  17%|█████████████████████████████████████████▋                                                                                                                                                                                                              | 404/2400 [00:11<00:58, 34.15it/s]Creating dataset samples:  17%|██████████████████████████████████████████▏                                                                                                                                                                                                             | 408/2400 [00:11<00:59, 33.52it/s]Creating dataset samples:  17%|██████████████████████████████████████████▌                                                                                                                                                                                                             | 412/2400 [00:11<00:58, 33.83it/s]Creating dataset samples:  17%|██████████████████████████████████████████▉                                                                                                                                                                                                             | 416/2400 [00:11<00:58, 33.79it/s]Creating dataset samples:  18%|███████████████████████████████████████████▍                                                                                                                                                                                                            | 420/2400 [00:12<00:57, 34.23it/s]Creating dataset samples:  18%|███████████████████████████████████████████▊                                                                                                                                                                                                            | 424/2400 [00:12<00:57, 34.55it/s]Creating dataset samples:  18%|████████████████████████████████████████████▏                                                                                                                                                                                                           | 428/2400 [00:12<00:56, 34.74it/s]Creating dataset samples:  18%|████████████████████████████████████████████▋                                                                                                                                                                                                           | 432/2400 [00:12<00:56, 34.99it/s]Creating dataset samples:  18%|█████████████████████████████████████████████                                                                                                                                                                                                           | 436/2400 [00:12<00:55, 35.08it/s]Creating dataset samples:  18%|█████████████████████████████████████████████▍                                                                                                                                                                                                          | 440/2400 [00:12<00:55, 35.34it/s]Creating dataset samples:  18%|█████████████████████████████████████████████▉                                                                                                                                                                                                          | 444/2400 [00:12<00:55, 35.29it/s]Creating dataset samples:  19%|██████████████████████████████████████████████▎                                                                                                                                                                                                         | 448/2400 [00:12<00:55, 35.46it/s]Creating dataset samples:  19%|██████████████████████████████████████████████▋                                                                                                                                                                                                         | 452/2400 [00:12<00:55, 35.23it/s]Creating dataset samples:  19%|███████████████████████████████████████████████                                                                                                                                                                                                         | 456/2400 [00:13<00:55, 35.10it/s]Creating dataset samples:  19%|███████████████████████████████████████████████▌                                                                                                                                                                                                        | 460/2400 [00:13<00:55, 34.95it/s]Creating dataset samples:  19%|███████████████████████████████████████████████▉                                                                                                                                                                                                        | 464/2400 [00:13<00:55, 34.95it/s]Creating dataset samples:  20%|████████████████████████████████████████████████▎                                                                                                                                                                                                       | 468/2400 [00:13<00:55, 35.11it/s]Creating dataset samples:  20%|████████████████████████████████████████████████▊                                                                                                                                                                                                       | 472/2400 [00:13<00:55, 34.94it/s]Creating dataset samples:  20%|█████████████████████████████████████████████████▏                                                                                                                                                                                                      | 476/2400 [00:13<00:55, 34.47it/s]Creating dataset samples:  20%|█████████████████████████████████████████████████▌                                                                                                                                                                                                      | 480/2400 [00:13<00:55, 34.71it/s]Creating dataset samples:  20%|██████████████████████████████████████████████████                                                                                                                                                                                                      | 484/2400 [00:13<00:54, 35.05it/s]Creating dataset samples:  20%|██████████████████████████████████████████████████▍                                                                                                                                                                                                     | 488/2400 [00:13<00:54, 35.06it/s]Creating dataset samples:  20%|██████████████████████████████████████████████████▊                                                                                                                                                                                                     | 492/2400 [00:14<00:54, 35.27it/s]Creating dataset samples:  21%|███████████████████████████████████████████████████▎                                                                                                                                                                                                    | 496/2400 [00:14<00:53, 35.27it/s]Creating dataset samples:  21%|███████████████████████████████████████████████████▋                                                                                                                                                                                                    | 500/2400 [00:14<00:53, 35.33it/s]Creating dataset samples:  21%|████████████████████████████████████████████████████                                                                                                                                                                                                    | 504/2400 [00:14<00:53, 35.34it/s]Creating dataset samples:  21%|████████████████████████████████████████████████████▍                                                                                                                                                                                                   | 508/2400 [00:14<00:53, 35.44it/s]Creating dataset samples:  21%|████████████████████████████████████████████████████▉                                                                                                                                                                                                   | 512/2400 [00:14<00:53, 35.15it/s]Creating dataset samples:  22%|█████████████████████████████████████████████████████▎                                                                                                                                                                                                  | 516/2400 [00:14<00:54, 34.49it/s]Creating dataset samples:  22%|█████████████████████████████████████████████████████▋                                                                                                                                                                                                  | 520/2400 [00:14<00:55, 34.05it/s]Creating dataset samples:  22%|██████████████████████████████████████████████████████▏                                                                                                                                                                                                 | 524/2400 [00:15<00:55, 33.57it/s]Creating dataset samples:  22%|██████████████████████████████████████████████████████▌                                                                                                                                                                                                 | 528/2400 [00:15<00:55, 33.83it/s]Creating dataset samples:  22%|██████████████████████████████████████████████████████▉                                                                                                                                                                                                 | 532/2400 [00:15<00:55, 33.90it/s]Creating dataset samples:  22%|███████████████████████████████████████████████████████▍                                                                                                                                                                                                | 536/2400 [00:15<00:54, 34.36it/s]Creating dataset samples:  22%|███████████████████████████████████████████████████████▊                                                                                                                                                                                                | 540/2400 [00:15<00:53, 34.77it/s]Creating dataset samples:  23%|████████████████████████████████████████████████████████▏                                                                                                                                                                                               | 544/2400 [00:15<00:52, 35.08it/s]Creating dataset samples:  23%|████████████████████████████████████████████████████████▋                                                                                                                                                                                               | 548/2400 [00:15<00:52, 35.24it/s]Creating dataset samples:  23%|█████████████████████████████████████████████████████████                                                                                                                                                                                               | 552/2400 [00:15<00:52, 35.49it/s]Creating dataset samples:  23%|█████████████████████████████████████████████████████████▍                                                                                                                                                                                              | 556/2400 [00:15<00:51, 35.52it/s]Creating dataset samples:  23%|█████████████████████████████████████████████████████████▊                                                                                                                                                                                              | 560/2400 [00:16<00:51, 35.56it/s]Creating dataset samples:  24%|██████████████████████████████████████████████████████████▎                                                                                                                                                                                             | 564/2400 [00:16<00:51, 35.61it/s]Creating dataset samples:  24%|██████████████████████████████████████████████████████████▋                                                                                                                                                                                             | 568/2400 [00:16<00:51, 35.66it/s]Creating dataset samples:  24%|███████████████████████████████████████████████████████████                                                                                                                                                                                             | 572/2400 [00:16<00:51, 35.57it/s]Creating dataset samples:  24%|███████████████████████████████████████████████████████████▌                                                                                                                                                                                            | 576/2400 [00:16<00:51, 35.44it/s]Creating dataset samples:  24%|███████████████████████████████████████████████████████████▉                                                                                                                                                                                            | 580/2400 [00:16<00:51, 35.31it/s]Creating dataset samples:  24%|████████████████████████████████████████████████████████████▎                                                                                                                                                                                           | 584/2400 [00:16<00:51, 35.36it/s]Creating dataset samples:  24%|████████████████████████████████████████████████████████████▊                                                                                                                                                                                           | 588/2400 [00:16<00:51, 35.49it/s]Creating dataset samples:  25%|█████████████████████████████████████████████████████████████▏                                                                                                                                                                                          | 592/2400 [00:16<00:51, 35.41it/s]Creating dataset samples:  25%|█████████████████████████████████████████████████████████████▌                                                                                                                                                                                          | 596/2400 [00:17<00:50, 35.47it/s]Creating dataset samples:  25%|██████████████████████████████████████████████████████████████                                                                                                                                                                                          | 600/2400 [00:17<00:50, 35.47it/s]Creating dataset samples:  25%|██████████████████████████████████████████████████████████████▍                                                                                                                                                                                         | 604/2400 [00:17<00:50, 35.54it/s]Creating dataset samples:  25%|██████████████████████████████████████████████████████████████▊                                                                                                                                                                                         | 608/2400 [00:17<00:50, 35.46it/s]Creating dataset samples:  26%|███████████████████████████████████████████████████████████████▏                                                                                                                                                                                        | 612/2400 [00:17<00:50, 35.50it/s]Creating dataset samples:  26%|███████████████████████████████████████████████████████████████▋                                                                                                                                                                                        | 616/2400 [00:17<00:50, 35.48it/s]Creating dataset samples:  26%|████████████████████████████████████████████████████████████████                                                                                                                                                                                        | 620/2400 [00:17<00:50, 35.57it/s]Creating dataset samples:  26%|████████████████████████████████████████████████████████████████▍                                                                                                                                                                                       | 624/2400 [00:17<00:50, 35.46it/s]Creating dataset samples:  26%|████████████████████████████████████████████████████████████████▉                                                                                                                                                                                       | 628/2400 [00:17<00:50, 35.07it/s]Creating dataset samples:  26%|█████████████████████████████████████████████████████████████████▎                                                                                                                                                                                      | 632/2400 [00:18<00:51, 34.26it/s]Creating dataset samples:  26%|█████████████████████████████████████████████████████████████████▋                                                                                                                                                                                      | 636/2400 [00:18<00:52, 33.58it/s]Creating dataset samples:  27%|██████████████████████████████████████████████████████████████████▏                                                                                                                                                                                     | 640/2400 [00:18<00:52, 33.25it/s]Creating dataset samples:  27%|██████████████████████████████████████████████████████████████████▌                                                                                                                                                                                     | 644/2400 [00:18<00:52, 33.41it/s]Creating dataset samples:  27%|██████████████████████████████████████████████████████████████████▉                                                                                                                                                                                     | 648/2400 [00:18<00:52, 33.62it/s]Creating dataset samples:  27%|███████████████████████████████████████████████████████████████████▎                                                                                                                                                                                    | 652/2400 [00:18<00:52, 33.53it/s]Creating dataset samples:  27%|███████████████████████████████████████████████████████████████████▊                                                                                                                                                                                    | 656/2400 [00:18<00:51, 33.61it/s]Creating dataset samples:  28%|████████████████████████████████████████████████████████████████████▏                                                                                                                                                                                   | 660/2400 [00:18<00:50, 34.14it/s]Creating dataset samples:  28%|████████████████████████████████████████████████████████████████████▌                                                                                                                                                                                   | 664/2400 [00:19<00:50, 34.50it/s]Creating dataset samples:  28%|█████████████████████████████████████████████████████████████████████                                                                                                                                                                                   | 668/2400 [00:19<00:50, 34.57it/s]Creating dataset samples:  28%|█████████████████████████████████████████████████████████████████████▍                                                                                                                                                                                  | 672/2400 [00:19<00:49, 34.71it/s]Creating dataset samples:  28%|█████████████████████████████████████████████████████████████████████▊                                                                                                                                                                                  | 676/2400 [00:19<00:49, 34.89it/s]Creating dataset samples:  28%|██████████████████████████████████████████████████████████████████████▎                                                                                                                                                                                 | 680/2400 [00:19<00:49, 35.00it/s]Creating dataset samples:  28%|██████████████████████████████████████████████████████████████████████▋                                                                                                                                                                                 | 684/2400 [00:19<00:48, 35.21it/s]Creating dataset samples:  29%|███████████████████████████████████████████████████████████████████████                                                                                                                                                                                 | 688/2400 [00:19<00:48, 35.23it/s]Creating dataset samples:  29%|███████████████████████████████████████████████████████████████████████▌                                                                                                                                                                                | 692/2400 [00:19<00:48, 35.19it/s]Creating dataset samples:  29%|███████████████████████████████████████████████████████████████████████▉                                                                                                                                                                                | 696/2400 [00:19<00:48, 35.12it/s]Creating dataset samples:  29%|████████████████████████████████████████████████████████████████████████▎                                                                                                                                                                               | 700/2400 [00:20<00:48, 35.22it/s]Creating dataset samples:  29%|████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                               | 704/2400 [00:20<00:48, 35.31it/s]Creating dataset samples:  30%|█████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                              | 708/2400 [00:20<00:47, 35.34it/s]Creating dataset samples:  30%|█████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                              | 712/2400 [00:20<00:47, 35.42it/s]Creating dataset samples:  30%|█████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                              | 716/2400 [00:20<00:47, 35.41it/s]Creating dataset samples:  30%|██████████████████████████████████████████████████████████████████████████▍                                                                                                                                                                             | 720/2400 [00:20<00:47, 35.46it/s]Creating dataset samples:  30%|██████████████████████████████████████████████████████████████████████████▊                                                                                                                                                                             | 724/2400 [00:20<00:47, 35.51it/s]Creating dataset samples:  30%|███████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                            | 728/2400 [00:20<00:47, 35.52it/s]Creating dataset samples:  30%|███████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                            | 732/2400 [00:20<00:47, 35.44it/s]Creating dataset samples:  31%|████████████████████████████████████████████████████████████████████████████                                                                                                                                                                            | 736/2400 [00:21<00:46, 35.53it/s]Creating dataset samples:  31%|████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                                           | 740/2400 [00:21<00:46, 35.65it/s]Creating dataset samples:  31%|████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                           | 744/2400 [00:21<00:47, 35.14it/s]Creating dataset samples:  31%|█████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                                          | 748/2400 [00:21<00:48, 34.17it/s]Creating dataset samples:  31%|█████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                          | 752/2400 [00:21<00:49, 33.54it/s]Creating dataset samples:  32%|██████████████████████████████████████████████████████████████████████████████                                                                                                                                                                          | 756/2400 [00:21<00:49, 33.22it/s]Creating dataset samples:  32%|██████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                         | 760/2400 [00:21<00:48, 33.53it/s]Creating dataset samples:  32%|██████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                         | 764/2400 [00:21<00:48, 33.82it/s]Creating dataset samples:  32%|███████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                                        | 768/2400 [00:22<00:47, 34.11it/s]Creating dataset samples:  32%|███████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                                        | 772/2400 [00:22<00:47, 34.22it/s]Creating dataset samples:  32%|████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                       | 776/2400 [00:22<00:47, 34.21it/s]Creating dataset samples:  32%|████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                       | 780/2400 [00:22<00:47, 34.33it/s]Creating dataset samples:  33%|█████████████████████████████████████████████████████████████████████████████████                                                                                                                                                                       | 784/2400 [00:22<00:47, 34.38it/s]Creating dataset samples:  33%|█████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                                      | 788/2400 [00:22<00:46, 34.46it/s]Creating dataset samples:  33%|█████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                                      | 792/2400 [00:22<00:46, 34.43it/s]Creating dataset samples:  33%|██████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                                     | 796/2400 [00:22<00:46, 34.79it/s]Creating dataset samples:  33%|██████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                     | 800/2400 [00:22<00:45, 35.02it/s]Creating dataset samples:  34%|███████████████████████████████████████████████████████████████████████████████████                                                                                                                                                                     | 804/2400 [00:23<00:45, 35.22it/s]Creating dataset samples:  34%|███████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                                    | 808/2400 [00:23<00:45, 35.22it/s]Creating dataset samples:  34%|███████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                    | 812/2400 [00:23<00:45, 35.14it/s]Creating dataset samples:  34%|████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                                   | 816/2400 [00:23<00:44, 35.32it/s]Creating dataset samples:  34%|████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                   | 820/2400 [00:23<00:44, 35.36it/s]Creating dataset samples:  34%|█████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                  | 824/2400 [00:23<00:44, 35.33it/s]Creating dataset samples:  34%|█████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                  | 828/2400 [00:23<00:44, 35.13it/s]Creating dataset samples:  35%|█████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                  | 832/2400 [00:23<00:45, 34.55it/s]Creating dataset samples:  35%|██████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                                 | 836/2400 [00:23<00:44, 34.77it/s]Creating dataset samples:  35%|██████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                                 | 840/2400 [00:24<00:44, 35.06it/s]Creating dataset samples:  35%|███████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                | 844/2400 [00:24<00:44, 35.14it/s]Creating dataset samples:  35%|███████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                | 848/2400 [00:24<00:43, 35.30it/s]Creating dataset samples:  36%|████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                                | 852/2400 [00:24<00:43, 35.40it/s]Creating dataset samples:  36%|████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                               | 856/2400 [00:24<00:43, 35.38it/s]Creating dataset samples:  36%|████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                               | 860/2400 [00:24<00:45, 33.97it/s]Creating dataset samples:  36%|█████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                              | 864/2400 [00:24<00:45, 33.67it/s]Creating dataset samples:  36%|█████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                              | 868/2400 [00:24<00:45, 33.34it/s]Creating dataset samples:  36%|██████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                              | 872/2400 [00:25<00:45, 33.34it/s]Creating dataset samples:  36%|██████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                             | 876/2400 [00:25<00:45, 33.52it/s]Creating dataset samples:  37%|██████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                             | 880/2400 [00:25<00:44, 33.87it/s]Creating dataset samples:  37%|███████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                            | 884/2400 [00:25<00:44, 34.38it/s]Creating dataset samples:  37%|███████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                            | 888/2400 [00:25<00:43, 34.68it/s]Creating dataset samples:  37%|████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                           | 892/2400 [00:25<00:43, 34.78it/s]Creating dataset samples:  37%|████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                           | 896/2400 [00:25<00:43, 34.71it/s]Creating dataset samples:  38%|█████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                           | 900/2400 [00:25<00:43, 34.67it/s]Creating dataset samples:  38%|█████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                          | 904/2400 [00:25<00:43, 34.58it/s]Creating dataset samples:  38%|█████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                          | 908/2400 [00:26<00:43, 34.64it/s]Creating dataset samples:  38%|██████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                         | 912/2400 [00:26<00:42, 34.74it/s]Creating dataset samples:  38%|██████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                         | 916/2400 [00:26<00:42, 34.82it/s]Creating dataset samples:  38%|███████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                         | 920/2400 [00:26<00:42, 34.97it/s]Creating dataset samples:  38%|███████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                        | 924/2400 [00:26<00:42, 35.01it/s]Creating dataset samples:  39%|███████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                        | 928/2400 [00:26<00:42, 35.02it/s]Creating dataset samples:  39%|████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                       | 932/2400 [00:26<00:42, 34.87it/s]Creating dataset samples:  39%|████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                       | 936/2400 [00:26<00:41, 34.91it/s]Creating dataset samples:  39%|█████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                      | 940/2400 [00:26<00:41, 34.96it/s]Creating dataset samples:  39%|█████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                      | 944/2400 [00:27<00:41, 35.14it/s]Creating dataset samples:  40%|█████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                      | 948/2400 [00:27<00:41, 35.26it/s]Creating dataset samples:  40%|██████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                     | 952/2400 [00:27<00:41, 35.29it/s]Creating dataset samples:  40%|██████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                     | 956/2400 [00:27<00:40, 35.31it/s]Creating dataset samples:  40%|███████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                    | 960/2400 [00:27<00:40, 35.40it/s]Creating dataset samples:  40%|███████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                    | 964/2400 [00:27<00:40, 35.28it/s]Creating dataset samples:  40%|████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                    | 968/2400 [00:27<00:40, 35.22it/s]Creating dataset samples:  40%|████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                   | 972/2400 [00:27<00:40, 35.08it/s]Creating dataset samples:  41%|████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                   | 976/2400 [00:28<00:41, 34.17it/s]Creating dataset samples:  41%|█████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                                  | 980/2400 [00:28<00:41, 33.94it/s]Creating dataset samples:  41%|█████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                  | 984/2400 [00:28<00:42, 33.31it/s]Creating dataset samples:  41%|██████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                  | 988/2400 [00:28<00:42, 33.29it/s]Creating dataset samples:  41%|██████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                 | 992/2400 [00:28<00:42, 33.40it/s]Creating dataset samples:  42%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                 | 996/2400 [00:28<00:41, 33.86it/s]Creating dataset samples:  42%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                | 1000/2400 [00:28<00:40, 34.36it/s]Creating dataset samples:  42%|███████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                               | 1004/2400 [00:28<00:40, 34.43it/s]Creating dataset samples:  42%|███████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                               | 1008/2400 [00:28<00:40, 34.03it/s]Creating dataset samples:  42%|████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                              | 1012/2400 [00:29<00:40, 34.26it/s]Creating dataset samples:  42%|████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                              | 1016/2400 [00:29<00:40, 34.46it/s]Creating dataset samples:  42%|████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                              | 1020/2400 [00:29<00:39, 34.57it/s]Creating dataset samples:  43%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                             | 1024/2400 [00:29<00:39, 34.54it/s]Creating dataset samples:  43%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                             | 1028/2400 [00:29<00:39, 34.81it/s]Creating dataset samples:  43%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                            | 1032/2400 [00:29<00:39, 34.96it/s]Creating dataset samples:  43%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                            | 1036/2400 [00:29<00:38, 35.09it/s]Creating dataset samples:  43%|███████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                            | 1040/2400 [00:29<00:38, 35.05it/s]Creating dataset samples:  44%|███████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                           | 1044/2400 [00:29<00:38, 35.11it/s]Creating dataset samples:  44%|███████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                           | 1048/2400 [00:30<00:38, 35.13it/s]Creating dataset samples:  44%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                          | 1052/2400 [00:30<00:38, 34.91it/s]Creating dataset samples:  44%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                          | 1056/2400 [00:30<00:38, 34.84it/s]Creating dataset samples:  44%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                          | 1060/2400 [00:30<00:38, 34.85it/s]Creating dataset samples:  44%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                         | 1064/2400 [00:30<00:38, 35.06it/s]Creating dataset samples:  44%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                         | 1068/2400 [00:30<00:37, 35.06it/s]Creating dataset samples:  45%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                        | 1072/2400 [00:30<00:37, 35.04it/s]Creating dataset samples:  45%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                        | 1076/2400 [00:30<00:37, 35.01it/s]Creating dataset samples:  45%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                       | 1080/2400 [00:31<00:37, 35.00it/s]Creating dataset samples:  45%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                       | 1084/2400 [00:31<00:37, 35.04it/s]Creating dataset samples:  45%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                       | 1088/2400 [00:31<00:38, 34.52it/s]Creating dataset samples:  46%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                      | 1092/2400 [00:31<00:43, 30.28it/s]Creating dataset samples:  46%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                      | 1096/2400 [00:31<00:44, 29.06it/s]Creating dataset samples:  46%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                     | 1100/2400 [00:31<00:43, 30.17it/s]Creating dataset samples:  46%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                     | 1104/2400 [00:31<00:41, 31.13it/s]Creating dataset samples:  46%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                     | 1108/2400 [00:31<00:39, 32.39it/s]Creating dataset samples:  46%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                    | 1112/2400 [00:32<00:38, 33.30it/s]Creating dataset samples:  46%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                    | 1116/2400 [00:32<00:37, 33.95it/s]Creating dataset samples:  47%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                   | 1120/2400 [00:32<00:37, 34.42it/s]Creating dataset samples:  47%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                   | 1124/2400 [00:32<00:36, 34.65it/s]Creating dataset samples:  47%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                   | 1128/2400 [00:32<00:36, 35.00it/s]Creating dataset samples:  47%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                  | 1132/2400 [00:32<00:35, 35.27it/s]Creating dataset samples:  47%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                  | 1136/2400 [00:32<00:35, 35.25it/s]Creating dataset samples:  48%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                 | 1140/2400 [00:32<00:35, 35.48it/s]Creating dataset samples:  48%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                 | 1144/2400 [00:32<00:35, 35.54it/s]Creating dataset samples:  48%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                | 1148/2400 [00:33<00:35, 35.47it/s]Creating dataset samples:  48%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                | 1152/2400 [00:33<00:35, 35.62it/s]Creating dataset samples:  48%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                | 1156/2400 [00:33<00:35, 35.39it/s]Creating dataset samples:  48%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                               | 1160/2400 [00:33<00:35, 35.38it/s]Creating dataset samples:  48%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                               | 1164/2400 [00:33<00:34, 35.49it/s]Creating dataset samples:  49%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                              | 1168/2400 [00:33<00:34, 35.67it/s]Creating dataset samples:  49%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                              | 1172/2400 [00:33<00:34, 35.49it/s]Creating dataset samples:  49%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                              | 1176/2400 [00:33<00:34, 35.66it/s]Creating dataset samples:  49%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                             | 1180/2400 [00:33<00:34, 35.52it/s]Creating dataset samples:  49%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                             | 1184/2400 [00:34<00:34, 34.83it/s]Creating dataset samples:  50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                            | 1188/2400 [00:34<00:34, 34.96it/s]Creating dataset samples:  50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                            | 1192/2400 [00:34<00:34, 35.11it/s]Creating dataset samples:  50%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                            | 1196/2400 [00:34<00:34, 35.28it/s]Creating dataset samples:  50%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                           | 1200/2400 [00:34<00:34, 35.07it/s]Creating dataset samples:  50%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                           | 1204/2400 [00:34<00:34, 34.65it/s]Creating dataset samples:  50%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                          | 1208/2400 [00:34<00:34, 34.09it/s]Creating dataset samples:  50%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                          | 1212/2400 [00:34<00:35, 33.58it/s]Creating dataset samples:  51%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                         | 1216/2400 [00:35<00:35, 33.50it/s]Creating dataset samples:  51%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                         | 1220/2400 [00:35<00:35, 33.55it/s]Creating dataset samples:  51%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                         | 1224/2400 [00:35<00:34, 34.12it/s]Creating dataset samples:  51%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                        | 1228/2400 [00:35<00:33, 34.54it/s]Creating dataset samples:  51%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                        | 1232/2400 [00:35<00:33, 34.80it/s]Creating dataset samples:  52%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                       | 1236/2400 [00:35<00:33, 34.92it/s]Creating dataset samples:  52%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                       | 1240/2400 [00:35<00:33, 35.12it/s]Creating dataset samples:  52%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                       | 1244/2400 [00:35<00:32, 35.25it/s]Creating dataset samples:  52%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                      | 1248/2400 [00:35<00:32, 35.32it/s]Creating dataset samples:  52%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                      | 1252/2400 [00:36<00:32, 35.37it/s]Creating dataset samples:  52%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                     | 1256/2400 [00:36<00:32, 35.45it/s]Creating dataset samples:  52%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                     | 1260/2400 [00:36<00:32, 35.50it/s]Creating dataset samples:  53%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                     | 1264/2400 [00:36<00:32, 35.31it/s]Creating dataset samples:  53%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                    | 1268/2400 [00:36<00:31, 35.43it/s]Creating dataset samples:  53%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                    | 1272/2400 [00:36<00:31, 35.44it/s]Creating dataset samples:  53%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                   | 1276/2400 [00:36<00:31, 35.37it/s]Creating dataset samples:  53%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                   | 1280/2400 [00:36<00:31, 35.40it/s]Creating dataset samples:  54%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                  | 1284/2400 [00:36<00:31, 35.52it/s]Creating dataset samples:  54%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                  | 1288/2400 [00:37<00:31, 35.59it/s]Creating dataset samples:  54%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                  | 1292/2400 [00:37<00:31, 35.73it/s]Creating dataset samples:  54%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                                 | 1296/2400 [00:37<00:30, 35.77it/s]Creating dataset samples:  54%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                 | 1300/2400 [00:37<00:30, 35.71it/s]Creating dataset samples:  54%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                | 1304/2400 [00:37<00:30, 35.72it/s]Creating dataset samples:  55%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                | 1308/2400 [00:37<00:30, 35.55it/s]Creating dataset samples:  55%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                | 1312/2400 [00:37<00:30, 35.55it/s]Creating dataset samples:  55%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                               | 1316/2400 [00:37<00:30, 35.45it/s]Creating dataset samples:  55%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                               | 1320/2400 [00:37<00:30, 34.84it/s]Creating dataset samples:  55%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                              | 1324/2400 [00:38<00:31, 34.24it/s]Creating dataset samples:  55%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                              | 1328/2400 [00:38<00:31, 33.65it/s]Creating dataset samples:  56%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                              | 1332/2400 [00:38<00:31, 33.60it/s]Creating dataset samples:  56%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                             | 1336/2400 [00:38<00:31, 33.64it/s]Creating dataset samples:  56%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                             | 1340/2400 [00:38<00:31, 34.19it/s]Creating dataset samples:  56%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                            | 1344/2400 [00:38<00:30, 34.55it/s]Creating dataset samples:  56%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                            | 1348/2400 [00:38<00:30, 34.77it/s]Creating dataset samples:  56%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                           | 1352/2400 [00:38<00:29, 35.06it/s]Creating dataset samples:  56%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                           | 1356/2400 [00:38<00:29, 35.12it/s]Creating dataset samples:  57%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                           | 1360/2400 [00:39<00:29, 34.74it/s]Creating dataset samples:  57%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                          | 1364/2400 [00:39<00:29, 34.54it/s]Creating dataset samples:  57%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                          | 1368/2400 [00:39<00:29, 34.85it/s]Creating dataset samples:  57%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                         | 1372/2400 [00:39<00:29, 35.06it/s]Creating dataset samples:  57%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                         | 1376/2400 [00:39<00:29, 35.28it/s]Creating dataset samples:  57%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                         | 1380/2400 [00:39<00:28, 35.26it/s]Creating dataset samples:  58%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                        | 1384/2400 [00:39<00:28, 35.26it/s]Creating dataset samples:  58%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                        | 1388/2400 [00:39<00:28, 35.47it/s]Creating dataset samples:  58%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                       | 1392/2400 [00:40<00:28, 35.33it/s]Creating dataset samples:  58%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                       | 1396/2400 [00:40<00:28, 35.29it/s]Creating dataset samples:  58%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                       | 1400/2400 [00:40<00:28, 35.29it/s]Creating dataset samples:  58%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                      | 1404/2400 [00:40<00:28, 35.38it/s]Creating dataset samples:  59%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                      | 1408/2400 [00:40<00:27, 35.44it/s]Creating dataset samples:  59%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                     | 1412/2400 [00:40<00:27, 35.63it/s]Creating dataset samples:  59%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                     | 1416/2400 [00:40<00:27, 35.55it/s]Creating dataset samples:  59%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                    | 1420/2400 [00:40<00:27, 35.58it/s]Creating dataset samples:  59%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                    | 1424/2400 [00:40<00:27, 35.56it/s]Creating dataset samples:  60%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                    | 1428/2400 [00:41<00:27, 35.24it/s]Creating dataset samples:  60%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                   | 1432/2400 [00:41<00:27, 35.16it/s]Creating dataset samples:  60%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                   | 1436/2400 [00:41<00:27, 34.47it/s]Creating dataset samples:  60%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                  | 1440/2400 [00:41<00:28, 34.17it/s]Creating dataset samples:  60%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                  | 1444/2400 [00:41<00:28, 33.61it/s]Creating dataset samples:  60%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                  | 1448/2400 [00:41<00:28, 33.54it/s]Creating dataset samples:  60%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                 | 1452/2400 [00:41<00:28, 33.58it/s]Creating dataset samples:  61%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                 | 1456/2400 [00:41<00:27, 33.89it/s]Creating dataset samples:  61%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                | 1460/2400 [00:41<00:27, 34.18it/s]Creating dataset samples:  61%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                | 1464/2400 [00:42<00:27, 34.59it/s]Creating dataset samples:  61%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                | 1468/2400 [00:42<00:26, 34.93it/s]Creating dataset samples:  61%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                               | 1472/2400 [00:42<00:26, 35.11it/s]Creating dataset samples:  62%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                               | 1476/2400 [00:42<00:26, 35.09it/s]Creating dataset samples:  62%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                              | 1480/2400 [00:42<00:26, 35.29it/s]Creating dataset samples:  62%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                              | 1484/2400 [00:42<00:25, 35.33it/s]Creating dataset samples:  62%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                             | 1488/2400 [00:42<00:25, 35.48it/s]Creating dataset samples:  62%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                             | 1492/2400 [00:42<00:25, 35.55it/s]Creating dataset samples:  62%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                             | 1496/2400 [00:42<00:25, 35.35it/s]Creating dataset samples:  62%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                            | 1500/2400 [00:43<00:25, 35.48it/s]Creating dataset samples:  63%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                            | 1504/2400 [00:43<00:25, 35.44it/s]Creating dataset samples:  63%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                           | 1508/2400 [00:43<00:25, 35.39it/s]Creating dataset samples:  63%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                           | 1512/2400 [00:43<00:25, 35.18it/s]Creating dataset samples:  63%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                           | 1516/2400 [00:43<00:25, 35.28it/s]Creating dataset samples:  63%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                          | 1520/2400 [00:43<00:24, 35.33it/s]Creating dataset samples:  64%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                          | 1524/2400 [00:43<00:24, 35.50it/s]Creating dataset samples:  64%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                         | 1528/2400 [00:43<00:24, 35.58it/s]Creating dataset samples:  64%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                         | 1532/2400 [00:44<00:24, 35.68it/s]Creating dataset samples:  64%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                         | 1536/2400 [00:44<00:24, 35.67it/s]Creating dataset samples:  64%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                        | 1540/2400 [00:44<00:24, 34.98it/s]Creating dataset samples:  64%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                        | 1544/2400 [00:44<00:24, 34.75it/s]Creating dataset samples:  64%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                       | 1548/2400 [00:44<00:24, 34.78it/s]Creating dataset samples:  65%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                       | 1552/2400 [00:44<00:24, 34.28it/s]Creating dataset samples:  65%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                      | 1556/2400 [00:44<00:24, 33.95it/s]Creating dataset samples:  65%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                      | 1560/2400 [00:44<00:25, 33.56it/s]Creating dataset samples:  65%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                      | 1564/2400 [00:44<00:24, 33.61it/s]Creating dataset samples:  65%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                     | 1568/2400 [00:45<00:24, 33.83it/s]Creating dataset samples:  66%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                     | 1572/2400 [00:45<00:24, 34.27it/s]Creating dataset samples:  66%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                    | 1576/2400 [00:45<00:23, 34.68it/s]Creating dataset samples:  66%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                    | 1580/2400 [00:45<00:23, 34.90it/s]Creating dataset samples:  66%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                    | 1584/2400 [00:45<00:23, 35.11it/s]Creating dataset samples:  66%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                   | 1588/2400 [00:45<00:23, 35.23it/s]Creating dataset samples:  66%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                   | 1592/2400 [00:45<00:22, 35.24it/s]Creating dataset samples:  66%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                  | 1596/2400 [00:45<00:22, 35.31it/s]Creating dataset samples:  67%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                  | 1600/2400 [00:45<00:22, 35.30it/s]Creating dataset samples:  67%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                  | 1604/2400 [00:46<00:22, 35.49it/s]Creating dataset samples:  67%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                 | 1608/2400 [00:46<00:22, 35.39it/s]Creating dataset samples:  67%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                 | 1612/2400 [00:46<00:22, 35.36it/s]Creating dataset samples:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                | 1616/2400 [00:46<00:22, 35.49it/s]Creating dataset samples:  68%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                | 1620/2400 [00:46<00:21, 35.50it/s]Creating dataset samples:  68%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                               | 1624/2400 [00:46<00:21, 35.48it/s]Creating dataset samples:  68%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                               | 1628/2400 [00:46<00:21, 35.50it/s]Creating dataset samples:  68%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                               | 1632/2400 [00:46<00:21, 35.62it/s]Creating dataset samples:  68%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                              | 1636/2400 [00:46<00:21, 35.64it/s]Creating dataset samples:  68%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                              | 1640/2400 [00:47<00:21, 35.61it/s]Creating dataset samples:  68%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                             | 1644/2400 [00:47<00:21, 35.57it/s]Creating dataset samples:  69%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                             | 1648/2400 [00:47<00:21, 35.62it/s]Creating dataset samples:  69%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                             | 1652/2400 [00:47<00:21, 35.46it/s]Creating dataset samples:  69%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                            | 1656/2400 [00:47<00:20, 35.51it/s]Creating dataset samples:  69%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                            | 1660/2400 [00:47<00:20, 35.37it/s]Creating dataset samples:  69%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                           | 1664/2400 [00:47<00:20, 35.25it/s]Creating dataset samples:  70%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                           | 1668/2400 [00:47<00:21, 34.46it/s]Creating dataset samples:  70%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                           | 1672/2400 [00:48<00:21, 33.66it/s]Creating dataset samples:  70%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                          | 1676/2400 [00:48<00:22, 32.18it/s]Creating dataset samples:  70%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                          | 1680/2400 [00:48<00:22, 32.57it/s]Creating dataset samples:  70%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                         | 1684/2400 [00:48<00:21, 32.80it/s]Creating dataset samples:  70%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 1688/2400 [00:48<00:21, 33.50it/s]Creating dataset samples:  70%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                        | 1692/2400 [00:48<00:20, 34.07it/s]Creating dataset samples:  71%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                        | 1696/2400 [00:48<00:20, 34.44it/s]Creating dataset samples:  71%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                        | 1700/2400 [00:48<00:20, 34.70it/s]Creating dataset samples:  71%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                       | 1704/2400 [00:48<00:19, 34.83it/s]Creating dataset samples:  71%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                       | 1708/2400 [00:49<00:19, 34.88it/s]Creating dataset samples:  71%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                      | 1712/2400 [00:49<00:19, 34.98it/s]Creating dataset samples:  72%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                      | 1716/2400 [00:49<00:19, 34.47it/s]Creating dataset samples:  72%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                      | 1720/2400 [00:49<00:19, 34.16it/s]Creating dataset samples:  72%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                     | 1724/2400 [00:49<00:19, 34.50it/s]Creating dataset samples:  72%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                     | 1728/2400 [00:49<00:19, 34.72it/s]Creating dataset samples:  72%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                    | 1732/2400 [00:49<00:19, 34.83it/s]Creating dataset samples:  72%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                    | 1736/2400 [00:49<00:19, 34.80it/s]Creating dataset samples:  72%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                    | 1740/2400 [00:50<00:18, 35.05it/s]Creating dataset samples:  73%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                   | 1744/2400 [00:50<00:18, 35.22it/s]Creating dataset samples:  73%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                   | 1748/2400 [00:50<00:18, 35.24it/s]Creating dataset samples:  73%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                  | 1752/2400 [00:50<00:18, 35.26it/s]Creating dataset samples:  73%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                  | 1756/2400 [00:50<00:18, 35.32it/s]Creating dataset samples:  73%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                 | 1760/2400 [00:50<00:18, 35.44it/s]Creating dataset samples:  74%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                 | 1764/2400 [00:50<00:17, 35.39it/s]Creating dataset samples:  74%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                 | 1768/2400 [00:50<00:17, 35.36it/s]Creating dataset samples:  74%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                | 1772/2400 [00:50<00:17, 35.14it/s]Creating dataset samples:  74%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                | 1776/2400 [00:51<00:17, 35.10it/s]Creating dataset samples:  74%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                               | 1780/2400 [00:51<00:17, 34.89it/s]Creating dataset samples:  74%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                               | 1784/2400 [00:51<00:17, 34.30it/s]Creating dataset samples:  74%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                               | 1788/2400 [00:51<00:18, 33.88it/s]Creating dataset samples:  75%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                              | 1792/2400 [00:51<00:18, 33.55it/s]Creating dataset samples:  75%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                              | 1796/2400 [00:51<00:18, 33.42it/s]Creating dataset samples:  75%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                             | 1800/2400 [00:51<00:17, 33.54it/s]Creating dataset samples:  75%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                             | 1804/2400 [00:51<00:17, 34.03it/s]Creating dataset samples:  75%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                             | 1808/2400 [00:51<00:17, 34.23it/s]Creating dataset samples:  76%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                            | 1812/2400 [00:52<00:16, 34.62it/s]Creating dataset samples:  76%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                            | 1816/2400 [00:52<00:16, 34.92it/s]Creating dataset samples:  76%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                           | 1820/2400 [00:52<00:16, 35.00it/s]Creating dataset samples:  76%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                           | 1824/2400 [00:52<00:16, 35.05it/s]Creating dataset samples:  76%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                          | 1828/2400 [00:52<00:16, 35.23it/s]Creating dataset samples:  76%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                          | 1832/2400 [00:52<00:16, 35.25it/s]Creating dataset samples:  76%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                          | 1836/2400 [00:52<00:15, 35.34it/s]Creating dataset samples:  77%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                         | 1840/2400 [00:52<00:15, 35.38it/s]Creating dataset samples:  77%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                         | 1844/2400 [00:52<00:15, 35.42it/s]Creating dataset samples:  77%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                        | 1848/2400 [00:53<00:15, 35.45it/s]Creating dataset samples:  77%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                        | 1852/2400 [00:53<00:15, 35.47it/s]Creating dataset samples:  77%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                        | 1856/2400 [00:53<00:15, 35.45it/s]Creating dataset samples:  78%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                       | 1860/2400 [00:53<00:15, 35.28it/s]Creating dataset samples:  78%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                       | 1864/2400 [00:53<00:15, 35.16it/s]Creating dataset samples:  78%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                      | 1868/2400 [00:53<00:15, 35.08it/s]Creating dataset samples:  78%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                      | 1872/2400 [00:53<00:14, 35.22it/s]Creating dataset samples:  78%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                      | 1876/2400 [00:53<00:14, 35.30it/s]Creating dataset samples:  78%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                     | 1880/2400 [00:54<00:14, 35.43it/s]Creating dataset samples:  78%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                     | 1884/2400 [00:54<00:14, 35.44it/s]Creating dataset samples:  79%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                    | 1888/2400 [00:54<00:14, 35.41it/s]Creating dataset samples:  79%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                    | 1892/2400 [00:54<00:14, 35.43it/s]Creating dataset samples:  79%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                   | 1896/2400 [00:54<00:14, 34.63it/s]Creating dataset samples:  79%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                   | 1900/2400 [00:54<00:14, 34.07it/s]Creating dataset samples:  79%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                   | 1904/2400 [00:54<00:14, 33.52it/s]Creating dataset samples:  80%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                  | 1908/2400 [00:54<00:14, 33.39it/s]Creating dataset samples:  80%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                  | 1912/2400 [00:54<00:14, 33.57it/s]Creating dataset samples:  80%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                 | 1916/2400 [00:55<00:14, 33.52it/s]Creating dataset samples:  80%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                 | 1920/2400 [00:55<00:14, 34.05it/s]Creating dataset samples:  80%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                 | 1924/2400 [00:55<00:13, 34.34it/s]Creating dataset samples:  80%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                | 1928/2400 [00:55<00:13, 34.69it/s]Creating dataset samples:  80%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                | 1932/2400 [00:55<00:13, 35.01it/s]Creating dataset samples:  81%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                               | 1936/2400 [00:55<00:13, 35.21it/s]Creating dataset samples:  81%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                               | 1940/2400 [00:55<00:13, 35.22it/s]Creating dataset samples:  81%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                               | 1944/2400 [00:55<00:12, 35.20it/s]Creating dataset samples:  81%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                              | 1948/2400 [00:55<00:12, 35.20it/s]Creating dataset samples:  81%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                              | 1952/2400 [00:56<00:12, 35.38it/s]Creating dataset samples:  82%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                             | 1956/2400 [00:56<00:12, 35.40it/s]Creating dataset samples:  82%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                             | 1960/2400 [00:56<00:12, 35.30it/s]Creating dataset samples:  82%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                            | 1964/2400 [00:56<00:12, 35.14it/s]Creating dataset samples:  82%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                            | 1968/2400 [00:56<00:12, 35.01it/s]Creating dataset samples:  82%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                            | 1972/2400 [00:56<00:12, 35.06it/s]Creating dataset samples:  82%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                           | 1976/2400 [00:56<00:12, 35.06it/s]Creating dataset samples:  82%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                           | 1980/2400 [00:56<00:11, 35.27it/s]Creating dataset samples:  83%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                          | 1984/2400 [00:56<00:11, 35.25it/s]Creating dataset samples:  83%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                          | 1988/2400 [00:57<00:11, 35.36it/s]Creating dataset samples:  83%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                          | 1992/2400 [00:57<00:11, 35.29it/s]Creating dataset samples:  83%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                         | 1996/2400 [00:57<00:11, 35.27it/s]Creating dataset samples:  83%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                         | 2000/2400 [00:57<00:11, 35.33it/s]Creating dataset samples:  84%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                        | 2004/2400 [00:57<00:11, 35.37it/s]Creating dataset samples:  84%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                        | 2008/2400 [00:57<00:11, 35.44it/s]Creating dataset samples:  84%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                        | 2012/2400 [00:57<00:11, 34.83it/s]Creating dataset samples:  84%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                       | 2016/2400 [00:57<00:11, 34.22it/s]Creating dataset samples:  84%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                       | 2020/2400 [00:58<00:11, 33.67it/s]Creating dataset samples:  84%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                      | 2024/2400 [00:58<00:11, 33.37it/s]Creating dataset samples:  84%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                      | 2028/2400 [00:58<00:11, 33.58it/s]Creating dataset samples:  85%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                     | 2032/2400 [00:58<00:10, 33.69it/s]Creating dataset samples:  85%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                     | 2036/2400 [00:58<00:10, 34.35it/s]Creating dataset samples:  85%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                     | 2040/2400 [00:58<00:10, 34.66it/s]Creating dataset samples:  85%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                    | 2044/2400 [00:58<00:10, 34.97it/s]Creating dataset samples:  85%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                    | 2048/2400 [00:58<00:10, 35.04it/s]Creating dataset samples:  86%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                   | 2052/2400 [00:58<00:09, 35.23it/s]Creating dataset samples:  86%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                   | 2056/2400 [00:59<00:09, 35.37it/s]Creating dataset samples:  86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                   | 2060/2400 [00:59<00:09, 35.35it/s]Creating dataset samples:  86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                  | 2064/2400 [00:59<00:09, 35.38it/s]Creating dataset samples:  86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                  | 2068/2400 [00:59<00:09, 35.37it/s]Creating dataset samples:  86%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                 | 2072/2400 [00:59<00:09, 34.78it/s]Creating dataset samples:  86%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                 | 2076/2400 [00:59<00:09, 34.58it/s]Creating dataset samples:  87%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                 | 2080/2400 [00:59<00:09, 34.93it/s]Creating dataset samples:  87%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                | 2084/2400 [00:59<00:08, 35.21it/s]Creating dataset samples:  87%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                | 2088/2400 [00:59<00:08, 35.12it/s]Creating dataset samples:  87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                               | 2092/2400 [01:00<00:08, 35.21it/s]Creating dataset samples:  87%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                               | 2096/2400 [01:00<00:08, 35.33it/s]Creating dataset samples:  88%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                              | 2100/2400 [01:00<00:08, 35.36it/s]Creating dataset samples:  88%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                              | 2104/2400 [01:00<00:08, 35.44it/s]Creating dataset samples:  88%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                              | 2108/2400 [01:00<00:08, 35.62it/s]Creating dataset samples:  88%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                             | 2112/2400 [01:00<00:08, 35.45it/s]Creating dataset samples:  88%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                             | 2116/2400 [01:00<00:07, 35.66it/s]Creating dataset samples:  88%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                            | 2120/2400 [01:00<00:07, 35.74it/s]Creating dataset samples:  88%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                            | 2124/2400 [01:00<00:07, 35.62it/s]Creating dataset samples:  89%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                            | 2128/2400 [01:01<00:07, 35.07it/s]Creating dataset samples:  89%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                           | 2132/2400 [01:01<00:07, 34.34it/s]Creating dataset samples:  89%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                           | 2136/2400 [01:01<00:07, 33.85it/s]Creating dataset samples:  89%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                          | 2140/2400 [01:01<00:07, 33.66it/s]Creating dataset samples:  89%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                          | 2144/2400 [01:01<00:07, 33.70it/s]Creating dataset samples:  90%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                          | 2148/2400 [01:01<00:07, 33.86it/s]Creating dataset samples:  90%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                         | 2152/2400 [01:01<00:07, 34.34it/s]Creating dataset samples:  90%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                         | 2156/2400 [01:01<00:07, 34.61it/s]Creating dataset samples:  90%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                        | 2160/2400 [01:02<00:06, 34.72it/s]Creating dataset samples:  90%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                        | 2164/2400 [01:02<00:06, 34.94it/s]Creating dataset samples:  90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                        | 2168/2400 [01:02<00:06, 35.11it/s]Creating dataset samples:  90%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                       | 2172/2400 [01:02<00:06, 35.23it/s]Creating dataset samples:  91%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                       | 2176/2400 [01:02<00:06, 35.12it/s]Creating dataset samples:  91%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                      | 2180/2400 [01:02<00:06, 35.18it/s]Creating dataset samples:  91%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                      | 2184/2400 [01:02<00:06, 35.24it/s]Creating dataset samples:  91%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                     | 2188/2400 [01:02<00:06, 35.29it/s]Creating dataset samples:  91%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                     | 2192/2400 [01:02<00:05, 35.20it/s]Creating dataset samples:  92%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                     | 2196/2400 [01:03<00:05, 35.37it/s]Creating dataset samples:  92%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                    | 2200/2400 [01:03<00:05, 35.46it/s]Creating dataset samples:  92%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                    | 2204/2400 [01:03<00:05, 35.52it/s]Creating dataset samples:  92%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                   | 2208/2400 [01:03<00:05, 35.57it/s]Creating dataset samples:  92%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                   | 2212/2400 [01:03<00:05, 35.39it/s]Creating dataset samples:  92%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                   | 2216/2400 [01:03<00:05, 35.20it/s]Creating dataset samples:  92%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                  | 2220/2400 [01:03<00:05, 35.06it/s]Creating dataset samples:  93%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                  | 2224/2400 [01:03<00:04, 35.24it/s]Creating dataset samples:  93%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                 | 2228/2400 [01:03<00:04, 35.15it/s]Creating dataset samples:  93%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                 | 2232/2400 [01:04<00:04, 35.28it/s]Creating dataset samples:  93%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                 | 2236/2400 [01:04<00:04, 35.41it/s]Creating dataset samples:  93%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                | 2240/2400 [01:04<00:04, 35.46it/s]Creating dataset samples:  94%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                | 2244/2400 [01:04<00:04, 34.84it/s]Creating dataset samples:  94%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎               | 2248/2400 [01:04<00:04, 34.09it/s]Creating dataset samples:  94%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊               | 2252/2400 [01:04<00:04, 33.16it/s]Creating dataset samples:  94%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏              | 2256/2400 [01:04<00:04, 33.13it/s]Creating dataset samples:  94%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌              | 2260/2400 [01:04<00:04, 33.41it/s]Creating dataset samples:  94%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████              | 2264/2400 [01:05<00:04, 33.64it/s]Creating dataset samples:  94%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍             | 2268/2400 [01:05<00:03, 34.25it/s]Creating dataset samples:  95%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊             | 2272/2400 [01:05<00:03, 34.70it/s]Creating dataset samples:  95%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏            | 2276/2400 [01:05<00:03, 35.07it/s]Creating dataset samples:  95%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋            | 2280/2400 [01:05<00:03, 35.24it/s]Creating dataset samples:  95%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████            | 2284/2400 [01:05<00:03, 35.37it/s]Creating dataset samples:  95%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍           | 2288/2400 [01:05<00:03, 35.19it/s]Creating dataset samples:  96%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉           | 2292/2400 [01:05<00:03, 35.12it/s]Creating dataset samples:  96%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎          | 2296/2400 [01:05<00:02, 35.25it/s]Creating dataset samples:  96%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋          | 2300/2400 [01:06<00:02, 35.23it/s]Creating dataset samples:  96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████          | 2304/2400 [01:06<00:02, 35.20it/s]Creating dataset samples:  96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌         | 2308/2400 [01:06<00:02, 35.11it/s]Creating dataset samples:  96%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉         | 2312/2400 [01:06<00:02, 35.21it/s]Creating dataset samples:  96%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎        | 2316/2400 [01:06<00:02, 35.21it/s]Creating dataset samples:  97%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊        | 2320/2400 [01:06<00:02, 35.17it/s]Creating dataset samples:  97%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏       | 2324/2400 [01:06<00:02, 35.19it/s]Creating dataset samples:  97%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌       | 2328/2400 [01:06<00:02, 35.37it/s]Creating dataset samples:  97%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████       | 2332/2400 [01:06<00:01, 35.50it/s]Creating dataset samples:  97%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍      | 2336/2400 [01:07<00:01, 35.58it/s]Creating dataset samples:  98%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊      | 2340/2400 [01:07<00:01, 35.03it/s]Creating dataset samples:  98%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏     | 2344/2400 [01:07<00:01, 35.11it/s]Creating dataset samples:  98%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋     | 2348/2400 [01:07<00:01, 35.22it/s]Creating dataset samples:  98%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████     | 2352/2400 [01:07<00:01, 35.34it/s]Creating dataset samples:  98%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍    | 2356/2400 [01:07<00:01, 35.40it/s]Creating dataset samples:  98%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉    | 2360/2400 [01:07<00:01, 34.75it/s]Creating dataset samples:  98%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎   | 2364/2400 [01:07<00:01, 34.28it/s]Creating dataset samples:  99%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋   | 2368/2400 [01:08<00:00, 33.79it/s]Creating dataset samples:  99%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████   | 2372/2400 [01:08<00:00, 33.49it/s]Creating dataset samples:  99%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌  | 2376/2400 [01:08<00:00, 33.54it/s]Creating dataset samples:  99%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉  | 2380/2400 [01:08<00:00, 33.86it/s]Creating dataset samples:  99%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎ | 2384/2400 [01:08<00:00, 34.38it/s]Creating dataset samples: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊ | 2388/2400 [01:08<00:00, 34.77it/s]Creating dataset samples: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏| 2392/2400 [01:08<00:00, 34.77it/s]Creating dataset samples: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌| 2396/2400 [01:08<00:00, 34.68it/s]Creating dataset samples: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2400/2400 [01:08<00:00, 34.94it/s]Creating dataset samples: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2400/2400 [01:08<00:00, 34.82it/s]
Training dataset creation completed.
Starting DataLoader initialization...
DataLoader initialization completed.
Shape of a batch: torch.Size([5, 500, 4])
Starting model initialization...
Model initialization completed.
Starting training loop...
  0%|                                                                                                                                                                                                                                                                                             | 0/480 [00:00<?, ?it/s]Processing batch 0...
Number of elements in embeddings list: 3
Shape of tensors in embeddings list: torch.Size([5, 500, 128])
Shape of weights tensor: torch.Size([10, 2])
Shape of weight embeddings tensor: torch.Size([10, 3])
Before einsum, coef_rep.shape: torch.Size([5, 10, 3]), temp.shape: torch.Size([5, 500, 128, 3])
The shape of input: torch.Size([5, 500, 4])
The shape of mixed embeddings:torch.Size([50, 500, 128])
 The shape of weight vector: torch.Size([10, 2])
Starting _inner function
Number of weight vectors: 10
Input representation shape: torch.Size([50, 500, 4])
Initializing StateBlockSelection
Batch size: 50
Start decoding
Decoding step 0
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([236, 174, 156, 443, 104,  40,  46, 489, 100, 104,  68, 496, 173, 381,
        294, 286, 182, 287, 494, 316, 346,   4, 380, 389, 123, 115, 283, 147,
        210, 360, 346, 356, 176, 488, 327, 347, 264, 478, 233,  58, 459, 314,
         52, 244, 460, 341, 159, 130, 146,  66])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[236]],

        [[174]],

        [[156]],

        [[443]],

        [[104]],

        [[ 40]],

        [[ 46]],

        [[489]],

        [[100]],

        [[104]],

        [[ 68]],

        [[496]],

        [[173]],

        [[381]],

        [[294]],

        [[286]],

        [[182]],

        [[287]],

        [[494]],

        [[316]],

        [[346]],

        [[  4]],

        [[380]],

        [[389]],

        [[123]],

        [[115]],

        [[283]],

        [[147]],

        [[210]],

        [[360]],

        [[346]],

        [[356]],

        [[176]],

        [[488]],

        [[327]],

        [[347]],

        [[264]],

        [[478]],

        [[233]],

        [[ 58]],

        [[459]],

        [[314]],

        [[ 52]],

        [[244]],

        [[460]],

        [[341]],

        [[159]],

        [[130]],

        [[146]],

        [[ 66]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[0.8130],
        [1.4426],
        [1.1634],
        [0.7920],
        [0.8374],
        [1.1393],
        [1.3502],
        [0.8884],
        [0.8418],
        [0.8374],
        [0.7482],
        [1.4869],
        [0.9108],
        [0.9903],
        [0.9944],
        [1.2097],
        [1.0906],
        [0.9275],
        [0.6571],
        [0.9250],
        [0.8733],
        [0.2472],
        [0.7294],
        [0.8656],
        [0.9647],
        [0.7899],
        [0.9082],
        [0.5574],
        [1.1877],
        [0.7272],
        [0.9476],
        [0.8613],
        [0.7937],
        [1.3842],
        [0.8218],
        [1.3089],
        [1.1250],
        [0.9311],
        [0.7972],
        [0.8314],
        [0.8567],
        [0.6177],
        [0.5809],
        [0.8477],
        [1.0456],
        [1.5420],
        [1.0135],
        [1.1298],
        [0.8932],
        [0.9753]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[0.8130],
        [1.4426],
        [1.1634],
        [0.7920],
        [0.8374],
        [1.1393],
        [1.3502],
        [0.8884],
        [0.8418],
        [0.8374],
        [0.7482],
        [1.4869],
        [0.9108],
        [0.9903],
        [0.9944],
        [1.2097],
        [1.0906],
        [0.9275],
        [0.6571],
        [0.9250],
        [0.8733],
        [0.2472],
        [0.7294],
        [0.8656],
        [0.9647],
        [0.7899],
        [0.9082],
        [0.5574],
        [1.1877],
        [0.7272],
        [0.9476],
        [0.8613],
        [0.7937],
        [1.3842],
        [0.8218],
        [1.3089],
        [1.1250],
        [0.9311],
        [0.7972],
        [0.8314],
        [0.8567],
        [0.6177],
        [0.5809],
        [0.8477],
        [1.0456],
        [1.5420],
        [1.0135],
        [1.1298],
        [0.8932],
        [0.9753]])
Selected blocks appended
Decoding step 1
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 94,  63, 423, 457, 262, 115, 383,  64, 316,  30,   9, 297, 237,  85,
        109, 463, 391, 395, 472, 100, 315,  30, 433, 281, 199, 393, 267, 175,
        161, 101, 222, 467, 382, 324, 345, 477, 214, 434, 223, 110,  11, 128,
        161, 105, 192, 321, 443, 230,  34, 296])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 94]],

        [[ 63]],

        [[423]],

        [[457]],

        [[262]],

        [[115]],

        [[383]],

        [[ 64]],

        [[316]],

        [[ 30]],

        [[  9]],

        [[297]],

        [[237]],

        [[ 85]],

        [[109]],

        [[463]],

        [[391]],

        [[395]],

        [[472]],

        [[100]],

        [[315]],

        [[ 30]],

        [[433]],

        [[281]],

        [[199]],

        [[393]],

        [[267]],

        [[175]],

        [[161]],

        [[101]],

        [[222]],

        [[467]],

        [[382]],

        [[324]],

        [[345]],

        [[477]],

        [[214]],

        [[434]],

        [[223]],

        [[110]],

        [[ 11]],

        [[128]],

        [[161]],

        [[105]],

        [[192]],

        [[321]],

        [[443]],

        [[230]],

        [[ 34]],

        [[296]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[1.7986],
        [2.3078],
        [1.9056],
        [1.6741],
        [2.0412],
        [1.7011],
        [2.7018],
        [1.5382],
        [1.9158],
        [1.8183],
        [1.2660],
        [2.4370],
        [2.1920],
        [2.2979],
        [1.7375],
        [1.9352],
        [2.0691],
        [1.6956],
        [1.3088],
        [1.8121],
        [1.3201],
        [0.8971],
        [1.9139],
        [1.6013],
        [2.3032],
        [2.3539],
        [1.8738],
        [1.1370],
        [2.5668],
        [1.9586],
        [1.6683],
        [1.7341],
        [1.8109],
        [2.3382],
        [1.8627],
        [2.2119],
        [2.1392],
        [2.2347],
        [1.3936],
        [1.6358],
        [1.5895],
        [1.6008],
        [1.7765],
        [1.9342],
        [2.3089],
        [2.7105],
        [1.9454],
        [2.3180],
        [1.8495],
        [1.4613]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[1.7986],
        [2.3078],
        [1.9056],
        [1.6741],
        [2.0412],
        [1.7011],
        [2.7018],
        [1.5382],
        [1.9158],
        [1.8183],
        [1.2660],
        [2.4370],
        [2.1920],
        [2.2979],
        [1.7375],
        [1.9352],
        [2.0691],
        [1.6956],
        [1.3088],
        [1.8121],
        [1.3201],
        [0.8971],
        [1.9139],
        [1.6013],
        [2.3032],
        [2.3539],
        [1.8738],
        [1.1370],
        [2.5668],
        [1.9586],
        [1.6683],
        [1.7341],
        [1.8109],
        [2.3382],
        [1.8627],
        [2.2119],
        [2.1392],
        [2.2347],
        [1.3936],
        [1.6358],
        [1.5895],
        [1.6008],
        [1.7765],
        [1.9342],
        [2.3089],
        [2.7105],
        [1.9454],
        [2.3180],
        [1.8495],
        [1.4613]])
Selected blocks appended
Decoding step 2
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([193, 310, 256, 106, 216,  10, 284, 153, 299, 102, 437, 226, 440, 448,
        242, 382,  73, 329, 343,  92, 197, 198, 496,  10, 121, 148, 366, 408,
        290, 439, 310, 183, 350, 362, 130, 338,  51, 376, 394, 485,  55, 207,
        135, 443, 281, 249, 105, 435, 483,  79])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[193]],

        [[310]],

        [[256]],

        [[106]],

        [[216]],

        [[ 10]],

        [[284]],

        [[153]],

        [[299]],

        [[102]],

        [[437]],

        [[226]],

        [[440]],

        [[448]],

        [[242]],

        [[382]],

        [[ 73]],

        [[329]],

        [[343]],

        [[ 92]],

        [[197]],

        [[198]],

        [[496]],

        [[ 10]],

        [[121]],

        [[148]],

        [[366]],

        [[408]],

        [[290]],

        [[439]],

        [[310]],

        [[183]],

        [[350]],

        [[362]],

        [[130]],

        [[338]],

        [[ 51]],

        [[376]],

        [[394]],

        [[485]],

        [[ 55]],

        [[207]],

        [[135]],

        [[443]],

        [[281]],

        [[249]],

        [[105]],

        [[435]],

        [[483]],

        [[ 79]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[2.5801],
        [3.2135],
        [2.8915],
        [2.8343],
        [3.3511],
        [2.2126],
        [3.9354],
        [2.4426],
        [2.7004],
        [2.5410],
        [1.8496],
        [3.8028],
        [3.2931],
        [2.8965],
        [2.7130],
        [2.6458],
        [2.9686],
        [2.8353],
        [2.1585],
        [2.4961],
        [2.3991],
        [2.2041],
        [2.6264],
        [2.5706],
        [2.9663],
        [3.1391],
        [3.0663],
        [2.1560],
        [3.4369],
        [2.8762],
        [2.6674],
        [2.3101],
        [2.7660],
        [3.3051],
        [3.1960],
        [3.3472],
        [3.3193],
        [3.1898],
        [2.0854],
        [2.8052],
        [2.8401],
        [2.8666],
        [2.8703],
        [2.8661],
        [3.0825],
        [4.4089],
        [3.0320],
        [3.1867],
        [2.8077],
        [2.6976]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[2.5801],
        [3.2135],
        [2.8915],
        [2.8343],
        [3.3511],
        [2.2126],
        [3.9354],
        [2.4426],
        [2.7004],
        [2.5410],
        [1.8496],
        [3.8028],
        [3.2931],
        [2.8965],
        [2.7130],
        [2.6458],
        [2.9686],
        [2.8353],
        [2.1585],
        [2.4961],
        [2.3991],
        [2.2041],
        [2.6264],
        [2.5706],
        [2.9663],
        [3.1391],
        [3.0663],
        [2.1560],
        [3.4369],
        [2.8762],
        [2.6674],
        [2.3101],
        [2.7660],
        [3.3051],
        [3.1960],
        [3.3472],
        [3.3193],
        [3.1898],
        [2.0854],
        [2.8052],
        [2.8401],
        [2.8666],
        [2.8703],
        [2.8661],
        [3.0825],
        [4.4089],
        [3.0320],
        [3.1867],
        [2.8077],
        [2.6976]])
Selected blocks appended
Decoding step 3
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([300, 433, 494, 287, 221, 248, 348, 113, 379, 298, 166, 485, 398,  84,
         46, 408,  22, 154, 220, 491, 106,  93, 304, 165,  35, 340, 370, 420,
        404, 208, 139, 407, 369,  57, 371, 136, 261, 487, 150, 382, 140, 378,
        329, 286, 283, 274, 251, 332, 469, 225])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[300]],

        [[433]],

        [[494]],

        [[287]],

        [[221]],

        [[248]],

        [[348]],

        [[113]],

        [[379]],

        [[298]],

        [[166]],

        [[485]],

        [[398]],

        [[ 84]],

        [[ 46]],

        [[408]],

        [[ 22]],

        [[154]],

        [[220]],

        [[491]],

        [[106]],

        [[ 93]],

        [[304]],

        [[165]],

        [[ 35]],

        [[340]],

        [[370]],

        [[420]],

        [[404]],

        [[208]],

        [[139]],

        [[407]],

        [[369]],

        [[ 57]],

        [[371]],

        [[136]],

        [[261]],

        [[487]],

        [[150]],

        [[382]],

        [[140]],

        [[378]],

        [[329]],

        [[286]],

        [[283]],

        [[274]],

        [[251]],

        [[332]],

        [[469]],

        [[225]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[3.4300],
        [4.0858],
        [3.8272],
        [3.2645],
        [5.0216],
        [3.1560],
        [5.2780],
        [3.0558],
        [3.5137],
        [3.4760],
        [3.3528],
        [4.4867],
        [4.3685],
        [3.8805],
        [3.4105],
        [3.6452],
        [4.0741],
        [3.6154],
        [2.6493],
        [3.3194],
        [3.0303],
        [3.5237],
        [3.8722],
        [3.6161],
        [3.7080],
        [3.9142],
        [4.0051],
        [3.1441],
        [4.4362],
        [3.7863],
        [3.7590],
        [3.3777],
        [3.8503],
        [4.2886],
        [4.0793],
        [4.8804],
        [4.2423],
        [4.2097],
        [3.2694],
        [3.8225],
        [3.9083],
        [4.0243],
        [3.5670],
        [3.9723],
        [4.1388],
        [5.2542],
        [4.1400],
        [4.4075],
        [3.8172],
        [3.7636]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[3.4300],
        [4.0858],
        [3.8272],
        [3.2645],
        [5.0216],
        [3.1560],
        [5.2780],
        [3.0558],
        [3.5137],
        [3.4760],
        [3.3528],
        [4.4867],
        [4.3685],
        [3.8805],
        [3.4105],
        [3.6452],
        [4.0741],
        [3.6154],
        [2.6493],
        [3.3194],
        [3.0303],
        [3.5237],
        [3.8722],
        [3.6161],
        [3.7080],
        [3.9142],
        [4.0051],
        [3.1441],
        [4.4362],
        [3.7863],
        [3.7590],
        [3.3777],
        [3.8503],
        [4.2886],
        [4.0793],
        [4.8804],
        [4.2423],
        [4.2097],
        [3.2694],
        [3.8225],
        [3.9083],
        [4.0243],
        [3.5670],
        [3.9723],
        [4.1388],
        [5.2542],
        [4.1400],
        [4.4075],
        [3.8172],
        [3.7636]])
Selected blocks appended
Decoding step 4
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([286, 164, 191, 132, 423, 373, 127,  87, 110, 303, 289, 167,  74, 489,
        255, 494, 401, 325, 313, 459,  11, 154, 115, 306, 486, 460, 496, 422,
        494, 314, 480, 326,  75, 358, 143,  89, 437, 366, 154, 428,  54, 361,
        351, 252,  61,  19, 497, 492, 228, 166])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[286]],

        [[164]],

        [[191]],

        [[132]],

        [[423]],

        [[373]],

        [[127]],

        [[ 87]],

        [[110]],

        [[303]],

        [[289]],

        [[167]],

        [[ 74]],

        [[489]],

        [[255]],

        [[494]],

        [[401]],

        [[325]],

        [[313]],

        [[459]],

        [[ 11]],

        [[154]],

        [[115]],

        [[306]],

        [[486]],

        [[460]],

        [[496]],

        [[422]],

        [[494]],

        [[314]],

        [[480]],

        [[326]],

        [[ 75]],

        [[358]],

        [[143]],

        [[ 89]],

        [[437]],

        [[366]],

        [[154]],

        [[428]],

        [[ 54]],

        [[361]],

        [[351]],

        [[252]],

        [[ 61]],

        [[ 19]],

        [[497]],

        [[492]],

        [[228]],

        [[166]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[4.4278],
        [4.9877],
        [5.2513],
        [4.0913],
        [5.7638],
        [3.8794],
        [6.3328],
        [4.0735],
        [5.0317],
        [4.6077],
        [4.8116],
        [5.5757],
        [5.3906],
        [5.0818],
        [4.1540],
        [4.3023],
        [4.7809],
        [4.7294],
        [3.2212],
        [4.6789],
        [4.1307],
        [4.6205],
        [4.6621],
        [4.7770],
        [4.4470],
        [5.5098],
        [4.7176],
        [4.3706],
        [5.4140],
        [4.6706],
        [5.0485],
        [4.3511],
        [4.5771],
        [5.2894],
        [4.9067],
        [5.8555],
        [4.9806],
        [4.7554],
        [4.3151],
        [5.0564],
        [4.9256],
        [4.9508],
        [4.0412],
        [5.0477],
        [5.5935],
        [6.5294],
        [4.9991],
        [5.3971],
        [4.7090],
        [5.2289]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[4.4278],
        [4.9877],
        [5.2513],
        [4.0913],
        [5.7638],
        [3.8794],
        [6.3328],
        [4.0735],
        [5.0317],
        [4.6077],
        [4.8116],
        [5.5757],
        [5.3906],
        [5.0818],
        [4.1540],
        [4.3023],
        [4.7809],
        [4.7294],
        [3.2212],
        [4.6789],
        [4.1307],
        [4.6205],
        [4.6621],
        [4.7770],
        [4.4470],
        [5.5098],
        [4.7176],
        [4.3706],
        [5.4140],
        [4.6706],
        [5.0485],
        [4.3511],
        [4.5771],
        [5.2894],
        [4.9067],
        [5.8555],
        [4.9806],
        [4.7554],
        [4.3151],
        [5.0564],
        [4.9256],
        [4.9508],
        [4.0412],
        [5.0477],
        [5.5935],
        [6.5294],
        [4.9991],
        [5.3971],
        [4.7090],
        [5.2289]])
Selected blocks appended
Decoding step 5
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([443,  68, 462,  75, 208, 246, 366,  39, 176, 201, 263, 328,  82,   7,
        446,  64, 492,  24, 120,  48, 266, 110,  56,   0, 470, 222, 413,   9,
        356,  26,  49, 301, 328, 201, 119, 466, 217, 160, 333, 396, 278, 182,
        394, 455, 378,  79, 433, 491, 271, 495])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[443]],

        [[ 68]],

        [[462]],

        [[ 75]],

        [[208]],

        [[246]],

        [[366]],

        [[ 39]],

        [[176]],

        [[201]],

        [[263]],

        [[328]],

        [[ 82]],

        [[  7]],

        [[446]],

        [[ 64]],

        [[492]],

        [[ 24]],

        [[120]],

        [[ 48]],

        [[266]],

        [[110]],

        [[ 56]],

        [[  0]],

        [[470]],

        [[222]],

        [[413]],

        [[  9]],

        [[356]],

        [[ 26]],

        [[ 49]],

        [[301]],

        [[328]],

        [[201]],

        [[119]],

        [[466]],

        [[217]],

        [[160]],

        [[333]],

        [[396]],

        [[278]],

        [[182]],

        [[394]],

        [[455]],

        [[378]],

        [[ 79]],

        [[433]],

        [[491]],

        [[271]],

        [[495]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[5.2198],
        [6.4778],
        [6.8505],
        [5.4372],
        [6.0813],
        [5.1823],
        [7.3132],
        [4.9804],
        [6.3221],
        [5.7562],
        [6.1466],
        [6.6183],
        [6.0893],
        [5.6984],
        [5.5156],
        [4.9572],
        [5.5958],
        [5.7114],
        [4.2378],
        [6.0340],
        [5.1063],
        [5.9952],
        [5.4416],
        [5.9189],
        [4.9901],
        [6.4021],
        [6.0464],
        [5.2750],
        [6.5992],
        [5.4598],
        [5.8560],
        [5.2455],
        [5.7072],
        [6.6853],
        [5.9047],
        [6.8569],
        [6.1366],
        [5.1876],
        [5.4513],
        [6.1787],
        [5.8703],
        [6.1660],
        [4.8785],
        [5.9597],
        [6.7513],
        [7.7657],
        [6.2909],
        [6.3951],
        [6.0348],
        [6.5678]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[5.2198],
        [6.4778],
        [6.8505],
        [5.4372],
        [6.0813],
        [5.1823],
        [7.3132],
        [4.9804],
        [6.3221],
        [5.7562],
        [6.1466],
        [6.6183],
        [6.0893],
        [5.6984],
        [5.5156],
        [4.9572],
        [5.5958],
        [5.7114],
        [4.2378],
        [6.0340],
        [5.1063],
        [5.9952],
        [5.4416],
        [5.9189],
        [4.9901],
        [6.4021],
        [6.0464],
        [5.2750],
        [6.5992],
        [5.4598],
        [5.8560],
        [5.2455],
        [5.7072],
        [6.6853],
        [5.9047],
        [6.8569],
        [6.1366],
        [5.1876],
        [5.4513],
        [6.1787],
        [5.8703],
        [6.1660],
        [4.8785],
        [5.9597],
        [6.7513],
        [7.7657],
        [6.2909],
        [6.3951],
        [6.0348],
        [6.5678]])
Selected blocks appended
Decoding step 6
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([267, 246, 124, 130, 370, 316, 142, 212, 166,  75, 423, 339, 353, 196,
        188, 223, 245, 426, 414, 436, 383,  12,  11, 330, 405, 444, 351, 463,
        328,  57, 345, 487, 373, 299, 166,  20, 201, 159, 274,  97, 325,  33,
          7, 397, 349, 304, 408, 177, 348, 161])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[267]],

        [[246]],

        [[124]],

        [[130]],

        [[370]],

        [[316]],

        [[142]],

        [[212]],

        [[166]],

        [[ 75]],

        [[423]],

        [[339]],

        [[353]],

        [[196]],

        [[188]],

        [[223]],

        [[245]],

        [[426]],

        [[414]],

        [[436]],

        [[383]],

        [[ 12]],

        [[ 11]],

        [[330]],

        [[405]],

        [[444]],

        [[351]],

        [[463]],

        [[328]],

        [[ 57]],

        [[345]],

        [[487]],

        [[373]],

        [[299]],

        [[166]],

        [[ 20]],

        [[201]],

        [[159]],

        [[274]],

        [[ 97]],

        [[325]],

        [[ 33]],

        [[  7]],

        [[397]],

        [[349]],

        [[304]],

        [[408]],

        [[177]],

        [[348]],

        [[161]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[6.3320],
        [7.7807],
        [7.9216],
        [6.9605],
        [7.0514],
        [6.2563],
        [8.1490],
        [5.7105],
        [7.6743],
        [7.1021],
        [6.9866],
        [7.6722],
        [6.9651],
        [6.3663],
        [6.3769],
        [6.0147],
        [6.1454],
        [6.5027],
        [5.1729],
        [6.8472],
        [5.9832],
        [7.1188],
        [6.5421],
        [6.7675],
        [6.2995],
        [7.2172],
        [7.2622],
        [6.4688],
        [7.5641],
        [6.1282],
        [6.8969],
        [6.2654],
        [6.7840],
        [7.3076],
        [6.8050],
        [8.0290],
        [7.5325],
        [5.7090],
        [6.6146],
        [7.7321],
        [6.9103],
        [7.2657],
        [5.9706],
        [6.7777],
        [8.0903],
        [8.9552],
        [7.8054],
        [7.3848],
        [7.0705],
        [7.7635]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[6.3320],
        [7.7807],
        [7.9216],
        [6.9605],
        [7.0514],
        [6.2563],
        [8.1490],
        [5.7105],
        [7.6743],
        [7.1021],
        [6.9866],
        [7.6722],
        [6.9651],
        [6.3663],
        [6.3769],
        [6.0147],
        [6.1454],
        [6.5027],
        [5.1729],
        [6.8472],
        [5.9832],
        [7.1188],
        [6.5421],
        [6.7675],
        [6.2995],
        [7.2172],
        [7.2622],
        [6.4688],
        [7.5641],
        [6.1282],
        [6.8969],
        [6.2654],
        [6.7840],
        [7.3076],
        [6.8050],
        [8.0290],
        [7.5325],
        [5.7090],
        [6.6146],
        [7.7321],
        [6.9103],
        [7.2657],
        [5.9706],
        [6.7777],
        [8.0903],
        [8.9552],
        [7.8054],
        [7.3848],
        [7.0705],
        [7.7635]])
Selected blocks appended
Decoding step 7
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([346, 299, 150, 475, 254,   8, 442, 432, 484, 369, 250, 184, 313, 473,
        325, 378, 320,  94, 453, 305, 395, 381, 411, 435, 386, 288, 166,  32,
        176, 359, 301, 106,  83, 208, 108, 177, 312, 410, 487, 416, 402, 275,
        367, 426, 257, 343, 227, 432, 487, 226])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[346]],

        [[299]],

        [[150]],

        [[475]],

        [[254]],

        [[  8]],

        [[442]],

        [[432]],

        [[484]],

        [[369]],

        [[250]],

        [[184]],

        [[313]],

        [[473]],

        [[325]],

        [[378]],

        [[320]],

        [[ 94]],

        [[453]],

        [[305]],

        [[395]],

        [[381]],

        [[411]],

        [[435]],

        [[386]],

        [[288]],

        [[166]],

        [[ 32]],

        [[176]],

        [[359]],

        [[301]],

        [[106]],

        [[ 83]],

        [[208]],

        [[108]],

        [[177]],

        [[312]],

        [[410]],

        [[487]],

        [[416]],

        [[402]],

        [[275]],

        [[367]],

        [[426]],

        [[257]],

        [[343]],

        [[227]],

        [[432]],

        [[487]],

        [[226]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[7.0352],
        [8.5653],
        [8.8782],
        [8.2711],
        [7.6230],
        [7.0676],
        [9.0493],
        [6.5017],
        [8.2378],
        [8.1450],
        [7.8814],
        [8.7502],
        [7.5370],
        [7.3799],
        [7.4909],
        [6.8494],
        [7.5832],
        [7.6088],
        [6.2440],
        [8.0103],
        [7.2004],
        [8.3647],
        [7.5943],
        [8.0328],
        [7.4252],
        [7.9723],
        [8.0755],
        [7.4144],
        [8.4644],
        [6.8078],
        [7.7914],
        [7.0436],
        [7.8010],
        [8.3835],
        [7.6939],
        [8.9675],
        [8.5475],
        [6.5844],
        [7.6344],
        [8.2324],
        [7.9686],
        [8.1254],
        [7.0168],
        [7.8643],
        [8.8549],
        [9.9526],
        [8.8189],
        [7.9840],
        [8.2117],
        [8.8373]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[7.0352],
        [8.5653],
        [8.8782],
        [8.2711],
        [7.6230],
        [7.0676],
        [9.0493],
        [6.5017],
        [8.2378],
        [8.1450],
        [7.8814],
        [8.7502],
        [7.5370],
        [7.3799],
        [7.4909],
        [6.8494],
        [7.5832],
        [7.6088],
        [6.2440],
        [8.0103],
        [7.2004],
        [8.3647],
        [7.5943],
        [8.0328],
        [7.4252],
        [7.9723],
        [8.0755],
        [7.4144],
        [8.4644],
        [6.8078],
        [7.7914],
        [7.0436],
        [7.8010],
        [8.3835],
        [7.6939],
        [8.9675],
        [8.5475],
        [6.5844],
        [7.6344],
        [8.2324],
        [7.9686],
        [8.1254],
        [7.0168],
        [7.8643],
        [8.8549],
        [9.9526],
        [8.8189],
        [7.9840],
        [8.2117],
        [8.8373]])
Selected blocks appended
Decoding step 8
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([485, 444, 491, 236, 424, 476, 257, 299, 215, 168, 412, 366, 252,  24,
        256, 485, 125, 475, 161,   2, 416, 252, 122, 237, 308, 378, 419, 437,
        183, 124, 328, 360, 368, 368, 172,  39,  93, 359, 475, 484, 467, 375,
        441, 337, 230, 419,  87, 247, 113,  71])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[485]],

        [[444]],

        [[491]],

        [[236]],

        [[424]],

        [[476]],

        [[257]],

        [[299]],

        [[215]],

        [[168]],

        [[412]],

        [[366]],

        [[252]],

        [[ 24]],

        [[256]],

        [[485]],

        [[125]],

        [[475]],

        [[161]],

        [[  2]],

        [[416]],

        [[252]],

        [[122]],

        [[237]],

        [[308]],

        [[378]],

        [[419]],

        [[437]],

        [[183]],

        [[124]],

        [[328]],

        [[360]],

        [[368]],

        [[368]],

        [[172]],

        [[ 39]],

        [[ 93]],

        [[359]],

        [[475]],

        [[484]],

        [[467]],

        [[375]],

        [[441]],

        [[337]],

        [[230]],

        [[419]],

        [[ 87]],

        [[247]],

        [[113]],

        [[ 71]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[ 7.6642],
        [ 9.5315],
        [ 9.6760],
        [ 9.0841],
        [ 8.5223],
        [ 8.1343],
        [10.1924],
        [ 7.2863],
        [ 9.3974],
        [ 8.7305],
        [ 9.3162],
        [ 9.7157],
        [ 8.5226],
        [ 8.3619],
        [ 8.4030],
        [ 7.5333],
        [ 8.2801],
        [ 8.6448],
        [ 6.8027],
        [ 9.1683],
        [ 8.0685],
        [ 9.1593],
        [ 8.4531],
        [ 9.3180],
        [ 8.6889],
        [ 8.8702],
        [ 9.5469],
        [ 8.6679],
        [ 9.0852],
        [ 7.7203],
        [ 8.9215],
        [ 8.1870],
        [ 9.0236],
        [ 9.6060],
        [ 8.8347],
        [ 9.9923],
        [ 9.6450],
        [ 7.7053],
        [ 8.5452],
        [ 9.3592],
        [ 9.0467],
        [ 9.3412],
        [ 8.2446],
        [ 8.7706],
        [10.0431],
        [11.1252],
        [ 9.3548],
        [ 9.0730],
        [ 8.9841],
        [ 9.9646]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[ 7.6642],
        [ 9.5315],
        [ 9.6760],
        [ 9.0841],
        [ 8.5223],
        [ 8.1343],
        [10.1924],
        [ 7.2863],
        [ 9.3974],
        [ 8.7305],
        [ 9.3162],
        [ 9.7157],
        [ 8.5226],
        [ 8.3619],
        [ 8.4030],
        [ 7.5333],
        [ 8.2801],
        [ 8.6448],
        [ 6.8027],
        [ 9.1683],
        [ 8.0685],
        [ 9.1593],
        [ 8.4531],
        [ 9.3180],
        [ 8.6889],
        [ 8.8702],
        [ 9.5469],
        [ 8.6679],
        [ 9.0852],
        [ 7.7203],
        [ 8.9215],
        [ 8.1870],
        [ 9.0236],
        [ 9.6060],
        [ 8.8347],
        [ 9.9923],
        [ 9.6450],
        [ 7.7053],
        [ 8.5452],
        [ 9.3592],
        [ 9.0467],
        [ 9.3412],
        [ 8.2446],
        [ 8.7706],
        [10.0431],
        [11.1252],
        [ 9.3548],
        [ 9.0730],
        [ 8.9841],
        [ 9.9646]])
Selected blocks appended
Decoding step 9
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([161, 179, 265, 191, 203,  95, 329,  31, 224, 432, 232, 284, 294,  95,
         59,  65,  31, 320, 101, 287, 409, 291, 432, 127, 181, 336, 187,  72,
          7, 212, 344, 123,  80, 261, 455, 214, 359, 317, 489, 460, 426, 420,
        186, 265,  87, 161, 332, 175, 204,  88])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[161]],

        [[179]],

        [[265]],

        [[191]],

        [[203]],

        [[ 95]],

        [[329]],

        [[ 31]],

        [[224]],

        [[432]],

        [[232]],

        [[284]],

        [[294]],

        [[ 95]],

        [[ 59]],

        [[ 65]],

        [[ 31]],

        [[320]],

        [[101]],

        [[287]],

        [[409]],

        [[291]],

        [[432]],

        [[127]],

        [[181]],

        [[336]],

        [[187]],

        [[ 72]],

        [[  7]],

        [[212]],

        [[344]],

        [[123]],

        [[ 80]],

        [[261]],

        [[455]],

        [[214]],

        [[359]],

        [[317]],

        [[489]],

        [[460]],

        [[426]],

        [[420]],

        [[186]],

        [[265]],

        [[ 87]],

        [[161]],

        [[332]],

        [[175]],

        [[204]],

        [[ 88]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[ 9.4050],
        [10.7591],
        [10.8603],
        [10.5082],
        [ 9.0922],
        [ 9.2735],
        [11.4859],
        [ 8.6146],
        [10.5471],
        [ 9.5217],
        [10.3358],
        [10.9412],
        [ 9.5170],
        [ 8.9587],
        [ 9.1866],
        [ 7.9639],
        [ 9.4269],
        [10.0826],
        [ 7.7228],
        [10.0958],
        [ 8.8109],
        [10.2604],
        [ 9.4913],
        [10.7934],
        [ 9.3440],
        [ 9.8106],
        [10.4889],
        [10.1722],
        [10.3415],
        [ 8.4243],
        [10.4699],
        [ 9.4924],
        [10.1497],
        [10.5290],
        [10.1862],
        [11.0066],
        [10.7659],
        [ 8.1594],
        [10.1904],
        [10.1538],
        [10.1332],
        [10.5867],
        [ 9.5353],
        [ 9.9777],
        [10.5789],
        [12.3209],
        [10.5756],
        [10.5212],
        [10.0059],
        [11.3250]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[ 9.4050],
        [10.7591],
        [10.8603],
        [10.5082],
        [ 9.0922],
        [ 9.2735],
        [11.4859],
        [ 8.6146],
        [10.5471],
        [ 9.5217],
        [10.3358],
        [10.9412],
        [ 9.5170],
        [ 8.9587],
        [ 9.1866],
        [ 7.9639],
        [ 9.4269],
        [10.0826],
        [ 7.7228],
        [10.0958],
        [ 8.8109],
        [10.2604],
        [ 9.4913],
        [10.7934],
        [ 9.3440],
        [ 9.8106],
        [10.4889],
        [10.1722],
        [10.3415],
        [ 8.4243],
        [10.4699],
        [ 9.4924],
        [10.1497],
        [10.5290],
        [10.1862],
        [11.0066],
        [10.7659],
        [ 8.1594],
        [10.1904],
        [10.1538],
        [10.1332],
        [10.5867],
        [ 9.5353],
        [ 9.9777],
        [10.5789],
        [12.3209],
        [10.5756],
        [10.5212],
        [10.0059],
        [11.3250]])
Selected blocks appended
Decoding step 10
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([355, 107, 303, 175,  41, 342, 483, 319, 286, 114, 187, 157, 133,  58,
         48,  72, 257,  18, 275, 451, 131, 173, 478, 331, 109, 449,  86, 410,
        178, 284, 377, 382, 297, 293,  43, 279, 122, 375, 166, 127, 249, 211,
        316, 130,  75, 474, 266, 292, 161, 295])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[355]],

        [[107]],

        [[303]],

        [[175]],

        [[ 41]],

        [[342]],

        [[483]],

        [[319]],

        [[286]],

        [[114]],

        [[187]],

        [[157]],

        [[133]],

        [[ 58]],

        [[ 48]],

        [[ 72]],

        [[257]],

        [[ 18]],

        [[275]],

        [[451]],

        [[131]],

        [[173]],

        [[478]],

        [[331]],

        [[109]],

        [[449]],

        [[ 86]],

        [[410]],

        [[178]],

        [[284]],

        [[377]],

        [[382]],

        [[297]],

        [[293]],

        [[ 43]],

        [[279]],

        [[122]],

        [[375]],

        [[166]],

        [[127]],

        [[249]],

        [[211]],

        [[316]],

        [[130]],

        [[ 75]],

        [[474]],

        [[266]],

        [[292]],

        [[161]],

        [[295]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[10.1365],
        [11.7236],
        [11.9921],
        [11.5543],
        [ 9.8125],
        [10.0732],
        [12.5233],
        [ 9.6498],
        [11.5449],
        [10.6253],
        [11.6017],
        [11.6538],
        [ 9.8491],
        [ 9.8342],
        [10.5417],
        [ 8.8728],
        [10.2805],
        [10.9723],
        [ 8.7195],
        [10.9538],
        [10.0224],
        [11.3170],
        [10.9477],
        [11.6087],
        [10.1333],
        [10.6163],
        [11.2696],
        [11.1945],
        [11.0580],
        [ 9.5786],
        [11.7112],
        [10.5097],
        [11.4537],
        [11.3436],
        [11.4616],
        [12.0442],
        [11.7068],
        [ 9.3126],
        [11.0907],
        [10.6425],
        [11.8316],
        [11.9696],
        [10.9009],
        [11.1075],
        [11.6885],
        [13.5715],
        [11.4626],
        [11.3951],
        [11.2016],
        [12.5503]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[10.1365],
        [11.7236],
        [11.9921],
        [11.5543],
        [ 9.8125],
        [10.0732],
        [12.5233],
        [ 9.6498],
        [11.5449],
        [10.6253],
        [11.6017],
        [11.6538],
        [ 9.8491],
        [ 9.8342],
        [10.5417],
        [ 8.8728],
        [10.2805],
        [10.9723],
        [ 8.7195],
        [10.9538],
        [10.0224],
        [11.3170],
        [10.9477],
        [11.6087],
        [10.1333],
        [10.6163],
        [11.2696],
        [11.1945],
        [11.0580],
        [ 9.5786],
        [11.7112],
        [10.5097],
        [11.4537],
        [11.3436],
        [11.4616],
        [12.0442],
        [11.7068],
        [ 9.3126],
        [11.0907],
        [10.6425],
        [11.8316],
        [11.9696],
        [10.9009],
        [11.1075],
        [11.6885],
        [13.5715],
        [11.4626],
        [11.3951],
        [11.2016],
        [12.5503]])
Selected blocks appended
Decoding step 11
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([369, 132, 340, 307, 170, 410, 280, 270, 352, 419, 337, 197, 331,  33,
        321, 319, 493, 193, 204,  63, 337, 325,  95,  87, 162, 315, 484, 444,
         16, 251, 138,  68,  76, 207, 227, 216, 393, 372, 334, 325, 131, 344,
         67, 327, 155, 302, 132,  90, 397, 384])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[369]],

        [[132]],

        [[340]],

        [[307]],

        [[170]],

        [[410]],

        [[280]],

        [[270]],

        [[352]],

        [[419]],

        [[337]],

        [[197]],

        [[331]],

        [[ 33]],

        [[321]],

        [[319]],

        [[493]],

        [[193]],

        [[204]],

        [[ 63]],

        [[337]],

        [[325]],

        [[ 95]],

        [[ 87]],

        [[162]],

        [[315]],

        [[484]],

        [[444]],

        [[ 16]],

        [[251]],

        [[138]],

        [[ 68]],

        [[ 76]],

        [[207]],

        [[227]],

        [[216]],

        [[393]],

        [[372]],

        [[334]],

        [[325]],

        [[131]],

        [[344]],

        [[ 67]],

        [[327]],

        [[155]],

        [[302]],

        [[132]],

        [[ 90]],

        [[397]],

        [[384]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[11.1794],
        [12.5504],
        [12.6107],
        [12.3249],
        [10.2949],
        [11.1471],
        [13.6820],
        [10.7665],
        [12.6507],
        [11.7348],
        [12.8645],
        [12.1489],
        [10.9390],
        [10.6504],
        [11.5274],
        [10.0988],
        [11.2930],
        [11.5487],
        [ 9.2339],
        [11.8562],
        [10.1591],
        [12.4180],
        [11.7305],
        [12.9148],
        [11.0439],
        [11.0631],
        [12.0989],
        [12.0096],
        [12.6546],
        [10.9725],
        [12.6444],
        [11.5834],
        [12.2772],
        [12.4628],
        [12.1887],
        [13.3595],
        [12.9269],
        [10.4787],
        [12.0822],
        [11.6093],
        [12.5716],
        [13.5297],
        [12.1009],
        [11.5433],
        [12.3528],
        [15.2073],
        [12.4549],
        [11.9257],
        [12.0196],
        [13.8439]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[11.1794],
        [12.5504],
        [12.6107],
        [12.3249],
        [10.2949],
        [11.1471],
        [13.6820],
        [10.7665],
        [12.6507],
        [11.7348],
        [12.8645],
        [12.1489],
        [10.9390],
        [10.6504],
        [11.5274],
        [10.0988],
        [11.2930],
        [11.5487],
        [ 9.2339],
        [11.8562],
        [10.1591],
        [12.4180],
        [11.7305],
        [12.9148],
        [11.0439],
        [11.0631],
        [12.0989],
        [12.0096],
        [12.6546],
        [10.9725],
        [12.6444],
        [11.5834],
        [12.2772],
        [12.4628],
        [12.1887],
        [13.3595],
        [12.9269],
        [10.4787],
        [12.0822],
        [11.6093],
        [12.5716],
        [13.5297],
        [12.1009],
        [11.5433],
        [12.3528],
        [15.2073],
        [12.4549],
        [11.9257],
        [12.0196],
        [13.8439]])
Selected blocks appended
Decoding step 12
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([372, 140, 108, 186, 420, 137, 431, 246, 443, 352, 494, 231, 241,  48,
        226,  95, 473, 451, 125, 298,  42, 408,  81, 457, 424,  42, 408,   1,
         13, 393, 333, 189, 383,  72, 152, 324,  57, 315, 450, 269, 266, 476,
        212, 146,  64, 477, 172, 139, 257, 235])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[372]],

        [[140]],

        [[108]],

        [[186]],

        [[420]],

        [[137]],

        [[431]],

        [[246]],

        [[443]],

        [[352]],

        [[494]],

        [[231]],

        [[241]],

        [[ 48]],

        [[226]],

        [[ 95]],

        [[473]],

        [[451]],

        [[125]],

        [[298]],

        [[ 42]],

        [[408]],

        [[ 81]],

        [[457]],

        [[424]],

        [[ 42]],

        [[408]],

        [[  1]],

        [[ 13]],

        [[393]],

        [[333]],

        [[189]],

        [[383]],

        [[ 72]],

        [[152]],

        [[324]],

        [[ 57]],

        [[315]],

        [[450]],

        [[269]],

        [[266]],

        [[476]],

        [[212]],

        [[146]],

        [[ 64]],

        [[477]],

        [[172]],

        [[139]],

        [[257]],

        [[235]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[12.0594],
        [13.1292],
        [13.7935],
        [13.7168],
        [10.8475],
        [12.3338],
        [14.6465],
        [12.0694],
        [13.4427],
        [12.8406],
        [13.5216],
        [13.0891],
        [11.8701],
        [12.0055],
        [12.8932],
        [10.6956],
        [12.3065],
        [12.4067],
        [ 9.9308],
        [12.7187],
        [11.0434],
        [13.4370],
        [12.2632],
        [14.3795],
        [12.2420],
        [11.9475],
        [13.1180],
        [12.7433],
        [13.8871],
        [12.5365],
        [13.7806],
        [12.3022],
        [12.9123],
        [13.4544],
        [12.9230],
        [14.3135],
        [13.9104],
        [11.6358],
        [13.0687],
        [12.7559],
        [13.4586],
        [14.4412],
        [12.7927],
        [12.4365],
        [13.4174],
        [16.1372],
        [13.2873],
        [13.0452],
        [12.7841],
        [14.3990]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[12.0594],
        [13.1292],
        [13.7935],
        [13.7168],
        [10.8475],
        [12.3338],
        [14.6465],
        [12.0694],
        [13.4427],
        [12.8406],
        [13.5216],
        [13.0891],
        [11.8701],
        [12.0055],
        [12.8932],
        [10.6956],
        [12.3065],
        [12.4067],
        [ 9.9308],
        [12.7187],
        [11.0434],
        [13.4370],
        [12.2632],
        [14.3795],
        [12.2420],
        [11.9475],
        [13.1180],
        [12.7433],
        [13.8871],
        [12.5365],
        [13.7806],
        [12.3022],
        [12.9123],
        [13.4544],
        [12.9230],
        [14.3135],
        [13.9104],
        [11.6358],
        [13.0687],
        [12.7559],
        [13.4586],
        [14.4412],
        [12.7927],
        [12.4365],
        [13.4174],
        [16.1372],
        [13.2873],
        [13.0452],
        [12.7841],
        [14.3990]])
Selected blocks appended
Decoding step 13
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 78,  15, 172, 232, 331, 478, 395, 146, 436, 404, 172, 401, 445, 183,
        265, 145,  23, 368, 325, 269, 388, 422, 113, 346, 493, 208, 104, 316,
        120, 481, 378, 427, 387, 367, 312, 407, 417, 168, 441, 368,  60, 252,
         39, 387, 187, 415, 228, 472, 286, 358])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 78]],

        [[ 15]],

        [[172]],

        [[232]],

        [[331]],

        [[478]],

        [[395]],

        [[146]],

        [[436]],

        [[404]],

        [[172]],

        [[401]],

        [[445]],

        [[183]],

        [[265]],

        [[145]],

        [[ 23]],

        [[368]],

        [[325]],

        [[269]],

        [[388]],

        [[422]],

        [[113]],

        [[346]],

        [[493]],

        [[208]],

        [[104]],

        [[316]],

        [[120]],

        [[481]],

        [[378]],

        [[427]],

        [[387]],

        [[367]],

        [[312]],

        [[407]],

        [[417]],

        [[168]],

        [[441]],

        [[368]],

        [[ 60]],

        [[252]],

        [[ 39]],

        [[387]],

        [[187]],

        [[415]],

        [[228]],

        [[472]],

        [[286]],

        [[358]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[13.1214],
        [13.8300],
        [15.0463],
        [15.0210],
        [12.0148],
        [13.2968],
        [15.5616],
        [12.9435],
        [14.0927],
        [13.9700],
        [14.4160],
        [13.7959],
        [12.7727],
        [13.2528],
        [13.5521],
        [11.9828],
        [13.1343],
        [13.0478],
        [11.0448],
        [13.6042],
        [11.9153],
        [14.6635],
        [13.0076],
        [15.2528],
        [12.9764],
        [12.8575],
        [14.1012],
        [14.0604],
        [14.9653],
        [13.5250],
        [14.9171],
        [12.7964],
        [13.9036],
        [14.6690],
        [13.9380],
        [15.3810],
        [14.4676],
        [12.7779],
        [14.3220],
        [13.9785],
        [14.7007],
        [15.5167],
        [14.5265],
        [13.6075],
        [14.4415],
        [17.6243],
        [14.1791],
        [13.7946],
        [13.8903],
        [15.6702]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[13.1214],
        [13.8300],
        [15.0463],
        [15.0210],
        [12.0148],
        [13.2968],
        [15.5616],
        [12.9435],
        [14.0927],
        [13.9700],
        [14.4160],
        [13.7959],
        [12.7727],
        [13.2528],
        [13.5521],
        [11.9828],
        [13.1343],
        [13.0478],
        [11.0448],
        [13.6042],
        [11.9153],
        [14.6635],
        [13.0076],
        [15.2528],
        [12.9764],
        [12.8575],
        [14.1012],
        [14.0604],
        [14.9653],
        [13.5250],
        [14.9171],
        [12.7964],
        [13.9036],
        [14.6690],
        [13.9380],
        [15.3810],
        [14.4676],
        [12.7779],
        [14.3220],
        [13.9785],
        [14.7007],
        [15.5167],
        [14.5265],
        [13.6075],
        [14.4415],
        [17.6243],
        [14.1791],
        [13.7946],
        [13.8903],
        [15.6702]])
Selected blocks appended
Decoding step 14
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([187, 394, 368,  21,  98, 317, 494,  80, 284, 497, 284, 243, 199, 366,
        190, 265, 131, 267, 113, 236, 422,  64, 491, 452, 145, 168,  45, 359,
         91, 424, 353, 157, 157, 139, 265, 156, 107,  99, 201, 104, 188, 108,
         50, 467, 351,  99, 226, 117, 492, 409])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[187]],

        [[394]],

        [[368]],

        [[ 21]],

        [[ 98]],

        [[317]],

        [[494]],

        [[ 80]],

        [[284]],

        [[497]],

        [[284]],

        [[243]],

        [[199]],

        [[366]],

        [[190]],

        [[265]],

        [[131]],

        [[267]],

        [[113]],

        [[236]],

        [[422]],

        [[ 64]],

        [[491]],

        [[452]],

        [[145]],

        [[168]],

        [[ 45]],

        [[359]],

        [[ 91]],

        [[424]],

        [[353]],

        [[157]],

        [[157]],

        [[139]],

        [[265]],

        [[156]],

        [[107]],

        [[ 99]],

        [[201]],

        [[104]],

        [[188]],

        [[108]],

        [[ 50]],

        [[467]],

        [[351]],

        [[ 99]],

        [[226]],

        [[117]],

        [[492]],

        [[409]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[13.9871],
        [14.7980],
        [15.7456],
        [16.0146],
        [13.1603],
        [13.9361],
        [16.4973],
        [13.5727],
        [15.3262],
        [15.4301],
        [15.6415],
        [15.0748],
        [13.6322],
        [14.2183],
        [14.8299],
        [12.6417],
        [14.0576],
        [13.7464],
        [11.9301],
        [14.6992],
        [13.1418],
        [15.7809],
        [14.3864],
        [16.5404],
        [14.0383],
        [13.8084],
        [14.9512],
        [14.7400],
        [16.1932],
        [14.7232],
        [15.7455],
        [13.7674],
        [14.8746],
        [15.7605],
        [14.8101],
        [16.5176],
        [15.0616],
        [13.9714],
        [15.7178],
        [14.8054],
        [16.0459],
        [16.7613],
        [15.7216],
        [14.6855],
        [14.9157],
        [18.9044],
        [15.2530],
        [14.5635],
        [14.8799],
        [16.8447]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[13.9871],
        [14.7980],
        [15.7456],
        [16.0146],
        [13.1603],
        [13.9361],
        [16.4973],
        [13.5727],
        [15.3262],
        [15.4301],
        [15.6415],
        [15.0748],
        [13.6322],
        [14.2183],
        [14.8299],
        [12.6417],
        [14.0576],
        [13.7464],
        [11.9301],
        [14.6992],
        [13.1418],
        [15.7809],
        [14.3864],
        [16.5404],
        [14.0383],
        [13.8084],
        [14.9512],
        [14.7400],
        [16.1932],
        [14.7232],
        [15.7455],
        [13.7674],
        [14.8746],
        [15.7605],
        [14.8101],
        [16.5176],
        [15.0616],
        [13.9714],
        [15.7178],
        [14.8054],
        [16.0459],
        [16.7613],
        [15.7216],
        [14.6855],
        [14.9157],
        [18.9044],
        [15.2530],
        [14.5635],
        [14.8799],
        [16.8447]])
Selected blocks appended
Decoding step 15
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([171, 477, 185, 366, 179, 343,  25, 118, 217, 417,  30,  79, 315, 409,
        426, 372, 485, 168,  32, 373,  61, 151, 237, 234, 371,  53, 311, 471,
        334, 397,  21,  93, 403, 116, 161, 157, 240, 297, 186, 402,  30,  91,
         31, 119, 370, 313, 189, 333, 340, 266])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[171]],

        [[477]],

        [[185]],

        [[366]],

        [[179]],

        [[343]],

        [[ 25]],

        [[118]],

        [[217]],

        [[417]],

        [[ 30]],

        [[ 79]],

        [[315]],

        [[409]],

        [[426]],

        [[372]],

        [[485]],

        [[168]],

        [[ 32]],

        [[373]],

        [[ 61]],

        [[151]],

        [[237]],

        [[234]],

        [[371]],

        [[ 53]],

        [[311]],

        [[471]],

        [[334]],

        [[397]],

        [[ 21]],

        [[ 93]],

        [[403]],

        [[116]],

        [[161]],

        [[157]],

        [[240]],

        [[297]],

        [[186]],

        [[402]],

        [[ 30]],

        [[ 91]],

        [[ 31]],

        [[119]],

        [[370]],

        [[313]],

        [[189]],

        [[333]],

        [[340]],

        [[266]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[15.0745],
        [16.0852],
        [17.0160],
        [16.9950],
        [14.3879],
        [15.4510],
        [16.9350],
        [14.7836],
        [16.9194],
        [16.4663],
        [16.9084],
        [16.0498],
        [14.7721],
        [15.2365],
        [15.6213],
        [13.5780],
        [14.7415],
        [14.4696],
        [12.7303],
        [15.9031],
        [13.5462],
        [17.1237],
        [15.6716],
        [17.6085],
        [15.3744],
        [14.9245],
        [16.2661],
        [15.6379],
        [16.8638],
        [15.5548],
        [16.9046],
        [14.8648],
        [15.9248],
        [16.8919],
        [15.9755],
        [17.4886],
        [16.5267],
        [15.2754],
        [17.2401],
        [16.0513],
        [16.6922],
        [17.6023],
        [16.6627],
        [15.7733],
        [15.9273],
        [19.9793],
        [16.8523],
        [15.6911],
        [15.5943],
        [17.7317]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[15.0745],
        [16.0852],
        [17.0160],
        [16.9950],
        [14.3879],
        [15.4510],
        [16.9350],
        [14.7836],
        [16.9194],
        [16.4663],
        [16.9084],
        [16.0498],
        [14.7721],
        [15.2365],
        [15.6213],
        [13.5780],
        [14.7415],
        [14.4696],
        [12.7303],
        [15.9031],
        [13.5462],
        [17.1237],
        [15.6716],
        [17.6085],
        [15.3744],
        [14.9245],
        [16.2661],
        [15.6379],
        [16.8638],
        [15.5548],
        [16.9046],
        [14.8648],
        [15.9248],
        [16.8919],
        [15.9755],
        [17.4886],
        [16.5267],
        [15.2754],
        [17.2401],
        [16.0513],
        [16.6922],
        [17.6023],
        [16.6627],
        [15.7733],
        [15.9273],
        [19.9793],
        [16.8523],
        [15.6911],
        [15.5943],
        [17.7317]])
Selected blocks appended
Decoding step 16
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([261, 151, 230, 461, 166, 339, 273, 476, 278, 406, 454, 188, 380, 326,
         98,  31, 267, 192,  12, 215, 204, 123, 332, 255, 227,  54, 198, 133,
        168, 281, 362,  90, 326, 131,  47,  51, 158, 251,  47, 144, 448, 213,
        458, 108, 390, 133, 104, 106, 429, 155])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[261]],

        [[151]],

        [[230]],

        [[461]],

        [[166]],

        [[339]],

        [[273]],

        [[476]],

        [[278]],

        [[406]],

        [[454]],

        [[188]],

        [[380]],

        [[326]],

        [[ 98]],

        [[ 31]],

        [[267]],

        [[192]],

        [[ 12]],

        [[215]],

        [[204]],

        [[123]],

        [[332]],

        [[255]],

        [[227]],

        [[ 54]],

        [[198]],

        [[133]],

        [[168]],

        [[281]],

        [[362]],

        [[ 90]],

        [[326]],

        [[131]],

        [[ 47]],

        [[ 51]],

        [[158]],

        [[251]],

        [[ 47]],

        [[144]],

        [[448]],

        [[213]],

        [[458]],

        [[108]],

        [[390]],

        [[133]],

        [[104]],

        [[106]],

        [[429]],

        [[155]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[15.7922],
        [17.1273],
        [18.1932],
        [17.9715],
        [15.7401],
        [16.5001],
        [18.3137],
        [15.8502],
        [18.0096],
        [17.4557],
        [17.2052],
        [16.9110],
        [16.1075],
        [16.1408],
        [16.7273],
        [14.7249],
        [15.4402],
        [15.5479],
        [13.4507],
        [16.6842],
        [14.0977],
        [18.0883],
        [16.3829],
        [18.4415],
        [16.0556],
        [16.0734],
        [17.5731],
        [16.6832],
        [17.8147],
        [16.2906],
        [17.8715],
        [15.8804],
        [16.8983],
        [18.0848],
        [17.1009],
        [18.6686],
        [17.2595],
        [16.0639],
        [18.3655],
        [16.8938],
        [17.4833],
        [19.1686],
        [17.3282],
        [17.0180],
        [17.1506],
        [21.2532],
        [18.0219],
        [16.7590],
        [16.6611],
        [18.3960]])
Selected blocks after update: tensor([[[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[15.7922],
        [17.1273],
        [18.1932],
        [17.9715],
        [15.7401],
        [16.5001],
        [18.3137],
        [15.8502],
        [18.0096],
        [17.4557],
        [17.2052],
        [16.9110],
        [16.1075],
        [16.1408],
        [16.7273],
        [14.7249],
        [15.4402],
        [15.5479],
        [13.4507],
        [16.6842],
        [14.0977],
        [18.0883],
        [16.3829],
        [18.4415],
        [16.0556],
        [16.0734],
        [17.5731],
        [16.6832],
        [17.8147],
        [16.2906],
        [17.8715],
        [15.8804],
        [16.8983],
        [18.0848],
        [17.1009],
        [18.6686],
        [17.2595],
        [16.0639],
        [18.3655],
        [16.8938],
        [17.4833],
        [19.1686],
        [17.3282],
        [17.0180],
        [17.1506],
        [21.2532],
        [18.0219],
        [16.7590],
        [16.6611],
        [18.3960]])
Selected blocks appended
Decoding step 17
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([  2,  43, 449, 146,   9, 200, 169, 154, 194, 418,  29, 361, 311, 405,
        285, 133, 212, 203, 449, 339,  80,  42, 202, 439, 238, 349, 160, 238,
        239, 394, 108, 312, 106, 123,   2, 388, 471, 492, 281, 380, 199, 162,
        382,  64, 170, 402, 249, 462, 241, 191])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[  2]],

        [[ 43]],

        [[449]],

        [[146]],

        [[  9]],

        [[200]],

        [[169]],

        [[154]],

        [[194]],

        [[418]],

        [[ 29]],

        [[361]],

        [[311]],

        [[405]],

        [[285]],

        [[133]],

        [[212]],

        [[203]],

        [[449]],

        [[339]],

        [[ 80]],

        [[ 42]],

        [[202]],

        [[439]],

        [[238]],

        [[349]],

        [[160]],

        [[238]],

        [[239]],

        [[394]],

        [[108]],

        [[312]],

        [[106]],

        [[123]],

        [[  2]],

        [[388]],

        [[471]],

        [[492]],

        [[281]],

        [[380]],

        [[199]],

        [[162]],

        [[382]],

        [[ 64]],

        [[170]],

        [[402]],

        [[249]],

        [[462]],

        [[241]],

        [[191]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[16.6278],
        [18.5111],
        [19.0702],
        [18.8457],
        [16.8615],
        [17.4331],
        [19.2337],
        [16.5014],
        [18.5086],
        [18.8176],
        [17.9789],
        [18.0416],
        [17.4312],
        [16.9006],
        [17.7160],
        [15.0570],
        [16.2858],
        [16.3986],
        [14.4296],
        [17.7381],
        [15.2163],
        [18.9727],
        [17.4096],
        [19.3591],
        [16.7910],
        [16.8934],
        [18.5386],
        [17.4186],
        [19.0315],
        [16.9048],
        [18.7604],
        [16.8954],
        [17.6765],
        [19.3902],
        [17.9323],
        [19.5723],
        [18.2373],
        [16.6919],
        [19.5377],
        [17.9240],
        [18.5508],
        [20.1654],
        [17.9161],
        [18.0825],
        [18.4509],
        [22.3116],
        [19.7203],
        [17.9244],
        [17.8802],
        [19.4483]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[16.6278],
        [18.5111],
        [19.0702],
        [18.8457],
        [16.8615],
        [17.4331],
        [19.2337],
        [16.5014],
        [18.5086],
        [18.8176],
        [17.9789],
        [18.0416],
        [17.4312],
        [16.9006],
        [17.7160],
        [15.0570],
        [16.2858],
        [16.3986],
        [14.4296],
        [17.7381],
        [15.2163],
        [18.9727],
        [17.4096],
        [19.3591],
        [16.7910],
        [16.8934],
        [18.5386],
        [17.4186],
        [19.0315],
        [16.9048],
        [18.7604],
        [16.8954],
        [17.6765],
        [19.3902],
        [17.9323],
        [19.5723],
        [18.2373],
        [16.6919],
        [19.5377],
        [17.9240],
        [18.5508],
        [20.1654],
        [17.9161],
        [18.0825],
        [18.4509],
        [22.3116],
        [19.7203],
        [17.9244],
        [17.8802],
        [19.4483]])
Selected blocks appended
Decoding step 18
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([120,  75, 257, 417, 354, 486, 315, 449, 417, 426,  64,  89,  73,  59,
        387, 157, 179,  99, 448, 405, 479, 441, 260, 163,  11, 301, 247,  93,
        123, 467, 347, 338, 272, 240, 342, 375, 336, 262, 238,  28, 272, 385,
        238, 451, 481, 464, 447, 310, 215, 272])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[120]],

        [[ 75]],

        [[257]],

        [[417]],

        [[354]],

        [[486]],

        [[315]],

        [[449]],

        [[417]],

        [[426]],

        [[ 64]],

        [[ 89]],

        [[ 73]],

        [[ 59]],

        [[387]],

        [[157]],

        [[179]],

        [[ 99]],

        [[448]],

        [[405]],

        [[479]],

        [[441]],

        [[260]],

        [[163]],

        [[ 11]],

        [[301]],

        [[247]],

        [[ 93]],

        [[123]],

        [[467]],

        [[347]],

        [[338]],

        [[272]],

        [[240]],

        [[342]],

        [[375]],

        [[336]],

        [[262]],

        [[238]],

        [[ 28]],

        [[272]],

        [[385]],

        [[238]],

        [[451]],

        [[481]],

        [[464]],

        [[447]],

        [[310]],

        [[215]],

        [[272]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[17.4671],
        [19.8570],
        [20.2133],
        [19.8819],
        [17.8441],
        [18.4397],
        [20.2067],
        [17.3784],
        [19.5448],
        [19.4157],
        [18.6338],
        [18.8355],
        [18.3308],
        [17.6842],
        [18.4845],
        [15.7696],
        [17.9957],
        [17.1703],
        [15.0282],
        [18.4979],
        [16.0349],
        [19.9553],
        [18.3661],
        [20.1126],
        [17.8915],
        [17.6189],
        [19.6678],
        [18.7383],
        [19.9962],
        [17.9327],
        [20.0693],
        [18.0306],
        [18.6133],
        [20.8554],
        [18.6350],
        [20.7255],
        [19.1493],
        [18.1347],
        [20.7129],
        [18.4824],
        [19.6025],
        [21.4249],
        [19.1633],
        [19.3899],
        [19.6906],
        [23.0671],
        [20.5128],
        [19.0982],
        [18.7796],
        [20.4999]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[17.4671],
        [19.8570],
        [20.2133],
        [19.8819],
        [17.8441],
        [18.4397],
        [20.2067],
        [17.3784],
        [19.5448],
        [19.4157],
        [18.6338],
        [18.8355],
        [18.3308],
        [17.6842],
        [18.4845],
        [15.7696],
        [17.9957],
        [17.1703],
        [15.0282],
        [18.4979],
        [16.0349],
        [19.9553],
        [18.3661],
        [20.1126],
        [17.8915],
        [17.6189],
        [19.6678],
        [18.7383],
        [19.9962],
        [17.9327],
        [20.0693],
        [18.0306],
        [18.6133],
        [20.8554],
        [18.6350],
        [20.7255],
        [19.1493],
        [18.1347],
        [20.7129],
        [18.4824],
        [19.6025],
        [21.4249],
        [19.1633],
        [19.3899],
        [19.6906],
        [23.0671],
        [20.5128],
        [19.0982],
        [18.7796],
        [20.4999]])
Selected blocks appended
Decoding step 19
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([494, 416,  84, 244, 446, 166, 232, 205, 149,  39,  32, 254, 401, 209,
         89,  44, 351, 291, 258,  61, 243,  33, 116, 384, 163, 278, 207, 423,
        444, 289, 172, 350, 462,  36, 261, 296, 294, 318,  19, 139, 380, 227,
        211, 354, 235, 451, 115, 375, 180, 233])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[494]],

        [[416]],

        [[ 84]],

        [[244]],

        [[446]],

        [[166]],

        [[232]],

        [[205]],

        [[149]],

        [[ 39]],

        [[ 32]],

        [[254]],

        [[401]],

        [[209]],

        [[ 89]],

        [[ 44]],

        [[351]],

        [[291]],

        [[258]],

        [[ 61]],

        [[243]],

        [[ 33]],

        [[116]],

        [[384]],

        [[163]],

        [[278]],

        [[207]],

        [[423]],

        [[444]],

        [[289]],

        [[172]],

        [[350]],

        [[462]],

        [[ 36]],

        [[261]],

        [[296]],

        [[294]],

        [[318]],

        [[ 19]],

        [[139]],

        [[380]],

        [[227]],

        [[211]],

        [[354]],

        [[235]],

        [[451]],

        [[115]],

        [[375]],

        [[180]],

        [[233]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[18.4029],
        [20.9924],
        [20.9633],
        [21.1966],
        [18.2009],
        [19.7919],
        [21.5109],
        [18.5179],
        [20.8701],
        [20.3226],
        [19.4340],
        [19.7270],
        [19.0376],
        [19.0181],
        [19.2784],
        [16.5580],
        [18.9409],
        [18.2516],
        [16.0091],
        [19.2873],
        [17.3505],
        [21.0197],
        [19.3010],
        [21.5385],
        [18.6450],
        [18.6103],
        [20.6693],
        [19.9270],
        [20.8113],
        [18.9302],
        [21.2100],
        [18.9857],
        [19.4296],
        [21.7027],
        [19.5580],
        [21.9029],
        [19.9368],
        [19.3764],
        [21.6721],
        [19.5740],
        [20.6096],
        [22.4384],
        [20.5462],
        [20.6551],
        [20.2457],
        [24.3746],
        [21.6514],
        [20.3140],
        [20.2441],
        [21.7046]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[18.4029],
        [20.9924],
        [20.9633],
        [21.1966],
        [18.2009],
        [19.7919],
        [21.5109],
        [18.5179],
        [20.8701],
        [20.3226],
        [19.4340],
        [19.7270],
        [19.0376],
        [19.0181],
        [19.2784],
        [16.5580],
        [18.9409],
        [18.2516],
        [16.0091],
        [19.2873],
        [17.3505],
        [21.0197],
        [19.3010],
        [21.5385],
        [18.6450],
        [18.6103],
        [20.6693],
        [19.9270],
        [20.8113],
        [18.9302],
        [21.2100],
        [18.9857],
        [19.4296],
        [21.7027],
        [19.5580],
        [21.9029],
        [19.9368],
        [19.3764],
        [21.6721],
        [19.5740],
        [20.6096],
        [22.4384],
        [20.5462],
        [20.6551],
        [20.2457],
        [24.3746],
        [21.6514],
        [20.3140],
        [20.2441],
        [21.7046]])
Selected blocks appended
Decoding step 20
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([109, 200, 220,  63, 498, 409, 234,  26, 390, 414, 296,  52, 280, 235,
         94, 172, 215, 115, 291, 311,  48, 424, 314, 139, 111, 240, 494, 136,
        307, 254, 272, 179, 135,  75, 294, 253,  19, 429, 143,  78, 204, 164,
        331, 388, 489, 139, 321,  39, 405, 247])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[109]],

        [[200]],

        [[220]],

        [[ 63]],

        [[498]],

        [[409]],

        [[234]],

        [[ 26]],

        [[390]],

        [[414]],

        [[296]],

        [[ 52]],

        [[280]],

        [[235]],

        [[ 94]],

        [[172]],

        [[215]],

        [[115]],

        [[291]],

        [[311]],

        [[ 48]],

        [[424]],

        [[314]],

        [[139]],

        [[111]],

        [[240]],

        [[494]],

        [[136]],

        [[307]],

        [[254]],

        [[272]],

        [[179]],

        [[135]],

        [[ 75]],

        [[294]],

        [[253]],

        [[ 19]],

        [[429]],

        [[143]],

        [[ 78]],

        [[204]],

        [[164]],

        [[331]],

        [[388]],

        [[489]],

        [[139]],

        [[321]],

        [[ 39]],

        [[405]],

        [[247]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[19.5729],
        [21.9254],
        [22.3489],
        [22.0618],
        [19.0288],
        [20.8721],
        [22.8417],
        [19.6921],
        [22.0194],
        [21.4686],
        [20.3638],
        [20.7777],
        [20.5308],
        [20.0920],
        [20.3845],
        [17.4524],
        [19.7220],
        [19.2432],
        [17.0904],
        [20.6110],
        [18.3130],
        [22.2178],
        [20.1854],
        [22.6620],
        [19.3437],
        [19.6361],
        [21.6470],
        [21.1290],
        [21.7427],
        [19.5562],
        [22.1468],
        [19.6913],
        [20.3612],
        [22.4294],
        [20.3455],
        [22.8408],
        [20.8960],
        [20.6484],
        [22.4995],
        [20.6539],
        [21.6315],
        [23.4530],
        [21.5049],
        [21.7392],
        [21.2307],
        [25.4941],
        [22.8199],
        [22.0479],
        [21.2986],
        [22.7935]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[19.5729],
        [21.9254],
        [22.3489],
        [22.0618],
        [19.0288],
        [20.8721],
        [22.8417],
        [19.6921],
        [22.0194],
        [21.4686],
        [20.3638],
        [20.7777],
        [20.5308],
        [20.0920],
        [20.3845],
        [17.4524],
        [19.7220],
        [19.2432],
        [17.0904],
        [20.6110],
        [18.3130],
        [22.2178],
        [20.1854],
        [22.6620],
        [19.3437],
        [19.6361],
        [21.6470],
        [21.1290],
        [21.7427],
        [19.5562],
        [22.1468],
        [19.6913],
        [20.3612],
        [22.4294],
        [20.3455],
        [22.8408],
        [20.8960],
        [20.6484],
        [22.4995],
        [20.6539],
        [21.6315],
        [23.4530],
        [21.5049],
        [21.7392],
        [21.2307],
        [25.4941],
        [22.8199],
        [22.0479],
        [21.2986],
        [22.7935]])
Selected blocks appended
Decoding step 21
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([328, 389, 294, 124,  22, 217, 402, 273,  56, 333,  87, 368, 374, 370,
        463, 443, 310, 332, 135, 280, 338, 319,  14, 167, 428, 237, 357, 354,
        133,  30, 158, 333, 327, 165, 239, 231, 283, 353, 116, 360, 343, 218,
        152, 351, 367,  48, 488, 368,  88, 267])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[328]],

        [[389]],

        [[294]],

        [[124]],

        [[ 22]],

        [[217]],

        [[402]],

        [[273]],

        [[ 56]],

        [[333]],

        [[ 87]],

        [[368]],

        [[374]],

        [[370]],

        [[463]],

        [[443]],

        [[310]],

        [[332]],

        [[135]],

        [[280]],

        [[338]],

        [[319]],

        [[ 14]],

        [[167]],

        [[428]],

        [[237]],

        [[357]],

        [[354]],

        [[133]],

        [[ 30]],

        [[158]],

        [[333]],

        [[327]],

        [[165]],

        [[239]],

        [[231]],

        [[283]],

        [[353]],

        [[116]],

        [[360]],

        [[343]],

        [[218]],

        [[152]],

        [[351]],

        [[367]],

        [[ 48]],

        [[488]],

        [[368]],

        [[ 88]],

        [[267]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[20.2410],
        [22.8482],
        [23.2997],
        [23.1329],
        [19.9623],
        [22.4653],
        [24.3074],
        [21.0707],
        [22.8202],
        [22.3845],
        [20.8477],
        [21.4187],
        [20.9844],
        [20.7774],
        [21.1100],
        [18.0562],
        [20.6176],
        [20.4801],
        [18.0248],
        [22.1042],
        [19.5764],
        [23.3211],
        [21.0585],
        [23.5776],
        [20.1982],
        [20.9212],
        [22.7892],
        [22.3714],
        [22.7880],
        [20.2061],
        [22.8796],
        [20.8275],
        [21.1830],
        [23.3864],
        [21.2346],
        [23.8829],
        [21.7196],
        [21.4768],
        [23.6309],
        [21.7974],
        [22.6289],
        [24.5921],
        [22.9531],
        [22.2134],
        [22.2768],
        [26.3945],
        [23.3880],
        [22.7735],
        [22.6591],
        [23.7410]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[20.2410],
        [22.8482],
        [23.2997],
        [23.1329],
        [19.9623],
        [22.4653],
        [24.3074],
        [21.0707],
        [22.8202],
        [22.3845],
        [20.8477],
        [21.4187],
        [20.9844],
        [20.7774],
        [21.1100],
        [18.0562],
        [20.6176],
        [20.4801],
        [18.0248],
        [22.1042],
        [19.5764],
        [23.3211],
        [21.0585],
        [23.5776],
        [20.1982],
        [20.9212],
        [22.7892],
        [22.3714],
        [22.7880],
        [20.2061],
        [22.8796],
        [20.8275],
        [21.1830],
        [23.3864],
        [21.2346],
        [23.8829],
        [21.7196],
        [21.4768],
        [23.6309],
        [21.7974],
        [22.6289],
        [24.5921],
        [22.9531],
        [22.2134],
        [22.2768],
        [26.3945],
        [23.3880],
        [22.7735],
        [22.6591],
        [23.7410]])
Selected blocks appended
Decoding step 22
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([101, 289, 132,   4, 382, 270,  31, 180,  79, 363, 148, 352, 361, 494,
        118,  93, 246, 401, 235,  25, 385, 410, 225, 335, 206, 174,  87, 426,
        306, 239, 237, 100, 453, 397, 425, 371,  43, 277, 495, 446,  86, 255,
         82,  24,  74,  55, 419,  12, 297, 289])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[101]],

        [[289]],

        [[132]],

        [[  4]],

        [[382]],

        [[270]],

        [[ 31]],

        [[180]],

        [[ 79]],

        [[363]],

        [[148]],

        [[352]],

        [[361]],

        [[494]],

        [[118]],

        [[ 93]],

        [[246]],

        [[401]],

        [[235]],

        [[ 25]],

        [[385]],

        [[410]],

        [[225]],

        [[335]],

        [[206]],

        [[174]],

        [[ 87]],

        [[426]],

        [[306]],

        [[239]],

        [[237]],

        [[100]],

        [[453]],

        [[397]],

        [[425]],

        [[371]],

        [[ 43]],

        [[277]],

        [[495]],

        [[446]],

        [[ 86]],

        [[255]],

        [[ 82]],

        [[ 24]],

        [[ 74]],

        [[ 55]],

        [[419]],

        [[ 12]],

        [[297]],

        [[289]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[21.1917],
        [23.8068],
        [24.1266],
        [24.6915],
        [21.0395],
        [23.5820],
        [25.6357],
        [22.4333],
        [23.9945],
        [22.9471],
        [21.9063],
        [22.6663],
        [22.1150],
        [21.4345],
        [22.0873],
        [18.9028],
        [21.6190],
        [21.1869],
        [19.0987],
        [23.2540],
        [20.4766],
        [24.3434],
        [21.7166],
        [24.4579],
        [21.1939],
        [22.1233],
        [24.0954],
        [23.4169],
        [23.9489],
        [21.4230],
        [23.8779],
        [22.1286],
        [22.2355],
        [24.7635],
        [22.1550],
        [24.7662],
        [22.9950],
        [22.5681],
        [23.9881],
        [22.8603],
        [23.5895],
        [25.1960],
        [24.0645],
        [23.4790],
        [23.0131],
        [27.6451],
        [24.5606],
        [23.6947],
        [23.5041],
        [25.2591]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[21.1917],
        [23.8068],
        [24.1266],
        [24.6915],
        [21.0395],
        [23.5820],
        [25.6357],
        [22.4333],
        [23.9945],
        [22.9471],
        [21.9063],
        [22.6663],
        [22.1150],
        [21.4345],
        [22.0873],
        [18.9028],
        [21.6190],
        [21.1869],
        [19.0987],
        [23.2540],
        [20.4766],
        [24.3434],
        [21.7166],
        [24.4579],
        [21.1939],
        [22.1233],
        [24.0954],
        [23.4169],
        [23.9489],
        [21.4230],
        [23.8779],
        [22.1286],
        [22.2355],
        [24.7635],
        [22.1550],
        [24.7662],
        [22.9950],
        [22.5681],
        [23.9881],
        [22.8603],
        [23.5895],
        [25.1960],
        [24.0645],
        [23.4790],
        [23.0131],
        [27.6451],
        [24.5606],
        [23.6947],
        [23.5041],
        [25.2591]])
Selected blocks appended
Decoding step 23
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([351, 203, 421,  27, 328,  86, 296, 147, 454,  44, 300, 214, 368, 262,
        425, 101, 282,  75, 335, 481, 206, 156, 310,  71, 108, 401, 135, 107,
        262, 198, 171, 316,  47, 251,  48, 455, 199, 413, 217, 480, 103, 447,
         46, 281, 375,  92,  80, 134, 163, 135])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[351]],

        [[203]],

        [[421]],

        [[ 27]],

        [[328]],

        [[ 86]],

        [[296]],

        [[147]],

        [[454]],

        [[ 44]],

        [[300]],

        [[214]],

        [[368]],

        [[262]],

        [[425]],

        [[101]],

        [[282]],

        [[ 75]],

        [[335]],

        [[481]],

        [[206]],

        [[156]],

        [[310]],

        [[ 71]],

        [[108]],

        [[401]],

        [[135]],

        [[107]],

        [[262]],

        [[198]],

        [[171]],

        [[316]],

        [[ 47]],

        [[251]],

        [[ 48]],

        [[455]],

        [[199]],

        [[413]],

        [[217]],

        [[480]],

        [[103]],

        [[447]],

        [[ 46]],

        [[281]],

        [[375]],

        [[ 92]],

        [[ 80]],

        [[134]],

        [[163]],

        [[135]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[21.9171],
        [24.3767],
        [25.1862],
        [26.1409],
        [21.7075],
        [24.6597],
        [26.9501],
        [23.3637],
        [25.0087],
        [24.1206],
        [23.0391],
        [23.2449],
        [22.7560],
        [22.4040],
        [23.0046],
        [19.8229],
        [22.3476],
        [22.4934],
        [19.9434],
        [24.0075],
        [21.4723],
        [25.5173],
        [22.7838],
        [25.6696],
        [22.5516],
        [22.9348],
        [24.7705],
        [24.4803],
        [24.9854],
        [22.7300],
        [25.1240],
        [23.1860],
        [23.3609],
        [25.5520],
        [23.2596],
        [26.1178],
        [23.8849],
        [23.6973],
        [25.1441],
        [24.1498],
        [24.3235],
        [25.9886],
        [25.6297],
        [24.2525],
        [24.2289],
        [29.2328],
        [25.6817],
        [24.7954],
        [24.2366],
        [26.3528]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[21.9171],
        [24.3767],
        [25.1862],
        [26.1409],
        [21.7075],
        [24.6597],
        [26.9501],
        [23.3637],
        [25.0087],
        [24.1206],
        [23.0391],
        [23.2449],
        [22.7560],
        [22.4040],
        [23.0046],
        [19.8229],
        [22.3476],
        [22.4934],
        [19.9434],
        [24.0075],
        [21.4723],
        [25.5173],
        [22.7838],
        [25.6696],
        [22.5516],
        [22.9348],
        [24.7705],
        [24.4803],
        [24.9854],
        [22.7300],
        [25.1240],
        [23.1860],
        [23.3609],
        [25.5520],
        [23.2596],
        [26.1178],
        [23.8849],
        [23.6973],
        [25.1441],
        [24.1498],
        [24.3235],
        [25.9886],
        [25.6297],
        [24.2525],
        [24.2289],
        [29.2328],
        [25.6817],
        [24.7954],
        [24.2366],
        [26.3528]])
Selected blocks appended
Decoding step 24
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([326, 146, 429, 274, 266, 120, 151, 305, 397, 482,  53,  46, 448, 173,
        449, 137, 178, 133, 167, 208,  14, 216, 228, 319, 291, 398, 416, 458,
         49, 238, 161, 309, 166, 302, 472, 360, 339, 445, 180, 440, 264, 296,
          8, 343, 265,  29, 441,  98, 109,  10])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[326]],

        [[146]],

        [[429]],

        [[274]],

        [[266]],

        [[120]],

        [[151]],

        [[305]],

        [[397]],

        [[482]],

        [[ 53]],

        [[ 46]],

        [[448]],

        [[173]],

        [[449]],

        [[137]],

        [[178]],

        [[133]],

        [[167]],

        [[208]],

        [[ 14]],

        [[216]],

        [[228]],

        [[319]],

        [[291]],

        [[398]],

        [[416]],

        [[458]],

        [[ 49]],

        [[238]],

        [[161]],

        [[309]],

        [[166]],

        [[302]],

        [[472]],

        [[360]],

        [[339]],

        [[445]],

        [[180]],

        [[440]],

        [[264]],

        [[296]],

        [[  8]],

        [[343]],

        [[265]],

        [[ 29]],

        [[441]],

        [[ 98]],

        [[109]],

        [[ 10]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[23.0776],
        [25.2509],
        [26.2774],
        [27.4589],
        [22.7767],
        [25.4990],
        [27.9922],
        [24.5577],
        [26.1950],
        [25.0324],
        [23.5429],
        [23.9424],
        [23.3546],
        [23.3149],
        [23.9836],
        [20.5476],
        [23.1955],
        [22.8254],
        [21.0324],
        [25.0479],
        [22.3455],
        [26.7229],
        [23.3713],
        [26.7729],
        [23.6527],
        [23.8056],
        [25.6386],
        [25.1744],
        [26.3510],
        [23.4654],
        [26.2894],
        [23.8493],
        [24.2611],
        [27.0709],
        [24.2641],
        [27.2612],
        [24.7679],
        [24.5369],
        [26.2302],
        [25.0719],
        [25.4072],
        [26.4745],
        [26.4189],
        [25.2500],
        [25.4360],
        [31.0000],
        [26.9095],
        [25.9121],
        [24.5895],
        [27.4829]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[23.0776],
        [25.2509],
        [26.2774],
        [27.4589],
        [22.7767],
        [25.4990],
        [27.9922],
        [24.5577],
        [26.1950],
        [25.0324],
        [23.5429],
        [23.9424],
        [23.3546],
        [23.3149],
        [23.9836],
        [20.5476],
        [23.1955],
        [22.8254],
        [21.0324],
        [25.0479],
        [22.3455],
        [26.7229],
        [23.3713],
        [26.7729],
        [23.6527],
        [23.8056],
        [25.6386],
        [25.1744],
        [26.3510],
        [23.4654],
        [26.2894],
        [23.8493],
        [24.2611],
        [27.0709],
        [24.2641],
        [27.2612],
        [24.7679],
        [24.5369],
        [26.2302],
        [25.0719],
        [25.4072],
        [26.4745],
        [26.4189],
        [25.2500],
        [25.4360],
        [31.0000],
        [26.9095],
        [25.9121],
        [24.5895],
        [27.4829]])
Selected blocks appended
Decoding step 25
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([336, 413,  81, 308, 273, 284,  74, 265, 249, 296,  85, 237, 403,  91,
        143, 307, 424,  91, 456,  73, 468, 336, 128, 485, 151, 192,  69, 336,
        323, 252, 365,  20, 159, 265, 377, 336, 347, 418, 423, 482,  32, 498,
        257, 234, 427, 204, 258, 282, 399, 318])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[336]],

        [[413]],

        [[ 81]],

        [[308]],

        [[273]],

        [[284]],

        [[ 74]],

        [[265]],

        [[249]],

        [[296]],

        [[ 85]],

        [[237]],

        [[403]],

        [[ 91]],

        [[143]],

        [[307]],

        [[424]],

        [[ 91]],

        [[456]],

        [[ 73]],

        [[468]],

        [[336]],

        [[128]],

        [[485]],

        [[151]],

        [[192]],

        [[ 69]],

        [[336]],

        [[323]],

        [[252]],

        [[365]],

        [[ 20]],

        [[159]],

        [[265]],

        [[377]],

        [[336]],

        [[347]],

        [[418]],

        [[423]],

        [[482]],

        [[ 32]],

        [[498]],

        [[257]],

        [[234]],

        [[427]],

        [[204]],

        [[258]],

        [[282]],

        [[399]],

        [[318]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[24.2375],
        [26.5631],
        [27.0917],
        [28.7406],
        [24.1554],
        [26.7326],
        [29.0527],
        [25.7421],
        [27.6644],
        [26.3468],
        [24.8506],
        [25.2236],
        [24.1238],
        [24.1898],
        [24.8717],
        [21.6508],
        [23.9010],
        [23.7004],
        [21.8435],
        [25.9475],
        [23.2930],
        [27.6633],
        [24.0370],
        [27.8899],
        [24.9954],
        [25.3154],
        [26.7392],
        [26.1148],
        [27.2927],
        [24.2600],
        [27.2411],
        [25.0214],
        [24.7826],
        [27.9431],
        [25.5054],
        [28.1732],
        [26.0768],
        [25.2585],
        [27.1847],
        [26.2001],
        [26.3443],
        [27.4057],
        [27.1834],
        [26.7304],
        [26.2227],
        [32.0219],
        [27.7172],
        [27.0268],
        [25.7478],
        [28.6855]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[24.2375],
        [26.5631],
        [27.0917],
        [28.7406],
        [24.1554],
        [26.7326],
        [29.0527],
        [25.7421],
        [27.6644],
        [26.3468],
        [24.8506],
        [25.2236],
        [24.1238],
        [24.1898],
        [24.8717],
        [21.6508],
        [23.9010],
        [23.7004],
        [21.8435],
        [25.9475],
        [23.2930],
        [27.6633],
        [24.0370],
        [27.8899],
        [24.9954],
        [25.3154],
        [26.7392],
        [26.1148],
        [27.2927],
        [24.2600],
        [27.2411],
        [25.0214],
        [24.7826],
        [27.9431],
        [25.5054],
        [28.1732],
        [26.0768],
        [25.2585],
        [27.1847],
        [26.2001],
        [26.3443],
        [27.4057],
        [27.1834],
        [26.7304],
        [26.2227],
        [32.0219],
        [27.7172],
        [27.0268],
        [25.7478],
        [28.6855]])
Selected blocks appended
Decoding step 26
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([456, 419, 125, 295, 267,  57, 231, 428, 179, 284, 157, 397,  85, 254,
         37, 409, 192,  54, 256, 202,  12, 442,  57, 210, 110, 265, 141, 461,
        348, 352, 312, 331, 388, 462, 323, 240, 147, 112, 343, 435, 242, 161,
        133,  60, 429, 101,  66,  63, 269, 315])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[456]],

        [[419]],

        [[125]],

        [[295]],

        [[267]],

        [[ 57]],

        [[231]],

        [[428]],

        [[179]],

        [[284]],

        [[157]],

        [[397]],

        [[ 85]],

        [[254]],

        [[ 37]],

        [[409]],

        [[192]],

        [[ 54]],

        [[256]],

        [[202]],

        [[ 12]],

        [[442]],

        [[ 57]],

        [[210]],

        [[110]],

        [[265]],

        [[141]],

        [[461]],

        [[348]],

        [[352]],

        [[312]],

        [[331]],

        [[388]],

        [[462]],

        [[323]],

        [[240]],

        [[147]],

        [[112]],

        [[343]],

        [[435]],

        [[242]],

        [[161]],

        [[133]],

        [[ 60]],

        [[429]],

        [[101]],

        [[ 66]],

        [[ 63]],

        [[269]],

        [[315]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[25.3658],
        [27.6726],
        [28.2709],
        [29.5328],
        [25.2675],
        [27.7007],
        [29.8773],
        [26.4540],
        [28.8920],
        [27.5803],
        [25.5632],
        [26.0664],
        [25.4314],
        [25.0813],
        [25.8298],
        [22.6689],
        [24.9793],
        [24.1785],
        [22.7556],
        [26.6762],
        [24.4167],
        [28.6653],
        [24.7054],
        [29.0776],
        [26.3701],
        [26.3665],
        [28.0744],
        [26.9050],
        [28.2634],
        [25.0725],
        [28.2560],
        [26.4451],
        [25.6863],
        [28.7594],
        [26.5378],
        [29.6384],
        [27.4073],
        [26.5486],
        [27.9428],
        [27.6254],
        [27.4971],
        [28.6014],
        [28.4574],
        [27.9725],
        [27.2895],
        [32.8138],
        [28.6925],
        [28.2307],
        [26.7772],
        [30.0463]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[25.3658],
        [27.6726],
        [28.2709],
        [29.5328],
        [25.2675],
        [27.7007],
        [29.8773],
        [26.4540],
        [28.8920],
        [27.5803],
        [25.5632],
        [26.0664],
        [25.4314],
        [25.0813],
        [25.8298],
        [22.6689],
        [24.9793],
        [24.1785],
        [22.7556],
        [26.6762],
        [24.4167],
        [28.6653],
        [24.7054],
        [29.0776],
        [26.3701],
        [26.3665],
        [28.0744],
        [26.9050],
        [28.2634],
        [25.0725],
        [28.2560],
        [26.4451],
        [25.6863],
        [28.7594],
        [26.5378],
        [29.6384],
        [27.4073],
        [26.5486],
        [27.9428],
        [27.6254],
        [27.4971],
        [28.6014],
        [28.4574],
        [27.9725],
        [27.2895],
        [32.8138],
        [28.6925],
        [28.2307],
        [26.7772],
        [30.0463]])
Selected blocks appended
Decoding step 27
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([403,  17, 197, 238, 144,  25, 196, 419, 186,  80, 211, 359,   3,  53,
        266,   2, 210, 454, 236, 111, 238, 264, 401, 160,  78,  74, 147, 110,
        267, 265, 382, 498, 230, 327, 473, 165, 362, 444, 125, 273,  10, 266,
         51, 319, 347, 358, 435, 188, 205, 281])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[403]],

        [[ 17]],

        [[197]],

        [[238]],

        [[144]],

        [[ 25]],

        [[196]],

        [[419]],

        [[186]],

        [[ 80]],

        [[211]],

        [[359]],

        [[  3]],

        [[ 53]],

        [[266]],

        [[  2]],

        [[210]],

        [[454]],

        [[236]],

        [[111]],

        [[238]],

        [[264]],

        [[401]],

        [[160]],

        [[ 78]],

        [[ 74]],

        [[147]],

        [[110]],

        [[267]],

        [[265]],

        [[382]],

        [[498]],

        [[230]],

        [[327]],

        [[473]],

        [[165]],

        [[362]],

        [[444]],

        [[125]],

        [[273]],

        [[ 10]],

        [[266]],

        [[ 51]],

        [[319]],

        [[347]],

        [[358]],

        [[435]],

        [[188]],

        [[205]],

        [[281]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[26.7079],
        [28.7869],
        [28.9202],
        [30.6892],
        [26.2113],
        [28.1385],
        [31.0436],
        [27.5635],
        [30.2839],
        [28.2095],
        [26.5793],
        [27.3539],
        [26.1035],
        [25.5852],
        [26.9618],
        [23.8269],
        [26.2472],
        [24.4753],
        [23.8507],
        [27.6389],
        [25.1521],
        [29.6568],
        [25.5168],
        [30.0430],
        [27.3845],
        [27.3578],
        [28.6318],
        [28.2796],
        [29.2290],
        [26.1235],
        [29.2733],
        [27.8045],
        [26.6313],
        [29.5812],
        [27.5258],
        [30.5953],
        [28.3742],
        [27.6024],
        [28.7312],
        [28.7093],
        [28.6271],
        [29.4884],
        [29.8126],
        [28.7694],
        [28.4211],
        [34.0850],
        [29.5612],
        [29.5758],
        [28.1487],
        [30.8199]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[26.7079],
        [28.7869],
        [28.9202],
        [30.6892],
        [26.2113],
        [28.1385],
        [31.0436],
        [27.5635],
        [30.2839],
        [28.2095],
        [26.5793],
        [27.3539],
        [26.1035],
        [25.5852],
        [26.9618],
        [23.8269],
        [26.2472],
        [24.4753],
        [23.8507],
        [27.6389],
        [25.1521],
        [29.6568],
        [25.5168],
        [30.0430],
        [27.3845],
        [27.3578],
        [28.6318],
        [28.2796],
        [29.2290],
        [26.1235],
        [29.2733],
        [27.8045],
        [26.6313],
        [29.5812],
        [27.5258],
        [30.5953],
        [28.3742],
        [27.6024],
        [28.7312],
        [28.7093],
        [28.6271],
        [29.4884],
        [29.8126],
        [28.7694],
        [28.4211],
        [34.0850],
        [29.5612],
        [29.5758],
        [28.1487],
        [30.8199]])
Selected blocks appended
Decoding step 28
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([374, 371,  42, 153, 486, 262, 133, 382, 414,  60,  65, 114, 189,  47,
          3, 199, 344, 246, 146, 301, 474,  51,  34, 241, 321, 172, 222, 355,
        103, 213, 388, 163, 371,  17,  85,  38, 137, 328,  43, 214, 214, 228,
        472,  45, 425, 479, 355, 436, 461, 404])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[374]],

        [[371]],

        [[ 42]],

        [[153]],

        [[486]],

        [[262]],

        [[133]],

        [[382]],

        [[414]],

        [[ 60]],

        [[ 65]],

        [[114]],

        [[189]],

        [[ 47]],

        [[  3]],

        [[199]],

        [[344]],

        [[246]],

        [[146]],

        [[301]],

        [[474]],

        [[ 51]],

        [[ 34]],

        [[241]],

        [[321]],

        [[172]],

        [[222]],

        [[355]],

        [[103]],

        [[213]],

        [[388]],

        [[163]],

        [[371]],

        [[ 17]],

        [[ 85]],

        [[ 38]],

        [[137]],

        [[328]],

        [[ 43]],

        [[214]],

        [[214]],

        [[228]],

        [[472]],

        [[ 45]],

        [[425]],

        [[479]],

        [[355]],

        [[436]],

        [[461]],

        [[404]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[27.5125],
        [29.7936],
        [30.4028],
        [31.5936],
        [27.2179],
        [29.3423],
        [32.1716],
        [28.6406],
        [31.4299],
        [29.1154],
        [27.0098],
        [28.3974],
        [27.0309],
        [26.6581],
        [27.6339],
        [24.6864],
        [27.2477],
        [25.4767],
        [24.7187],
        [28.4695],
        [25.9796],
        [30.3420],
        [26.6433],
        [31.1866],
        [28.5327],
        [28.5474],
        [29.5241],
        [29.4847],
        [30.1035],
        [27.3979],
        [30.1770],
        [29.1261],
        [27.5145],
        [30.8843],
        [28.6352],
        [31.4742],
        [29.5118],
        [28.7325],
        [30.0066],
        [29.7236],
        [29.2882],
        [30.3802],
        [30.5620],
        [29.6843],
        [29.6690],
        [34.3803],
        [30.7011],
        [30.5137],
        [29.5623],
        [31.6142]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[27.5125],
        [29.7936],
        [30.4028],
        [31.5936],
        [27.2179],
        [29.3423],
        [32.1716],
        [28.6406],
        [31.4299],
        [29.1154],
        [27.0098],
        [28.3974],
        [27.0309],
        [26.6581],
        [27.6339],
        [24.6864],
        [27.2477],
        [25.4767],
        [24.7187],
        [28.4695],
        [25.9796],
        [30.3420],
        [26.6433],
        [31.1866],
        [28.5327],
        [28.5474],
        [29.5241],
        [29.4847],
        [30.1035],
        [27.3979],
        [30.1770],
        [29.1261],
        [27.5145],
        [30.8843],
        [28.6352],
        [31.4742],
        [29.5118],
        [28.7325],
        [30.0066],
        [29.7236],
        [29.2882],
        [30.3802],
        [30.5620],
        [29.6843],
        [29.6690],
        [34.3803],
        [30.7011],
        [30.5137],
        [29.5623],
        [31.6142]])
Selected blocks appended
Decoding step 29
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([322, 470, 393, 108, 141,  29,  79,  53, 437,  70, 368, 475, 442, 213,
        270, 454,  68, 403, 417, 171, 293, 460, 277,  59, 137, 397, 176, 197,
        188, 499, 118, 348,  29, 336, 343, 411, 343, 334, 312, 132, 248, 328,
        313, 378,  14, 129, 434, 260,  32,  12])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[322]],

        [[470]],

        [[393]],

        [[108]],

        [[141]],

        [[ 29]],

        [[ 79]],

        [[ 53]],

        [[437]],

        [[ 70]],

        [[368]],

        [[475]],

        [[442]],

        [[213]],

        [[270]],

        [[454]],

        [[ 68]],

        [[403]],

        [[417]],

        [[171]],

        [[293]],

        [[460]],

        [[277]],

        [[ 59]],

        [[137]],

        [[397]],

        [[176]],

        [[197]],

        [[188]],

        [[499]],

        [[118]],

        [[348]],

        [[ 29]],

        [[336]],

        [[343]],

        [[411]],

        [[343]],

        [[334]],

        [[312]],

        [[132]],

        [[248]],

        [[328]],

        [[313]],

        [[378]],

        [[ 14]],

        [[129]],

        [[434]],

        [[260]],

        [[ 32]],

        [[ 12]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[28.3377],
        [30.5527],
        [31.3769],
        [32.7764],
        [28.2136],
        [30.4403],
        [33.3459],
        [29.8931],
        [32.0177],
        [29.8511],
        [27.6509],
        [29.4334],
        [28.2461],
        [27.5777],
        [28.8038],
        [24.9832],
        [27.9959],
        [26.2459],
        [25.5726],
        [29.6527],
        [26.6880],
        [31.9376],
        [27.8539],
        [32.2788],
        [29.7378],
        [29.3790],
        [30.4244],
        [30.5637],
        [31.2134],
        [28.3577],
        [30.8543],
        [29.9115],
        [28.3228],
        [31.7963],
        [29.3932],
        [32.4339],
        [30.2698],
        [29.7241],
        [31.0216],
        [30.6365],
        [30.0408],
        [31.4715],
        [31.6369],
        [30.8421],
        [30.9207],
        [34.8826],
        [31.4816],
        [31.4346],
        [30.4993],
        [32.5353]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[28.3377],
        [30.5527],
        [31.3769],
        [32.7764],
        [28.2136],
        [30.4403],
        [33.3459],
        [29.8931],
        [32.0177],
        [29.8511],
        [27.6509],
        [29.4334],
        [28.2461],
        [27.5777],
        [28.8038],
        [24.9832],
        [27.9959],
        [26.2459],
        [25.5726],
        [29.6527],
        [26.6880],
        [31.9376],
        [27.8539],
        [32.2788],
        [29.7378],
        [29.3790],
        [30.4244],
        [30.5637],
        [31.2134],
        [28.3577],
        [30.8543],
        [29.9115],
        [28.3228],
        [31.7963],
        [29.3932],
        [32.4339],
        [30.2698],
        [29.7241],
        [31.0216],
        [30.6365],
        [30.0408],
        [31.4715],
        [31.6369],
        [30.8421],
        [30.9207],
        [34.8826],
        [31.4816],
        [31.4346],
        [30.4993],
        [32.5353]])
Selected blocks appended
Decoding step 30
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([409, 359, 439, 118, 243, 352,  21, 332, 493, 270, 181,  12, 127,  54,
        489, 323, 335, 145, 195, 260, 219, 210, 201, 399, 213, 379, 495, 124,
        100, 468, 261, 116,  71, 111, 361,  92, 383, 246,  25, 386, 289,  85,
         15, 255, 428, 282, 469, 276, 498, 321])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[409]],

        [[359]],

        [[439]],

        [[118]],

        [[243]],

        [[352]],

        [[ 21]],

        [[332]],

        [[493]],

        [[270]],

        [[181]],

        [[ 12]],

        [[127]],

        [[ 54]],

        [[489]],

        [[323]],

        [[335]],

        [[145]],

        [[195]],

        [[260]],

        [[219]],

        [[210]],

        [[201]],

        [[399]],

        [[213]],

        [[379]],

        [[495]],

        [[124]],

        [[100]],

        [[468]],

        [[261]],

        [[116]],

        [[ 71]],

        [[111]],

        [[361]],

        [[ 92]],

        [[383]],

        [[246]],

        [[ 25]],

        [[386]],

        [[289]],

        [[ 85]],

        [[ 15]],

        [[255]],

        [[428]],

        [[282]],

        [[469]],

        [[276]],

        [[498]],

        [[321]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[29.4179],
        [31.5966],
        [32.6808],
        [33.9873],
        [28.9856],
        [31.5461],
        [34.3395],
        [30.6222],
        [33.7103],
        [30.9678],
        [28.6044],
        [30.1538],
        [29.6355],
        [28.0559],
        [30.0051],
        [26.1540],
        [28.8406],
        [27.5331],
        [26.2157],
        [30.3837],
        [27.5904],
        [33.1253],
        [29.2348],
        [33.5465],
        [31.0122],
        [30.4914],
        [31.5384],
        [31.4762],
        [32.2773],
        [29.3052],
        [31.7773],
        [31.0429],
        [29.2648],
        [32.5753],
        [30.2135],
        [33.0616],
        [30.9049],
        [30.6266],
        [31.8562],
        [32.0748],
        [31.5588],
        [32.6220],
        [32.5039],
        [31.4460],
        [31.7936],
        [35.9972],
        [32.4911],
        [32.2021],
        [31.4305],
        [33.7038]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[29.4179],
        [31.5966],
        [32.6808],
        [33.9873],
        [28.9856],
        [31.5461],
        [34.3395],
        [30.6222],
        [33.7103],
        [30.9678],
        [28.6044],
        [30.1538],
        [29.6355],
        [28.0559],
        [30.0051],
        [26.1540],
        [28.8406],
        [27.5331],
        [26.2157],
        [30.3837],
        [27.5904],
        [33.1253],
        [29.2348],
        [33.5465],
        [31.0122],
        [30.4914],
        [31.5384],
        [31.4762],
        [32.2773],
        [29.3052],
        [31.7773],
        [31.0429],
        [29.2648],
        [32.5753],
        [30.2135],
        [33.0616],
        [30.9049],
        [30.6266],
        [31.8562],
        [32.0748],
        [31.5588],
        [32.6220],
        [32.5039],
        [31.4460],
        [31.7936],
        [35.9972],
        [32.4911],
        [32.2021],
        [31.4305],
        [33.7038]])
Selected blocks appended
Decoding step 31
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([168, 271, 309, 183,  39, 192, 193, 459, 140, 246,   7, 465, 284,  10,
         21,  53, 325,  27, 344, 351, 491,  68,  20, 360, 242, 319,  72, 345,
        345, 356,  45, 135, 161, 345, 334, 481,  39, 382, 350, 107, 173, 355,
        483, 167, 195, 253, 475,  59, 230, 273])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[168]],

        [[271]],

        [[309]],

        [[183]],

        [[ 39]],

        [[192]],

        [[193]],

        [[459]],

        [[140]],

        [[246]],

        [[  7]],

        [[465]],

        [[284]],

        [[ 10]],

        [[ 21]],

        [[ 53]],

        [[325]],

        [[ 27]],

        [[344]],

        [[351]],

        [[491]],

        [[ 68]],

        [[ 20]],

        [[360]],

        [[242]],

        [[319]],

        [[ 72]],

        [[345]],

        [[345]],

        [[356]],

        [[ 45]],

        [[135]],

        [[161]],

        [[345]],

        [[334]],

        [[481]],

        [[ 39]],

        [[382]],

        [[350]],

        [[107]],

        [[173]],

        [[355]],

        [[483]],

        [[167]],

        [[195]],

        [[253]],

        [[475]],

        [[ 59]],

        [[230]],

        [[273]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[30.0034],
        [32.6052],
        [33.8236],
        [35.0257],
        [29.8925],
        [32.2283],
        [35.1211],
        [31.2839],
        [34.2891],
        [32.2707],
        [29.2211],
        [31.0879],
        [30.8610],
        [28.8599],
        [30.9050],
        [26.6579],
        [29.9547],
        [28.4319],
        [27.2162],
        [31.3289],
        [28.9692],
        [34.0321],
        [30.4659],
        [34.2737],
        [32.2471],
        [31.5947],
        [33.0428],
        [32.1863],
        [32.9874],
        [30.4904],
        [32.7385],
        [31.9745],
        [30.4302],
        [33.6163],
        [31.2051],
        [33.9947],
        [31.9297],
        [31.6438],
        [32.8113],
        [32.6687],
        [32.1834],
        [33.7618],
        [33.4621],
        [32.1623],
        [32.5943],
        [37.0422],
        [33.6995],
        [32.8513],
        [32.6187],
        [34.6316]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[30.0034],
        [32.6052],
        [33.8236],
        [35.0257],
        [29.8925],
        [32.2283],
        [35.1211],
        [31.2839],
        [34.2891],
        [32.2707],
        [29.2211],
        [31.0879],
        [30.8610],
        [28.8599],
        [30.9050],
        [26.6579],
        [29.9547],
        [28.4319],
        [27.2162],
        [31.3289],
        [28.9692],
        [34.0321],
        [30.4659],
        [34.2737],
        [32.2471],
        [31.5947],
        [33.0428],
        [32.1863],
        [32.9874],
        [30.4904],
        [32.7385],
        [31.9745],
        [30.4302],
        [33.6163],
        [31.2051],
        [33.9947],
        [31.9297],
        [31.6438],
        [32.8113],
        [32.6687],
        [32.1834],
        [33.7618],
        [33.4621],
        [32.1623],
        [32.5943],
        [37.0422],
        [33.6995],
        [32.8513],
        [32.6187],
        [34.6316]])
Selected blocks appended
Decoding step 32
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 58,  46, 405, 438, 350,  19, 166,  57,  73, 241, 476, 298,   9, 384,
        154, 403,  76, 307, 245, 183, 311, 377, 150, 411, 158, 374, 205, 373,
        174,  47, 133, 365, 323, 400, 182, 196, 241, 117, 470, 250,  31, 304,
        169, 225, 250,  33,  61, 184,  59, 345])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 58]],

        [[ 46]],

        [[405]],

        [[438]],

        [[350]],

        [[ 19]],

        [[166]],

        [[ 57]],

        [[ 73]],

        [[241]],

        [[476]],

        [[298]],

        [[  9]],

        [[384]],

        [[154]],

        [[403]],

        [[ 76]],

        [[307]],

        [[245]],

        [[183]],

        [[311]],

        [[377]],

        [[150]],

        [[411]],

        [[158]],

        [[374]],

        [[205]],

        [[373]],

        [[174]],

        [[ 47]],

        [[133]],

        [[365]],

        [[323]],

        [[400]],

        [[182]],

        [[196]],

        [[241]],

        [[117]],

        [[470]],

        [[250]],

        [[ 31]],

        [[304]],

        [[169]],

        [[225]],

        [[250]],

        [[ 33]],

        [[ 61]],

        [[184]],

        [[ 59]],

        [[345]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[30.6974],
        [33.9554],
        [34.5032],
        [36.1742],
        [31.2851],
        [33.1916],
        [36.4733],
        [32.2521],
        [35.2705],
        [33.1899],
        [29.9349],
        [31.9504],
        [31.3789],
        [29.3619],
        [31.6851],
        [27.4271],
        [30.7960],
        [29.5350],
        [27.7658],
        [32.5762],
        [30.2841],
        [34.8103],
        [31.5113],
        [35.3260],
        [33.0650],
        [32.2323],
        [34.1339],
        [32.7974],
        [34.1895],
        [31.3443],
        [33.5290],
        [32.9261],
        [31.4626],
        [34.4713],
        [32.1638],
        [34.9828],
        [32.7146],
        [32.5770],
        [33.2479],
        [33.7780],
        [33.1245],
        [34.9513],
        [34.2590],
        [33.2284],
        [33.8051],
        [38.1419],
        [35.1542],
        [33.9990],
        [33.2679],
        [35.9633]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[30.6974],
        [33.9554],
        [34.5032],
        [36.1742],
        [31.2851],
        [33.1916],
        [36.4733],
        [32.2521],
        [35.2705],
        [33.1899],
        [29.9349],
        [31.9504],
        [31.3789],
        [29.3619],
        [31.6851],
        [27.4271],
        [30.7960],
        [29.5350],
        [27.7658],
        [32.5762],
        [30.2841],
        [34.8103],
        [31.5113],
        [35.3260],
        [33.0650],
        [32.2323],
        [34.1339],
        [32.7974],
        [34.1895],
        [31.3443],
        [33.5290],
        [32.9261],
        [31.4626],
        [34.4713],
        [32.1638],
        [34.9828],
        [32.7146],
        [32.5770],
        [33.2479],
        [33.7780],
        [33.1245],
        [34.9513],
        [34.2590],
        [33.2284],
        [33.8051],
        [38.1419],
        [35.1542],
        [33.9990],
        [33.2679],
        [35.9633]])
Selected blocks appended
Decoding step 33
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([254, 314, 295, 406,  73,  13, 462, 363, 227, 377, 248, 494, 258,  46,
        286, 334, 137,  69, 133, 479, 374, 465, 256, 451, 348,  86, 127, 265,
         41, 423, 151,   3, 338, 294,   4, 428, 163, 484, 207,  86,  29,  12,
        392, 370,  92, 117, 220, 450,  76, 415])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[254]],

        [[314]],

        [[295]],

        [[406]],

        [[ 73]],

        [[ 13]],

        [[462]],

        [[363]],

        [[227]],

        [[377]],

        [[248]],

        [[494]],

        [[258]],

        [[ 46]],

        [[286]],

        [[334]],

        [[137]],

        [[ 69]],

        [[133]],

        [[479]],

        [[374]],

        [[465]],

        [[256]],

        [[451]],

        [[348]],

        [[ 86]],

        [[127]],

        [[265]],

        [[ 41]],

        [[423]],

        [[151]],

        [[  3]],

        [[338]],

        [[294]],

        [[  4]],

        [[428]],

        [[163]],

        [[484]],

        [[207]],

        [[ 86]],

        [[ 29]],

        [[ 12]],

        [[392]],

        [[370]],

        [[ 92]],

        [[117]],

        [[220]],

        [[450]],

        [[ 76]],

        [[415]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[31.2690],
        [35.2740],
        [35.2953],
        [37.1636],
        [32.2665],
        [34.4551],
        [38.0724],
        [32.8146],
        [36.0383],
        [34.3436],
        [31.0072],
        [32.6075],
        [32.3598],
        [30.0594],
        [32.8948],
        [28.6620],
        [31.5207],
        [30.5146],
        [28.0978],
        [33.4160],
        [30.9217],
        [35.7502],
        [32.2658],
        [36.2050],
        [34.0356],
        [33.0129],
        [35.6094],
        [33.8484],
        [35.3952],
        [32.5331],
        [34.4971],
        [34.1063],
        [32.5979],
        [35.2588],
        [33.1109],
        [36.2167],
        [34.0362],
        [33.7038],
        [34.3671],
        [34.5661],
        [34.8916],
        [35.8725],
        [35.2241],
        [34.2400],
        [35.3929],
        [38.9108],
        [36.0907],
        [35.1666],
        [34.3936],
        [37.4504]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[31.2690],
        [35.2740],
        [35.2953],
        [37.1636],
        [32.2665],
        [34.4551],
        [38.0724],
        [32.8146],
        [36.0383],
        [34.3436],
        [31.0072],
        [32.6075],
        [32.3598],
        [30.0594],
        [32.8948],
        [28.6620],
        [31.5207],
        [30.5146],
        [28.0978],
        [33.4160],
        [30.9217],
        [35.7502],
        [32.2658],
        [36.2050],
        [34.0356],
        [33.0129],
        [35.6094],
        [33.8484],
        [35.3952],
        [32.5331],
        [34.4971],
        [34.1063],
        [32.5979],
        [35.2588],
        [33.1109],
        [36.2167],
        [34.0362],
        [33.7038],
        [34.3671],
        [34.5661],
        [34.8916],
        [35.8725],
        [35.2241],
        [34.2400],
        [35.3929],
        [38.9108],
        [36.0907],
        [35.1666],
        [34.3936],
        [37.4504]])
Selected blocks appended
Decoding step 34
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([413, 392, 133, 120, 381,  83, 244, 491,  11,  51,  16, 483, 207, 301,
        498, 235, 122, 359, 140,   0, 485, 475, 464, 204, 393, 263,  79,  16,
         57, 138, 236, 144, 358, 281, 244, 305, 412, 125, 261, 253, 205, 103,
        434,   5, 137, 164,  44,  49, 284, 431])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[413]],

        [[392]],

        [[133]],

        [[120]],

        [[381]],

        [[ 83]],

        [[244]],

        [[491]],

        [[ 11]],

        [[ 51]],

        [[ 16]],

        [[483]],

        [[207]],

        [[301]],

        [[498]],

        [[235]],

        [[122]],

        [[359]],

        [[140]],

        [[  0]],

        [[485]],

        [[475]],

        [[464]],

        [[204]],

        [[393]],

        [[263]],

        [[ 79]],

        [[ 16]],

        [[ 57]],

        [[138]],

        [[236]],

        [[144]],

        [[358]],

        [[281]],

        [[244]],

        [[305]],

        [[412]],

        [[125]],

        [[261]],

        [[253]],

        [[205]],

        [[103]],

        [[434]],

        [[  5]],

        [[137]],

        [[164]],

        [[ 44]],

        [[ 49]],

        [[284]],

        [[431]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[32.5813],
        [36.2377],
        [36.4233],
        [38.0029],
        [33.3396],
        [35.1811],
        [39.3872],
        [33.6124],
        [37.0484],
        [35.4209],
        [32.5153],
        [33.8496],
        [33.2648],
        [30.8901],
        [34.0283],
        [29.7360],
        [32.7846],
        [31.8022],
        [28.9423],
        [34.5025],
        [32.0387],
        [36.6194],
        [33.3707],
        [36.7565],
        [35.5997],
        [34.5119],
        [36.8987],
        [35.4450],
        [36.0636],
        [33.5760],
        [35.3234],
        [34.9487],
        [33.5987],
        [36.4311],
        [34.2964],
        [37.4129],
        [34.9877],
        [34.4923],
        [35.2901],
        [35.5040],
        [36.2630],
        [36.6065],
        [36.0046],
        [35.4152],
        [36.4507],
        [39.9255],
        [37.3160],
        [35.9968],
        [35.2749],
        [38.1750]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[32.5813],
        [36.2377],
        [36.4233],
        [38.0029],
        [33.3396],
        [35.1811],
        [39.3872],
        [33.6124],
        [37.0484],
        [35.4209],
        [32.5153],
        [33.8496],
        [33.2648],
        [30.8901],
        [34.0283],
        [29.7360],
        [32.7846],
        [31.8022],
        [28.9423],
        [34.5025],
        [32.0387],
        [36.6194],
        [33.3707],
        [36.7565],
        [35.5997],
        [34.5119],
        [36.8987],
        [35.4450],
        [36.0636],
        [33.5760],
        [35.3234],
        [34.9487],
        [33.5987],
        [36.4311],
        [34.2964],
        [37.4129],
        [34.9877],
        [34.4923],
        [35.2901],
        [35.5040],
        [36.2630],
        [36.6065],
        [36.0046],
        [35.4152],
        [36.4507],
        [39.9255],
        [37.3160],
        [35.9968],
        [35.2749],
        [38.1750]])
Selected blocks appended
Decoding step 35
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([255, 464, 270, 283, 323, 335, 393,  36, 298,  23, 336, 288, 157,  65,
        222, 218, 187, 184, 265, 203,  99, 113, 370, 132,  44, 364, 337, 118,
        292, 179, 413, 119, 282, 335,  71,  14, 369, 259, 177, 295, 222, 473,
        113, 398, 140,  14,  62, 243, 476, 335])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[255]],

        [[464]],

        [[270]],

        [[283]],

        [[323]],

        [[335]],

        [[393]],

        [[ 36]],

        [[298]],

        [[ 23]],

        [[336]],

        [[288]],

        [[157]],

        [[ 65]],

        [[222]],

        [[218]],

        [[187]],

        [[184]],

        [[265]],

        [[203]],

        [[ 99]],

        [[113]],

        [[370]],

        [[132]],

        [[ 44]],

        [[364]],

        [[337]],

        [[118]],

        [[292]],

        [[179]],

        [[413]],

        [[119]],

        [[282]],

        [[335]],

        [[ 71]],

        [[ 14]],

        [[369]],

        [[259]],

        [[177]],

        [[295]],

        [[222]],

        [[473]],

        [[113]],

        [[398]],

        [[140]],

        [[ 14]],

        [[ 62]],

        [[243]],

        [[476]],

        [[335]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[33.3652],
        [37.2693],
        [37.5400],
        [38.9150],
        [34.2592],
        [35.9207],
        [40.3612],
        [34.5333],
        [37.9834],
        [36.5650],
        [33.4539],
        [34.8215],
        [33.9774],
        [31.3207],
        [34.7216],
        [30.1752],
        [34.0505],
        [32.8802],
        [29.6012],
        [35.3532],
        [33.0110],
        [37.3638],
        [34.3096],
        [37.6017],
        [36.7227],
        [35.3609],
        [37.0354],
        [36.3313],
        [37.1949],
        [35.0651],
        [36.4525],
        [35.9467],
        [34.2415],
        [37.3699],
        [35.2384],
        [38.6986],
        [36.0720],
        [35.6758],
        [36.2286],
        [36.9210],
        [36.9391],
        [37.3638],
        [36.7770],
        [36.6691],
        [37.5189],
        [41.1772],
        [38.2889],
        [36.3092],
        [36.1865],
        [39.3619]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[33.3652],
        [37.2693],
        [37.5400],
        [38.9150],
        [34.2592],
        [35.9207],
        [40.3612],
        [34.5333],
        [37.9834],
        [36.5650],
        [33.4539],
        [34.8215],
        [33.9774],
        [31.3207],
        [34.7216],
        [30.1752],
        [34.0505],
        [32.8802],
        [29.6012],
        [35.3532],
        [33.0110],
        [37.3638],
        [34.3096],
        [37.6017],
        [36.7227],
        [35.3609],
        [37.0354],
        [36.3313],
        [37.1949],
        [35.0651],
        [36.4525],
        [35.9467],
        [34.2415],
        [37.3699],
        [35.2384],
        [38.6986],
        [36.0720],
        [35.6758],
        [36.2286],
        [36.9210],
        [36.9391],
        [37.3638],
        [36.7770],
        [36.6691],
        [37.5189],
        [41.1772],
        [38.2889],
        [36.3092],
        [36.1865],
        [39.3619]])
Selected blocks appended
Decoding step 36
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([223, 129, 427,  43, 340, 350, 496, 433, 262, 200, 169,  61,  80, 168,
         70,  43,  36, 139,  36, 449, 305, 226, 389, 357, 494,  68, 113,  34,
        347, 203,  15, 287,  20, 328, 242,   8, 131, 469, 151, 479, 172, 407,
        480, 478,  38,   8, 185,  27, 418, 217])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[223]],

        [[129]],

        [[427]],

        [[ 43]],

        [[340]],

        [[350]],

        [[496]],

        [[433]],

        [[262]],

        [[200]],

        [[169]],

        [[ 61]],

        [[ 80]],

        [[168]],

        [[ 70]],

        [[ 43]],

        [[ 36]],

        [[139]],

        [[ 36]],

        [[449]],

        [[305]],

        [[226]],

        [[389]],

        [[357]],

        [[494]],

        [[ 68]],

        [[113]],

        [[ 34]],

        [[347]],

        [[203]],

        [[ 15]],

        [[287]],

        [[ 20]],

        [[328]],

        [[242]],

        [[  8]],

        [[131]],

        [[469]],

        [[151]],

        [[479]],

        [[172]],

        [[407]],

        [[480]],

        [[478]],

        [[ 38]],

        [[  8]],

        [[185]],

        [[ 27]],

        [[418]],

        [[217]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[34.0951],
        [38.2844],
        [38.8439],
        [40.2988],
        [34.8778],
        [37.3133],
        [41.5447],
        [35.4056],
        [39.1871],
        [37.4981],
        [34.6040],
        [35.6109],
        [34.9303],
        [32.0439],
        [35.7290],
        [31.2148],
        [34.9082],
        [33.5264],
        [30.4588],
        [36.3321],
        [33.9946],
        [38.6089],
        [35.1751],
        [38.7439],
        [37.7004],
        [36.2676],
        [37.7798],
        [37.4578],
        [38.0338],
        [36.2952],
        [37.3009],
        [36.7475],
        [35.4136],
        [38.5001],
        [36.5189],
        [39.9527],
        [37.2649],
        [36.7779],
        [37.1967],
        [38.0428],
        [37.7716],
        [38.6871],
        [37.7294],
        [37.6112],
        [38.3454],
        [41.9664],
        [38.9064],
        [37.2476],
        [37.2543],
        [39.9845]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[34.0951],
        [38.2844],
        [38.8439],
        [40.2988],
        [34.8778],
        [37.3133],
        [41.5447],
        [35.4056],
        [39.1871],
        [37.4981],
        [34.6040],
        [35.6109],
        [34.9303],
        [32.0439],
        [35.7290],
        [31.2148],
        [34.9082],
        [33.5264],
        [30.4588],
        [36.3321],
        [33.9946],
        [38.6089],
        [35.1751],
        [38.7439],
        [37.7004],
        [36.2676],
        [37.7798],
        [37.4578],
        [38.0338],
        [36.2952],
        [37.3009],
        [36.7475],
        [35.4136],
        [38.5001],
        [36.5189],
        [39.9527],
        [37.2649],
        [36.7779],
        [37.1967],
        [38.0428],
        [37.7716],
        [38.6871],
        [37.7294],
        [37.6112],
        [38.3454],
        [41.9664],
        [38.9064],
        [37.2476],
        [37.2543],
        [39.9845]])
Selected blocks appended
Decoding step 37
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 46, 348, 411, 119, 218, 130, 261,  52, 347, 244, 281, 413, 109, 410,
        487, 390, 340, 156, 273, 217, 470, 300, 354, 189, 427, 126,  20, 295,
         37, 120, 177,  80, 394, 360, 347, 257, 218, 411, 382, 456, 112, 454,
        225, 432, 253,  60, 478, 122, 144, 283])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 46]],

        [[348]],

        [[411]],

        [[119]],

        [[218]],

        [[130]],

        [[261]],

        [[ 52]],

        [[347]],

        [[244]],

        [[281]],

        [[413]],

        [[109]],

        [[410]],

        [[487]],

        [[390]],

        [[340]],

        [[156]],

        [[273]],

        [[217]],

        [[470]],

        [[300]],

        [[354]],

        [[189]],

        [[427]],

        [[126]],

        [[ 20]],

        [[295]],

        [[ 37]],

        [[120]],

        [[177]],

        [[ 80]],

        [[394]],

        [[360]],

        [[347]],

        [[257]],

        [[218]],

        [[411]],

        [[382]],

        [[456]],

        [[112]],

        [[454]],

        [[225]],

        [[432]],

        [[253]],

        [[ 60]],

        [[478]],

        [[122]],

        [[144]],

        [[283]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[35.4453],
        [39.6271],
        [39.4326],
        [41.2996],
        [35.7573],
        [38.8366],
        [42.2624],
        [36.8606],
        [40.4382],
        [38.8128],
        [35.6649],
        [36.4135],
        [35.6734],
        [33.4742],
        [36.8609],
        [32.2514],
        [36.2920],
        [35.3075],
        [31.6710],
        [37.2760],
        [34.5378],
        [40.0872],
        [36.4175],
        [39.5567],
        [38.8093],
        [37.7312],
        [39.0110],
        [38.4488],
        [38.5071],
        [37.3734],
        [38.2394],
        [37.8736],
        [36.1054],
        [39.6435],
        [37.8278],
        [40.6810],
        [38.4550],
        [37.7375],
        [38.2139],
        [39.2914],
        [38.6392],
        [39.3726],
        [38.7954],
        [38.2104],
        [39.3904],
        [43.2085],
        [39.8485],
        [38.4129],
        [38.2432],
        [41.0408]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[35.4453],
        [39.6271],
        [39.4326],
        [41.2996],
        [35.7573],
        [38.8366],
        [42.2624],
        [36.8606],
        [40.4382],
        [38.8128],
        [35.6649],
        [36.4135],
        [35.6734],
        [33.4742],
        [36.8609],
        [32.2514],
        [36.2920],
        [35.3075],
        [31.6710],
        [37.2760],
        [34.5378],
        [40.0872],
        [36.4175],
        [39.5567],
        [38.8093],
        [37.7312],
        [39.0110],
        [38.4488],
        [38.5071],
        [37.3734],
        [38.2394],
        [37.8736],
        [36.1054],
        [39.6435],
        [37.8278],
        [40.6810],
        [38.4550],
        [37.7375],
        [38.2139],
        [39.2914],
        [38.6392],
        [39.3726],
        [38.7954],
        [38.2104],
        [39.3904],
        [43.2085],
        [39.8485],
        [38.4129],
        [38.2432],
        [41.0408]])
Selected blocks appended
Decoding step 38
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([124, 212, 392, 349, 226, 458, 455, 408, 481, 421, 432, 121, 152, 327,
        223, 193, 218, 132, 347, 372, 322,  11, 126,  84, 359, 318, 483, 114,
        106,  92, 248,  25, 184, 323, 139, 219, 273, 243, 397, 400, 275, 310,
         97, 296,   7, 440, 133,  56, 481, 394])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[124]],

        [[212]],

        [[392]],

        [[349]],

        [[226]],

        [[458]],

        [[455]],

        [[408]],

        [[481]],

        [[421]],

        [[432]],

        [[121]],

        [[152]],

        [[327]],

        [[223]],

        [[193]],

        [[218]],

        [[132]],

        [[347]],

        [[372]],

        [[322]],

        [[ 11]],

        [[126]],

        [[ 84]],

        [[359]],

        [[318]],

        [[483]],

        [[114]],

        [[106]],

        [[ 92]],

        [[248]],

        [[ 25]],

        [[184]],

        [[323]],

        [[139]],

        [[219]],

        [[273]],

        [[243]],

        [[397]],

        [[400]],

        [[275]],

        [[310]],

        [[ 97]],

        [[296]],

        [[  7]],

        [[440]],

        [[133]],

        [[ 56]],

        [[481]],

        [[394]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[36.5164],
        [40.3571],
        [40.3963],
        [42.4956],
        [37.1434],
        [39.4729],
        [43.4756],
        [37.6921],
        [40.8511],
        [39.8725],
        [36.6158],
        [37.0431],
        [36.6693],
        [34.4837],
        [37.9183],
        [32.8278],
        [36.7313],
        [36.3081],
        [32.4353],
        [38.2124],
        [35.7237],
        [41.1876],
        [37.8811],
        [40.3356],
        [39.4889],
        [39.0525],
        [39.9892],
        [39.7066],
        [39.1383],
        [37.9292],
        [39.0116],
        [38.7082],
        [37.6402],
        [40.6759],
        [38.9193],
        [41.6408],
        [39.5389],
        [38.6451],
        [39.5911],
        [40.1464],
        [39.4988],
        [40.5464],
        [39.7792],
        [38.6964],
        [40.4826],
        [44.1259],
        [41.1225],
        [39.1631],
        [39.4830],
        [41.8781]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[36.5164],
        [40.3571],
        [40.3963],
        [42.4956],
        [37.1434],
        [39.4729],
        [43.4756],
        [37.6921],
        [40.8511],
        [39.8725],
        [36.6158],
        [37.0431],
        [36.6693],
        [34.4837],
        [37.9183],
        [32.8278],
        [36.7313],
        [36.3081],
        [32.4353],
        [38.2124],
        [35.7237],
        [41.1876],
        [37.8811],
        [40.3356],
        [39.4889],
        [39.0525],
        [39.9892],
        [39.7066],
        [39.1383],
        [37.9292],
        [39.0116],
        [38.7082],
        [37.6402],
        [40.6759],
        [38.9193],
        [41.6408],
        [39.5389],
        [38.6451],
        [39.5911],
        [40.1464],
        [39.4988],
        [40.5464],
        [39.7792],
        [38.6964],
        [40.4826],
        [44.1259],
        [41.1225],
        [39.1631],
        [39.4830],
        [41.8781]])
Selected blocks appended
Decoding step 39
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([180, 266, 409, 489, 462, 384, 479, 375, 300, 458,  42,  88, 255, 253,
        141,   3, 450, 430, 455,  35, 170, 311, 155, 170, 146, 475,   3, 322,
         47, 430, 119, 212, 429, 138, 183, 148, 215, 167,  55, 112,  97, 423,
        173, 434, 493, 179,  72, 302, 411, 437])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[180]],

        [[266]],

        [[409]],

        [[489]],

        [[462]],

        [[384]],

        [[479]],

        [[375]],

        [[300]],

        [[458]],

        [[ 42]],

        [[ 88]],

        [[255]],

        [[253]],

        [[141]],

        [[  3]],

        [[450]],

        [[430]],

        [[455]],

        [[ 35]],

        [[170]],

        [[311]],

        [[155]],

        [[170]],

        [[146]],

        [[475]],

        [[  3]],

        [[322]],

        [[ 47]],

        [[430]],

        [[119]],

        [[212]],

        [[429]],

        [[138]],

        [[183]],

        [[148]],

        [[215]],

        [[167]],

        [[ 55]],

        [[112]],

        [[ 97]],

        [[423]],

        [[173]],

        [[434]],

        [[493]],

        [[179]],

        [[ 72]],

        [[302]],

        [[411]],

        [[437]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[37.8790],
        [41.4263],
        [41.4765],
        [43.3839],
        [38.7425],
        [40.2647],
        [44.3005],
        [38.6395],
        [41.7010],
        [40.5089],
        [37.2299],
        [38.4364],
        [37.4128],
        [35.5839],
        [38.7954],
        [33.4999],
        [37.7036],
        [37.3338],
        [33.4346],
        [39.4985],
        [36.8278],
        [42.5025],
        [38.9466],
        [41.4398],
        [40.4040],
        [39.9217],
        [41.2636],
        [40.8926],
        [39.9922],
        [39.1575],
        [40.0096],
        [39.5487],
        [38.9122],
        [41.6091],
        [39.4953],
        [42.2539],
        [40.6568],
        [39.2685],
        [40.9996],
        [41.4364],
        [40.4827],
        [42.0729],
        [40.4038],
        [39.4769],
        [41.4961],
        [45.0611],
        [42.2579],
        [40.7989],
        [40.6841],
        [43.0026]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[37.8790],
        [41.4263],
        [41.4765],
        [43.3839],
        [38.7425],
        [40.2647],
        [44.3005],
        [38.6395],
        [41.7010],
        [40.5089],
        [37.2299],
        [38.4364],
        [37.4128],
        [35.5839],
        [38.7954],
        [33.4999],
        [37.7036],
        [37.3338],
        [33.4346],
        [39.4985],
        [36.8278],
        [42.5025],
        [38.9466],
        [41.4398],
        [40.4040],
        [39.9217],
        [41.2636],
        [40.8926],
        [39.9922],
        [39.1575],
        [40.0096],
        [39.5487],
        [38.9122],
        [41.6091],
        [39.4953],
        [42.2539],
        [40.6568],
        [39.2685],
        [40.9996],
        [41.4364],
        [40.4827],
        [42.0729],
        [40.4038],
        [39.4769],
        [41.4961],
        [45.0611],
        [42.2579],
        [40.7989],
        [40.6841],
        [43.0026]])
Selected blocks appended
Decoding step 40
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([213, 244, 470,  22, 111,  77, 490, 436, 250, 495, 419, 374, 213, 193,
        157, 396, 437, 265,  16, 353, 230, 207,  60,  18, 325, 387, 124,  35,
          0, 113, 369, 194, 218, 447, 289, 440, 346, 462, 404, 393, 473, 145,
        411,  30, 244, 136, 490, 226, 282, 317])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[213]],

        [[244]],

        [[470]],

        [[ 22]],

        [[111]],

        [[ 77]],

        [[490]],

        [[436]],

        [[250]],

        [[495]],

        [[419]],

        [[374]],

        [[213]],

        [[193]],

        [[157]],

        [[396]],

        [[437]],

        [[265]],

        [[ 16]],

        [[353]],

        [[230]],

        [[207]],

        [[ 60]],

        [[ 18]],

        [[325]],

        [[387]],

        [[124]],

        [[ 35]],

        [[  0]],

        [[113]],

        [[369]],

        [[194]],

        [[218]],

        [[447]],

        [[289]],

        [[440]],

        [[346]],

        [[462]],

        [[404]],

        [[393]],

        [[473]],

        [[145]],

        [[411]],

        [[ 30]],

        [[244]],

        [[136]],

        [[490]],

        [[226]],

        [[282]],

        [[317]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[38.4554],
        [42.7410],
        [42.2356],
        [44.3175],
        [39.8013],
        [41.2579],
        [45.5814],
        [39.2895],
        [42.5887],
        [41.4677],
        [37.9046],
        [38.8901],
        [38.3325],
        [36.1603],
        [39.5080],
        [34.2997],
        [38.2871],
        [37.9926],
        [34.9427],
        [40.3743],
        [37.6407],
        [43.5040],
        [40.0237],
        [42.5641],
        [41.5050],
        [41.2518],
        [42.1761],
        [41.6343],
        [41.1342],
        [39.9019],
        [41.0939],
        [40.5000],
        [40.1023],
        [42.5722],
        [40.9410],
        [43.1760],
        [41.6044],
        [40.0848],
        [42.1874],
        [42.6565],
        [41.2400],
        [43.0040],
        [41.6050],
        [40.1232],
        [42.3438],
        [46.1709],
        [43.4016],
        [41.8727],
        [41.7988],
        [43.9042]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[38.4554],
        [42.7410],
        [42.2356],
        [44.3175],
        [39.8013],
        [41.2579],
        [45.5814],
        [39.2895],
        [42.5887],
        [41.4677],
        [37.9046],
        [38.8901],
        [38.3325],
        [36.1603],
        [39.5080],
        [34.2997],
        [38.2871],
        [37.9926],
        [34.9427],
        [40.3743],
        [37.6407],
        [43.5040],
        [40.0237],
        [42.5641],
        [41.5050],
        [41.2518],
        [42.1761],
        [41.6343],
        [41.1342],
        [39.9019],
        [41.0939],
        [40.5000],
        [40.1023],
        [42.5722],
        [40.9410],
        [43.1760],
        [41.6044],
        [40.0848],
        [42.1874],
        [42.6565],
        [41.2400],
        [43.0040],
        [41.6050],
        [40.1232],
        [42.3438],
        [46.1709],
        [43.4016],
        [41.8727],
        [41.7988],
        [43.9042]])
Selected blocks appended
Decoding step 41
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([237, 204, 237,   6, 341, 238, 253, 370, 234, 277, 483, 186, 472, 226,
        297, 189, 478, 462, 424, 477,  13, 496, 427,  15, 255, 426, 359, 425,
        401, 293,  90, 252, 270, 490, 437,  80, 133, 397, 471, 218, 116, 178,
        245, 462, 372, 270, 480,   8, 188, 129])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[237]],

        [[204]],

        [[237]],

        [[  6]],

        [[341]],

        [[238]],

        [[253]],

        [[370]],

        [[234]],

        [[277]],

        [[483]],

        [[186]],

        [[472]],

        [[226]],

        [[297]],

        [[189]],

        [[478]],

        [[462]],

        [[424]],

        [[477]],

        [[ 13]],

        [[496]],

        [[427]],

        [[ 15]],

        [[255]],

        [[426]],

        [[359]],

        [[425]],

        [[401]],

        [[293]],

        [[ 90]],

        [[252]],

        [[270]],

        [[490]],

        [[437]],

        [[ 80]],

        [[133]],

        [[397]],

        [[471]],

        [[218]],

        [[116]],

        [[178]],

        [[245]],

        [[462]],

        [[372]],

        [[270]],

        [[480]],

        [[  8]],

        [[188]],

        [[129]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[39.6917],
        [43.6384],
        [43.4719],
        [45.2776],
        [40.6197],
        [42.4144],
        [46.3878],
        [40.2596],
        [43.9195],
        [42.8598],
        [39.1466],
        [40.1200],
        [38.9842],
        [37.5261],
        [40.4581],
        [35.2271],
        [39.4257],
        [38.8932],
        [35.6482],
        [41.0888],
        [38.8732],
        [44.2165],
        [41.1325],
        [43.4898],
        [42.3380],
        [42.2973],
        [42.8557],
        [43.3272],
        [41.9456],
        [40.6103],
        [42.1095],
        [41.5758],
        [41.0433],
        [43.2742],
        [41.6794],
        [44.3022],
        [42.3949],
        [41.4620],
        [43.1652],
        [43.8466],
        [42.3598],
        [43.9164],
        [42.2012],
        [41.2886],
        [43.0497],
        [47.0099],
        [44.3540],
        [42.6620],
        [43.1440],
        [44.4064]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[39.6917],
        [43.6384],
        [43.4719],
        [45.2776],
        [40.6197],
        [42.4144],
        [46.3878],
        [40.2596],
        [43.9195],
        [42.8598],
        [39.1466],
        [40.1200],
        [38.9842],
        [37.5261],
        [40.4581],
        [35.2271],
        [39.4257],
        [38.8932],
        [35.6482],
        [41.0888],
        [38.8732],
        [44.2165],
        [41.1325],
        [43.4898],
        [42.3380],
        [42.2973],
        [42.8557],
        [43.3272],
        [41.9456],
        [40.6103],
        [42.1095],
        [41.5758],
        [41.0433],
        [43.2742],
        [41.6794],
        [44.3022],
        [42.3949],
        [41.4620],
        [43.1652],
        [43.8466],
        [42.3598],
        [43.9164],
        [42.2012],
        [41.2886],
        [43.0497],
        [47.0099],
        [44.3540],
        [42.6620],
        [43.1440],
        [44.4064]])
Selected blocks appended
Decoding step 42
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([128,  42,  67, 327, 394, 344, 111, 152, 427, 252,  73, 337, 193, 156,
        320,  50, 408, 134, 431, 463, 372, 471, 283, 233, 179, 209, 428, 362,
        368, 453, 397,  86, 364, 162, 279, 144,  92, 340,  41, 464, 274, 139,
        162, 496, 478, 460, 445, 262, 496, 201])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[128]],

        [[ 42]],

        [[ 67]],

        [[327]],

        [[394]],

        [[344]],

        [[111]],

        [[152]],

        [[427]],

        [[252]],

        [[ 73]],

        [[337]],

        [[193]],

        [[156]],

        [[320]],

        [[ 50]],

        [[408]],

        [[134]],

        [[431]],

        [[463]],

        [[372]],

        [[471]],

        [[283]],

        [[233]],

        [[179]],

        [[209]],

        [[428]],

        [[362]],

        [[368]],

        [[453]],

        [[397]],

        [[ 86]],

        [[364]],

        [[162]],

        [[279]],

        [[144]],

        [[ 92]],

        [[340]],

        [[ 41]],

        [[464]],

        [[274]],

        [[139]],

        [[162]],

        [[496]],

        [[478]],

        [[460]],

        [[445]],

        [[262]],

        [[496]],

        [[201]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[40.9192],
        [45.1211],
        [45.0472],
        [45.9298],
        [41.5876],
        [43.7761],
        [47.4465],
        [41.5533],
        [45.2234],
        [43.6074],
        [40.0462],
        [41.3828],
        [39.5606],
        [39.3072],
        [41.8959],
        [36.2721],
        [40.4251],
        [39.6920],
        [36.5294],
        [41.8143],
        [39.8033],
        [45.1144],
        [42.0407],
        [44.8520],
        [43.8270],
        [43.3120],
        [43.7102],
        [43.8227],
        [43.0816],
        [41.9076],
        [43.4867],
        [42.3639],
        [41.8511],
        [44.1713],
        [42.7169],
        [45.1446],
        [43.0227],
        [42.3181],
        [43.7685],
        [45.0813],
        [43.2051],
        [45.0359],
        [43.1980],
        [42.0841],
        [43.9919],
        [48.0554],
        [45.5660],
        [43.8125],
        [43.9395],
        [45.5776]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[40.9192],
        [45.1211],
        [45.0472],
        [45.9298],
        [41.5876],
        [43.7761],
        [47.4465],
        [41.5533],
        [45.2234],
        [43.6074],
        [40.0462],
        [41.3828],
        [39.5606],
        [39.3072],
        [41.8959],
        [36.2721],
        [40.4251],
        [39.6920],
        [36.5294],
        [41.8143],
        [39.8033],
        [45.1144],
        [42.0407],
        [44.8520],
        [43.8270],
        [43.3120],
        [43.7102],
        [43.8227],
        [43.0816],
        [41.9076],
        [43.4867],
        [42.3639],
        [41.8511],
        [44.1713],
        [42.7169],
        [45.1446],
        [43.0227],
        [42.3181],
        [43.7685],
        [45.0813],
        [43.2051],
        [45.0359],
        [43.1980],
        [42.0841],
        [43.9919],
        [48.0554],
        [45.5660],
        [43.8125],
        [43.9395],
        [45.5776]])
Selected blocks appended
Decoding step 43
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([209, 118, 442, 416, 312, 159,  80, 217, 383, 491, 104, 177, 483,  77,
         78,  77, 127, 214, 119, 445, 493, 476, 271, 114, 367,  12, 438, 161,
        124, 102, 219, 132, 418, 315, 209, 271, 323, 182, 231, 384, 256, 387,
        117,  52, 300, 470,  20, 101, 203, 386])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[209]],

        [[118]],

        [[442]],

        [[416]],

        [[312]],

        [[159]],

        [[ 80]],

        [[217]],

        [[383]],

        [[491]],

        [[104]],

        [[177]],

        [[483]],

        [[ 77]],

        [[ 78]],

        [[ 77]],

        [[127]],

        [[214]],

        [[119]],

        [[445]],

        [[493]],

        [[476]],

        [[271]],

        [[114]],

        [[367]],

        [[ 12]],

        [[438]],

        [[161]],

        [[124]],

        [[102]],

        [[219]],

        [[132]],

        [[418]],

        [[315]],

        [[209]],

        [[271]],

        [[323]],

        [[182]],

        [[231]],

        [[384]],

        [[256]],

        [[387]],

        [[117]],

        [[ 52]],

        [[300]],

        [[470]],

        [[ 20]],

        [[101]],

        [[203]],

        [[386]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[41.8992],
        [46.3320],
        [45.9476],
        [47.0652],
        [42.5579],
        [44.8854],
        [48.0757],
        [43.1465],
        [46.5750],
        [44.4052],
        [41.0309],
        [42.1932],
        [40.8026],
        [40.2669],
        [42.7691],
        [37.2319],
        [41.8145],
        [40.2706],
        [37.5390],
        [42.7169],
        [40.5377],
        [45.9795],
        [43.1706],
        [46.1099],
        [44.8023],
        [44.4357],
        [44.9852],
        [45.2018],
        [43.9940],
        [42.9457],
        [44.4464],
        [43.2768],
        [42.5728],
        [45.3284],
        [44.3170],
        [46.1827],
        [44.0550],
        [43.2768],
        [44.8107],
        [46.4127],
        [43.9720],
        [46.2069],
        [43.9669],
        [42.6650],
        [44.7307],
        [49.3185],
        [46.6920],
        [44.6044],
        [44.6798],
        [46.4254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[41.8992],
        [46.3320],
        [45.9476],
        [47.0652],
        [42.5579],
        [44.8854],
        [48.0757],
        [43.1465],
        [46.5750],
        [44.4052],
        [41.0309],
        [42.1932],
        [40.8026],
        [40.2669],
        [42.7691],
        [37.2319],
        [41.8145],
        [40.2706],
        [37.5390],
        [42.7169],
        [40.5377],
        [45.9795],
        [43.1706],
        [46.1099],
        [44.8023],
        [44.4357],
        [44.9852],
        [45.2018],
        [43.9940],
        [42.9457],
        [44.4464],
        [43.2768],
        [42.5728],
        [45.3284],
        [44.3170],
        [46.1827],
        [44.0550],
        [43.2768],
        [44.8107],
        [46.4127],
        [43.9720],
        [46.2069],
        [43.9669],
        [42.6650],
        [44.7307],
        [49.3185],
        [46.6920],
        [44.6044],
        [44.6798],
        [46.4254]])
Selected blocks appended
Decoding step 44
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 53,   1, 469, 325,  93, 433, 149, 227, 281, 181, 374, 411, 153, 322,
        379, 455, 141,  79, 307, 448,   5, 296, 110,  31, 448,  51, 466, 467,
        387, 199, 132, 114, 305, 322, 229, 268, 106,  65, 373, 344, 368, 414,
         45, 256, 262, 254, 297, 499, 325, 174])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 53]],

        [[  1]],

        [[469]],

        [[325]],

        [[ 93]],

        [[433]],

        [[149]],

        [[227]],

        [[281]],

        [[181]],

        [[374]],

        [[411]],

        [[153]],

        [[322]],

        [[379]],

        [[455]],

        [[141]],

        [[ 79]],

        [[307]],

        [[448]],

        [[  5]],

        [[296]],

        [[110]],

        [[ 31]],

        [[448]],

        [[ 51]],

        [[466]],

        [[467]],

        [[387]],

        [[199]],

        [[132]],

        [[114]],

        [[305]],

        [[322]],

        [[229]],

        [[268]],

        [[106]],

        [[ 65]],

        [[373]],

        [[344]],

        [[368]],

        [[414]],

        [[ 45]],

        [[256]],

        [[262]],

        [[254]],

        [[297]],

        [[499]],

        [[325]],

        [[174]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[43.1516],
        [47.5350],
        [46.8117],
        [48.0237],
        [43.9896],
        [45.7578],
        [49.4010],
        [43.9144],
        [47.0980],
        [45.2245],
        [41.4845],
        [43.4745],
        [41.9280],
        [41.4118],
        [43.5199],
        [38.2312],
        [42.6915],
        [41.2456],
        [38.6422],
        [43.3155],
        [41.3423],
        [47.4065],
        [44.5453],
        [46.9558],
        [45.6310],
        [45.1209],
        [45.4002],
        [46.2297],
        [45.3241],
        [44.2842],
        [45.3593],
        [44.5772],
        [43.7690],
        [45.9451],
        [45.4119],
        [46.8248],
        [44.8332],
        [44.2737],
        [45.8875],
        [47.9611],
        [44.6977],
        [47.8831],
        [44.8818],
        [43.4319],
        [45.8813],
        [50.1259],
        [47.5371],
        [45.9743],
        [45.7198],
        [47.9740]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[43.1516],
        [47.5350],
        [46.8117],
        [48.0237],
        [43.9896],
        [45.7578],
        [49.4010],
        [43.9144],
        [47.0980],
        [45.2245],
        [41.4845],
        [43.4745],
        [41.9280],
        [41.4118],
        [43.5199],
        [38.2312],
        [42.6915],
        [41.2456],
        [38.6422],
        [43.3155],
        [41.3423],
        [47.4065],
        [44.5453],
        [46.9558],
        [45.6310],
        [45.1209],
        [45.4002],
        [46.2297],
        [45.3241],
        [44.2842],
        [45.3593],
        [44.5772],
        [43.7690],
        [45.9451],
        [45.4119],
        [46.8248],
        [44.8332],
        [44.2737],
        [45.8875],
        [47.9611],
        [44.6977],
        [47.8831],
        [44.8818],
        [43.4319],
        [45.8813],
        [50.1259],
        [47.5371],
        [45.9743],
        [45.7198],
        [47.9740]])
Selected blocks appended
Decoding step 45
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([134, 195,  83, 240, 447,  67, 116,  79, 106, 386, 475,  40, 253, 123,
         77, 346,  35, 402, 387, 101,  89, 236, 223, 230, 191, 260, 220, 378,
        361, 259, 403, 387, 254, 464, 332, 133, 391, 307, 100,  71, 229, 256,
        337, 374, 463, 359, 371, 360, 108, 433])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[134]],

        [[195]],

        [[ 83]],

        [[240]],

        [[447]],

        [[ 67]],

        [[116]],

        [[ 79]],

        [[106]],

        [[386]],

        [[475]],

        [[ 40]],

        [[253]],

        [[123]],

        [[ 77]],

        [[346]],

        [[ 35]],

        [[402]],

        [[387]],

        [[101]],

        [[ 89]],

        [[236]],

        [[223]],

        [[230]],

        [[191]],

        [[260]],

        [[220]],

        [[378]],

        [[361]],

        [[259]],

        [[403]],

        [[387]],

        [[254]],

        [[464]],

        [[332]],

        [[133]],

        [[391]],

        [[307]],

        [[100]],

        [[ 71]],

        [[229]],

        [[256]],

        [[337]],

        [[374]],

        [[463]],

        [[359]],

        [[371]],

        [[360]],

        [[108]],

        [[433]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[43.9475],
        [48.7493],
        [47.5377],
        [48.9969],
        [45.0271],
        [47.3331],
        [50.4059],
        [45.0886],
        [48.2582],
        [46.4836],
        [42.5205],
        [44.2067],
        [43.0281],
        [42.3696],
        [44.4796],
        [38.9068],
        [43.9777],
        [42.2061],
        [39.4106],
        [44.2357],
        [41.9735],
        [48.4836],
        [45.6155],
        [47.7686],
        [46.2104],
        [46.0774],
        [46.2306],
        [47.1276],
        [46.4365],
        [44.7843],
        [46.4095],
        [45.5686],
        [45.2494],
        [47.1799],
        [46.3844],
        [47.6153],
        [45.6087],
        [45.3580],
        [47.1886],
        [48.9031],
        [45.9246],
        [48.6500],
        [45.7881],
        [44.0814],
        [47.0376],
        [50.9874],
        [48.3174],
        [47.1085],
        [46.9644],
        [49.2658]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[43.9475],
        [48.7493],
        [47.5377],
        [48.9969],
        [45.0271],
        [47.3331],
        [50.4059],
        [45.0886],
        [48.2582],
        [46.4836],
        [42.5205],
        [44.2067],
        [43.0281],
        [42.3696],
        [44.4796],
        [38.9068],
        [43.9777],
        [42.2061],
        [39.4106],
        [44.2357],
        [41.9735],
        [48.4836],
        [45.6155],
        [47.7686],
        [46.2104],
        [46.0774],
        [46.2306],
        [47.1276],
        [46.4365],
        [44.7843],
        [46.4095],
        [45.5686],
        [45.2494],
        [47.1799],
        [46.3844],
        [47.6153],
        [45.6087],
        [45.3580],
        [47.1886],
        [48.9031],
        [45.9246],
        [48.6500],
        [45.7881],
        [44.0814],
        [47.0376],
        [50.9874],
        [48.3174],
        [47.1085],
        [46.9644],
        [49.2658]])
Selected blocks appended
Decoding step 46
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([295, 230, 464, 407, 101, 155, 215, 216, 404, 237,  11, 145, 209,  62,
         20, 132, 466, 230,  92, 239, 446, 483, 339, 299,  73, 396, 437, 329,
         66, 363, 226, 377, 339,  71, 151, 151, 187, 239, 199, 114, 209, 293,
        417, 396, 462, 455,  17, 477,   3, 262])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[295]],

        [[230]],

        [[464]],

        [[407]],

        [[101]],

        [[155]],

        [[215]],

        [[216]],

        [[404]],

        [[237]],

        [[ 11]],

        [[145]],

        [[209]],

        [[ 62]],

        [[ 20]],

        [[132]],

        [[466]],

        [[230]],

        [[ 92]],

        [[239]],

        [[446]],

        [[483]],

        [[339]],

        [[299]],

        [[ 73]],

        [[396]],

        [[437]],

        [[329]],

        [[ 66]],

        [[363]],

        [[226]],

        [[377]],

        [[339]],

        [[ 71]],

        [[151]],

        [[151]],

        [[187]],

        [[239]],

        [[199]],

        [[114]],

        [[209]],

        [[293]],

        [[417]],

        [[396]],

        [[462]],

        [[455]],

        [[ 17]],

        [[477]],

        [[  3]],

        [[262]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[44.7397],
        [49.9265],
        [48.5693],
        [49.8476],
        [45.9779],
        [48.3264],
        [51.5655],
        [46.3986],
        [49.3876],
        [47.7199],
        [42.9870],
        [45.4939],
        [44.3620],
        [42.9528],
        [46.0243],
        [39.9074],
        [44.5481],
        [43.1947],
        [40.0946],
        [45.1668],
        [42.7574],
        [49.4617],
        [47.0347],
        [48.7197],
        [47.1836],
        [46.9121],
        [47.4840],
        [47.6423],
        [47.4596],
        [45.8622],
        [47.0411],
        [46.8099],
        [46.1324],
        [48.1218],
        [47.3525],
        [48.5834],
        [46.5015],
        [46.2471],
        [48.0786],
        [50.2035],
        [46.5344],
        [50.5275],
        [46.8262],
        [44.7776],
        [48.2030],
        [51.8994],
        [49.0825],
        [48.0384],
        [47.9240],
        [50.4163]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[44.7397],
        [49.9265],
        [48.5693],
        [49.8476],
        [45.9779],
        [48.3264],
        [51.5655],
        [46.3986],
        [49.3876],
        [47.7199],
        [42.9870],
        [45.4939],
        [44.3620],
        [42.9528],
        [46.0243],
        [39.9074],
        [44.5481],
        [43.1947],
        [40.0946],
        [45.1668],
        [42.7574],
        [49.4617],
        [47.0347],
        [48.7197],
        [47.1836],
        [46.9121],
        [47.4840],
        [47.6423],
        [47.4596],
        [45.8622],
        [47.0411],
        [46.8099],
        [46.1324],
        [48.1218],
        [47.3525],
        [48.5834],
        [46.5015],
        [46.2471],
        [48.0786],
        [50.2035],
        [46.5344],
        [50.5275],
        [46.8262],
        [44.7776],
        [48.2030],
        [51.8994],
        [49.0825],
        [48.0384],
        [47.9240],
        [50.4163]])
Selected blocks appended
Decoding step 47
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([163, 276, 375,  25, 103, 378,  61,  83, 439, 191,  60, 491,  78, 328,
        113, 440, 111, 164, 454, 453, 316, 415, 352, 390, 184, 203, 101, 120,
        279, 427, 239, 310, 357, 185,  38, 270, 432, 287, 328, 492, 119, 469,
        419,   2, 468, 297, 308, 138, 261, 128])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[163]],

        [[276]],

        [[375]],

        [[ 25]],

        [[103]],

        [[378]],

        [[ 61]],

        [[ 83]],

        [[439]],

        [[191]],

        [[ 60]],

        [[491]],

        [[ 78]],

        [[328]],

        [[113]],

        [[440]],

        [[111]],

        [[164]],

        [[454]],

        [[453]],

        [[316]],

        [[415]],

        [[352]],

        [[390]],

        [[184]],

        [[203]],

        [[101]],

        [[120]],

        [[279]],

        [[427]],

        [[239]],

        [[310]],

        [[357]],

        [[185]],

        [[ 38]],

        [[270]],

        [[432]],

        [[287]],

        [[328]],

        [[492]],

        [[119]],

        [[469]],

        [[419]],

        [[  2]],

        [[468]],

        [[297]],

        [[308]],

        [[138]],

        [[261]],

        [[128]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[45.7437],
        [51.3754],
        [49.5167],
        [50.2854],
        [46.8367],
        [49.6022],
        [52.3018],
        [47.1245],
        [50.6916],
        [49.1440],
        [43.7556],
        [46.3173],
        [45.2352],
        [43.9953],
        [46.9096],
        [41.0085],
        [45.5108],
        [44.0246],
        [40.3913],
        [46.2380],
        [44.0745],
        [50.5638],
        [47.8472],
        [49.9346],
        [48.0010],
        [48.1422],
        [48.7154],
        [48.7205],
        [48.3471],
        [46.9710],
        [47.9302],
        [47.8091],
        [46.9958],
        [49.0581],
        [48.2314],
        [49.5244],
        [47.4383],
        [47.0478],
        [49.2087],
        [50.8315],
        [47.6222],
        [51.5369],
        [47.9988],
        [45.2961],
        [49.1565],
        [52.7444],
        [50.2394],
        [49.0394],
        [49.1882],
        [51.3994]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[45.7437],
        [51.3754],
        [49.5167],
        [50.2854],
        [46.8367],
        [49.6022],
        [52.3018],
        [47.1245],
        [50.6916],
        [49.1440],
        [43.7556],
        [46.3173],
        [45.2352],
        [43.9953],
        [46.9096],
        [41.0085],
        [45.5108],
        [44.0246],
        [40.3913],
        [46.2380],
        [44.0745],
        [50.5638],
        [47.8472],
        [49.9346],
        [48.0010],
        [48.1422],
        [48.7154],
        [48.7205],
        [48.3471],
        [46.9710],
        [47.9302],
        [47.8091],
        [46.9958],
        [49.0581],
        [48.2314],
        [49.5244],
        [47.4383],
        [47.0478],
        [49.2087],
        [50.8315],
        [47.6222],
        [51.5369],
        [47.9988],
        [45.2961],
        [49.1565],
        [52.7444],
        [50.2394],
        [49.0394],
        [49.1882],
        [51.3994]])
Selected blocks appended
Decoding step 48
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 76,  90, 241, 102, 481,  32,  39, 174, 480, 209, 240, 263, 469, 296,
        121, 477, 135, 321, 384, 308, 245, 245,  59, 455, 312, 322,  49, 206,
        315,  46, 406, 193, 345, 291, 135, 420, 272, 373, 455, 167,  52, 142,
        416,  93, 334, 220, 312, 493, 422, 340])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 76]],

        [[ 90]],

        [[241]],

        [[102]],

        [[481]],

        [[ 32]],

        [[ 39]],

        [[174]],

        [[480]],

        [[209]],

        [[240]],

        [[263]],

        [[469]],

        [[296]],

        [[121]],

        [[477]],

        [[135]],

        [[321]],

        [[384]],

        [[308]],

        [[245]],

        [[245]],

        [[ 59]],

        [[455]],

        [[312]],

        [[322]],

        [[ 49]],

        [[206]],

        [[315]],

        [[ 46]],

        [[406]],

        [[193]],

        [[345]],

        [[291]],

        [[135]],

        [[420]],

        [[272]],

        [[373]],

        [[455]],

        [[167]],

        [[ 52]],

        [[142]],

        [[416]],

        [[ 93]],

        [[334]],

        [[220]],

        [[312]],

        [[493]],

        [[422]],

        [[340]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[46.5770],
        [52.3935],
        [50.4359],
        [51.0081],
        [47.2497],
        [50.5572],
        [53.2087],
        [48.5672],
        [51.7054],
        [50.1240],
        [44.9544],
        [47.6523],
        [46.2399],
        [44.9251],
        [47.5392],
        [41.7230],
        [46.4452],
        [45.0104],
        [40.8934],
        [47.3726],
        [45.0589],
        [51.5482],
        [48.9394],
        [50.5288],
        [48.9896],
        [49.3282],
        [50.0810],
        [49.7163],
        [48.7939],
        [47.9167],
        [49.1100],
        [48.8654],
        [48.0367],
        [49.9294],
        [49.1630],
        [49.9973],
        [48.3752],
        [48.1246],
        [50.5603],
        [51.4549],
        [48.2030],
        [52.8342],
        [49.3245],
        [46.5417],
        [50.0742],
        [53.6809],
        [50.9209],
        [50.0530],
        [50.7681],
        [52.1139]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[46.5770],
        [52.3935],
        [50.4359],
        [51.0081],
        [47.2497],
        [50.5572],
        [53.2087],
        [48.5672],
        [51.7054],
        [50.1240],
        [44.9544],
        [47.6523],
        [46.2399],
        [44.9251],
        [47.5392],
        [41.7230],
        [46.4452],
        [45.0104],
        [40.8934],
        [47.3726],
        [45.0589],
        [51.5482],
        [48.9394],
        [50.5288],
        [48.9896],
        [49.3282],
        [50.0810],
        [49.7163],
        [48.7939],
        [47.9167],
        [49.1100],
        [48.8654],
        [48.0367],
        [49.9294],
        [49.1630],
        [49.9973],
        [48.3752],
        [48.1246],
        [50.5603],
        [51.4549],
        [48.2030],
        [52.8342],
        [49.3245],
        [46.5417],
        [50.0742],
        [53.6809],
        [50.9209],
        [50.0530],
        [50.7681],
        [52.1139]])
Selected blocks appended
Decoding step 49
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([411, 422,  12, 113,  85,  81,   6, 277, 350, 276, 384, 449,  54, 174,
        330, 204, 418,  82, 218, 307, 289, 328, 188,  16,  93,  23, 329, 178,
        411, 240,  48, 168, 334, 196, 222, 453, 327, 231, 400, 369,  36, 413,
        276, 188, 272, 148, 194, 163,  14, 308])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[411]],

        [[422]],

        [[ 12]],

        [[113]],

        [[ 85]],

        [[ 81]],

        [[  6]],

        [[277]],

        [[350]],

        [[276]],

        [[384]],

        [[449]],

        [[ 54]],

        [[174]],

        [[330]],

        [[204]],

        [[418]],

        [[ 82]],

        [[218]],

        [[307]],

        [[289]],

        [[328]],

        [[188]],

        [[ 16]],

        [[ 93]],

        [[ 23]],

        [[329]],

        [[178]],

        [[411]],

        [[240]],

        [[ 48]],

        [[168]],

        [[334]],

        [[196]],

        [[222]],

        [[453]],

        [[327]],

        [[231]],

        [[400]],

        [[369]],

        [[ 36]],

        [[413]],

        [[276]],

        [[188]],

        [[272]],

        [[148]],

        [[194]],

        [[163]],

        [[ 14]],

        [[308]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[47.1657],
        [53.3672],
        [51.5993],
        [51.6213],
        [48.5518],
        [51.3715],
        [54.1688],
        [49.9593],
        [53.0981],
        [51.5729],
        [45.4564],
        [48.6312],
        [46.7180],
        [45.7757],
        [48.6006],
        [42.2374],
        [47.6846],
        [45.7091],
        [41.3326],
        [48.4758],
        [46.0564],
        [52.5130],
        [50.0493],
        [52.1253],
        [50.3093],
        [50.2371],
        [50.5956],
        [50.4328],
        [49.8462],
        [48.9425],
        [50.2147],
        [50.0074],
        [49.0283],
        [50.9175],
        [49.8836],
        [51.0498],
        [49.1970],
        [49.1668],
        [51.4153],
        [52.5392],
        [49.2640],
        [53.9502],
        [50.0920],
        [47.8869],
        [51.1258],
        [54.5363],
        [52.0806],
        [50.7856],
        [52.0199],
        [53.2708]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[47.1657],
        [53.3672],
        [51.5993],
        [51.6213],
        [48.5518],
        [51.3715],
        [54.1688],
        [49.9593],
        [53.0981],
        [51.5729],
        [45.4564],
        [48.6312],
        [46.7180],
        [45.7757],
        [48.6006],
        [42.2374],
        [47.6846],
        [45.7091],
        [41.3326],
        [48.4758],
        [46.0564],
        [52.5130],
        [50.0493],
        [52.1253],
        [50.3093],
        [50.2371],
        [50.5956],
        [50.4328],
        [49.8462],
        [48.9425],
        [50.2147],
        [50.0074],
        [49.0283],
        [50.9175],
        [49.8836],
        [51.0498],
        [49.1970],
        [49.1668],
        [51.4153],
        [52.5392],
        [49.2640],
        [53.9502],
        [50.0920],
        [47.8869],
        [51.1258],
        [54.5363],
        [52.0806],
        [50.7856],
        [52.0199],
        [53.2708]])
Selected blocks appended
Decoding step 50
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([119, 291,  82,  76, 443, 156,  51, 336,  86, 321,  58, 461,  59,   1,
        173, 126,  74, 365, 382, 454, 169, 102, 191, 202, 212, 175, 159, 144,
        335, 336, 339, 369, 172, 312, 297,  15, 382, 204,   2, 125, 262, 480,
         27, 263, 169, 298, 432, 410, 219,  49])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[119]],

        [[291]],

        [[ 82]],

        [[ 76]],

        [[443]],

        [[156]],

        [[ 51]],

        [[336]],

        [[ 86]],

        [[321]],

        [[ 58]],

        [[461]],

        [[ 59]],

        [[  1]],

        [[173]],

        [[126]],

        [[ 74]],

        [[365]],

        [[382]],

        [[454]],

        [[169]],

        [[102]],

        [[191]],

        [[202]],

        [[212]],

        [[175]],

        [[159]],

        [[144]],

        [[335]],

        [[336]],

        [[339]],

        [[369]],

        [[172]],

        [[312]],

        [[297]],

        [[ 15]],

        [[382]],

        [[204]],

        [[  2]],

        [[125]],

        [[262]],

        [[480]],

        [[ 27]],

        [[263]],

        [[169]],

        [[298]],

        [[432]],

        [[410]],

        [[219]],

        [[ 49]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[48.1665],
        [53.9018],
        [52.3786],
        [52.4545],
        [49.3438],
        [52.5349],
        [55.2461],
        [51.1191],
        [54.1758],
        [52.8536],
        [46.3320],
        [49.6258],
        [47.5016],
        [47.2408],
        [49.5115],
        [43.0308],
        [48.7067],
        [46.7473],
        [42.0432],
        [48.7726],
        [47.0560],
        [53.5511],
        [50.6287],
        [53.1521],
        [51.0133],
        [50.8167],
        [51.2480],
        [51.2389],
        [50.7265],
        [49.8829],
        [51.0977],
        [51.0918],
        [50.1690],
        [51.9325],
        [51.1876],
        [51.8982],
        [50.2142],
        [50.0307],
        [52.2467],
        [53.3277],
        [50.4145],
        [54.9025],
        [51.0305],
        [48.6210],
        [51.9227],
        [55.7776],
        [52.6798],
        [51.7331],
        [53.3899],
        [54.1011]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[48.1665],
        [53.9018],
        [52.3786],
        [52.4545],
        [49.3438],
        [52.5349],
        [55.2461],
        [51.1191],
        [54.1758],
        [52.8536],
        [46.3320],
        [49.6258],
        [47.5016],
        [47.2408],
        [49.5115],
        [43.0308],
        [48.7067],
        [46.7473],
        [42.0432],
        [48.7726],
        [47.0560],
        [53.5511],
        [50.6287],
        [53.1521],
        [51.0133],
        [50.8167],
        [51.2480],
        [51.2389],
        [50.7265],
        [49.8829],
        [51.0977],
        [51.0918],
        [50.1690],
        [51.9325],
        [51.1876],
        [51.8982],
        [50.2142],
        [50.0307],
        [52.2467],
        [53.3277],
        [50.4145],
        [54.9025],
        [51.0305],
        [48.6210],
        [51.9227],
        [55.7776],
        [52.6798],
        [51.7331],
        [53.3899],
        [54.1011]])
Selected blocks appended
Decoding step 51
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([362, 349, 322, 210, 410, 112, 459, 423,  41, 479,  76,  30, 141, 185,
        451,  74, 201,  55, 264,  30, 373,  37, 471, 313, 376, 316, 257, 488,
        122, 134, 231, 139, 356, 122,  84, 192, 358, 189, 341, 192, 411, 381,
        362, 326, 368, 156, 164, 140, 465,  13])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[362]],

        [[349]],

        [[322]],

        [[210]],

        [[410]],

        [[112]],

        [[459]],

        [[423]],

        [[ 41]],

        [[479]],

        [[ 76]],

        [[ 30]],

        [[141]],

        [[185]],

        [[451]],

        [[ 74]],

        [[201]],

        [[ 55]],

        [[264]],

        [[ 30]],

        [[373]],

        [[ 37]],

        [[471]],

        [[313]],

        [[376]],

        [[316]],

        [[257]],

        [[488]],

        [[122]],

        [[134]],

        [[231]],

        [[139]],

        [[356]],

        [[122]],

        [[ 84]],

        [[192]],

        [[358]],

        [[189]],

        [[341]],

        [[192]],

        [[411]],

        [[381]],

        [[362]],

        [[326]],

        [[368]],

        [[156]],

        [[164]],

        [[140]],

        [[465]],

        [[ 13]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[49.0144],
        [55.0977],
        [53.2038],
        [53.4456],
        [50.4178],
        [53.8691],
        [55.9079],
        [51.8613],
        [54.8960],
        [53.6785],
        [47.1734],
        [50.8927],
        [48.3786],
        [48.0322],
        [50.3694],
        [44.0529],
        [49.4607],
        [47.8817],
        [43.2311],
        [50.0395],
        [47.6671],
        [54.0244],
        [51.5266],
        [53.4892],
        [52.5246],
        [52.1338],
        [51.9893],
        [52.1968],
        [51.5852],
        [51.4094],
        [52.1399],
        [52.1833],
        [51.0303],
        [52.8734],
        [52.3625],
        [52.4294],
        [51.2150],
        [50.7496],
        [53.0908],
        [53.8589],
        [51.6157],
        [55.9110],
        [52.1400],
        [49.2884],
        [52.6484],
        [56.7341],
        [53.6945],
        [52.8013],
        [54.3978],
        [55.1918]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[49.0144],
        [55.0977],
        [53.2038],
        [53.4456],
        [50.4178],
        [53.8691],
        [55.9079],
        [51.8613],
        [54.8960],
        [53.6785],
        [47.1734],
        [50.8927],
        [48.3786],
        [48.0322],
        [50.3694],
        [44.0529],
        [49.4607],
        [47.8817],
        [43.2311],
        [50.0395],
        [47.6671],
        [54.0244],
        [51.5266],
        [53.4892],
        [52.5246],
        [52.1338],
        [51.9893],
        [52.1968],
        [51.5852],
        [51.4094],
        [52.1399],
        [52.1833],
        [51.0303],
        [52.8734],
        [52.3625],
        [52.4294],
        [51.2150],
        [50.7496],
        [53.0908],
        [53.8589],
        [51.6157],
        [55.9110],
        [52.1400],
        [49.2884],
        [52.6484],
        [56.7341],
        [53.6945],
        [52.8013],
        [54.3978],
        [55.1918]])
Selected blocks appended
Decoding step 52
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([285, 410, 454,  80, 377,  73,   0, 168, 183, 431, 473, 433, 350, 375,
        376, 166, 217, 228, 436, 338,  53, 324, 251, 337,  27, 111, 108, 404,
        305, 169, 275, 202, 422, 144, 369, 129, 345, 415, 161, 182,  69, 121,
        165, 405,  91, 433,  58, 165, 186, 238])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[285]],

        [[410]],

        [[454]],

        [[ 80]],

        [[377]],

        [[ 73]],

        [[  0]],

        [[168]],

        [[183]],

        [[431]],

        [[473]],

        [[433]],

        [[350]],

        [[375]],

        [[376]],

        [[166]],

        [[217]],

        [[228]],

        [[436]],

        [[338]],

        [[ 53]],

        [[324]],

        [[251]],

        [[337]],

        [[ 27]],

        [[111]],

        [[108]],

        [[404]],

        [[305]],

        [[169]],

        [[275]],

        [[202]],

        [[422]],

        [[144]],

        [[369]],

        [[129]],

        [[345]],

        [[415]],

        [[161]],

        [[182]],

        [[ 69]],

        [[121]],

        [[165]],

        [[405]],

        [[ 91]],

        [[433]],

        [[ 58]],

        [[165]],

        [[186]],

        [[238]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[49.6485],
        [56.1717],
        [54.2180],
        [54.0747],
        [51.5715],
        [54.8505],
        [56.8229],
        [52.4468],
        [55.9344],
        [54.6429],
        [48.1870],
        [51.7836],
        [49.3397],
        [48.9648],
        [51.6288],
        [45.5561],
        [50.4045],
        [49.0140],
        [44.0443],
        [51.6696],
        [48.7832],
        [55.0482],
        [52.9204],
        [53.6259],
        [53.5649],
        [52.8325],
        [53.3469],
        [53.1961],
        [52.5688],
        [52.4090],
        [52.9410],
        [53.1740],
        [51.9900],
        [53.7158],
        [53.4468],
        [53.5373],
        [52.2559],
        [51.6249],
        [54.2562],
        [54.8177],
        [52.5725],
        [56.7243],
        [53.3046],
        [50.3430],
        [53.4893],
        [58.0259],
        [54.6574],
        [53.9658],
        [55.6886],
        [56.4389]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[49.6485],
        [56.1717],
        [54.2180],
        [54.0747],
        [51.5715],
        [54.8505],
        [56.8229],
        [52.4468],
        [55.9344],
        [54.6429],
        [48.1870],
        [51.7836],
        [49.3397],
        [48.9648],
        [51.6288],
        [45.5561],
        [50.4045],
        [49.0140],
        [44.0443],
        [51.6696],
        [48.7832],
        [55.0482],
        [52.9204],
        [53.6259],
        [53.5649],
        [52.8325],
        [53.3469],
        [53.1961],
        [52.5688],
        [52.4090],
        [52.9410],
        [53.1740],
        [51.9900],
        [53.7158],
        [53.4468],
        [53.5373],
        [52.2559],
        [51.6249],
        [54.2562],
        [54.8177],
        [52.5725],
        [56.7243],
        [53.3046],
        [50.3430],
        [53.4893],
        [58.0259],
        [54.6574],
        [53.9658],
        [55.6886],
        [56.4389]])
Selected blocks appended
Decoding step 53
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 74, 474, 251, 133,  78, 136,  86, 417, 246, 466, 302, 274, 265, 435,
        377, 362, 312, 387, 150, 114, 402,   0, 261, 142, 169, 162,  51, 442,
         82, 377, 287,  72, 252, 233,  10, 467, 207, 466, 474, 229, 446, 424,
        444, 320,  39,  61, 369, 157, 140, 325])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 74]],

        [[474]],

        [[251]],

        [[133]],

        [[ 78]],

        [[136]],

        [[ 86]],

        [[417]],

        [[246]],

        [[466]],

        [[302]],

        [[274]],

        [[265]],

        [[435]],

        [[377]],

        [[362]],

        [[312]],

        [[387]],

        [[150]],

        [[114]],

        [[402]],

        [[  0]],

        [[261]],

        [[142]],

        [[169]],

        [[162]],

        [[ 51]],

        [[442]],

        [[ 82]],

        [[377]],

        [[287]],

        [[ 72]],

        [[252]],

        [[233]],

        [[ 10]],

        [[467]],

        [[207]],

        [[466]],

        [[474]],

        [[229]],

        [[446]],

        [[424]],

        [[444]],

        [[320]],

        [[ 39]],

        [[ 61]],

        [[369]],

        [[157]],

        [[140]],

        [[325]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[50.7091],
        [57.4602],
        [55.3855],
        [55.2027],
        [52.6335],
        [55.8296],
        [57.9006],
        [53.4830],
        [57.2373],
        [55.5772],
        [48.7701],
        [52.1172],
        [49.9986],
        [50.5122],
        [52.9733],
        [46.3557],
        [51.2930],
        [49.7825],
        [44.8293],
        [52.7131],
        [49.5058],
        [56.1902],
        [54.1483],
        [54.2533],
        [54.5645],
        [53.7430],
        [54.0322],
        [54.1981],
        [53.3064],
        [53.1872],
        [53.7417],
        [54.1655],
        [53.0657],
        [54.5130],
        [54.1363],
        [54.4102],
        [53.3751],
        [52.6264],
        [54.9836],
        [55.9126],
        [53.1763],
        [57.6431],
        [53.9739],
        [51.1602],
        [55.2232],
        [59.4806],
        [55.9193],
        [54.8986],
        [56.7568],
        [57.4789]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 0, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[50.7091],
        [57.4602],
        [55.3855],
        [55.2027],
        [52.6335],
        [55.8296],
        [57.9006],
        [53.4830],
        [57.2373],
        [55.5772],
        [48.7701],
        [52.1172],
        [49.9986],
        [50.5122],
        [52.9733],
        [46.3557],
        [51.2930],
        [49.7825],
        [44.8293],
        [52.7131],
        [49.5058],
        [56.1902],
        [54.1483],
        [54.2533],
        [54.5645],
        [53.7430],
        [54.0322],
        [54.1981],
        [53.3064],
        [53.1872],
        [53.7417],
        [54.1655],
        [53.0657],
        [54.5130],
        [54.1363],
        [54.4102],
        [53.3751],
        [52.6264],
        [54.9836],
        [55.9126],
        [53.1763],
        [57.6431],
        [53.9739],
        [51.1602],
        [55.2232],
        [59.4806],
        [55.9193],
        [54.8986],
        [56.7568],
        [57.4789]])
Selected blocks appended
Decoding step 54
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([146, 302,  78, 450,  96,  24, 258, 398, 111, 344,  70, 396,  64, 425,
        138, 388, 145,  49, 368, 102, 299, 462, 151,  51,   2, 333, 362, 447,
        264, 193,  43,  88, 406, 333,  72, 267,  67, 126, 348,  88, 280, 287,
        252,  20, 223, 427, 225,   1, 134, 200])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[146]],

        [[302]],

        [[ 78]],

        [[450]],

        [[ 96]],

        [[ 24]],

        [[258]],

        [[398]],

        [[111]],

        [[344]],

        [[ 70]],

        [[396]],

        [[ 64]],

        [[425]],

        [[138]],

        [[388]],

        [[145]],

        [[ 49]],

        [[368]],

        [[102]],

        [[299]],

        [[462]],

        [[151]],

        [[ 51]],

        [[  2]],

        [[333]],

        [[362]],

        [[447]],

        [[264]],

        [[193]],

        [[ 43]],

        [[ 88]],

        [[406]],

        [[333]],

        [[ 72]],

        [[267]],

        [[ 67]],

        [[126]],

        [[348]],

        [[ 88]],

        [[280]],

        [[287]],

        [[252]],

        [[ 20]],

        [[223]],

        [[427]],

        [[225]],

        [[  1]],

        [[134]],

        [[200]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[51.5833],
        [58.6252],
        [56.4475],
        [56.4918],
        [53.7174],
        [56.8299],
        [58.5710],
        [54.3004],
        [58.2960],
        [56.9389],
        [49.7775],
        [52.9170],
        [50.6535],
        [51.4295],
        [53.8750],
        [47.4645],
        [52.5802],
        [50.3670],
        [45.4703],
        [53.6993],
        [50.4569],
        [57.4888],
        [55.4910],
        [54.9386],
        [55.4920],
        [55.0334],
        [54.5277],
        [55.3496],
        [54.2979],
        [54.1922],
        [55.0171],
        [55.0456],
        [54.2455],
        [55.6492],
        [55.1278],
        [56.0076],
        [54.2284],
        [54.1712],
        [55.7690],
        [56.7927],
        [54.5543],
        [58.8908],
        [55.0493],
        [52.2862],
        [55.9617],
        [60.2673],
        [56.9853],
        [56.4119],
        [57.8576],
        [58.2017]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[51.5833],
        [58.6252],
        [56.4475],
        [56.4918],
        [53.7174],
        [56.8299],
        [58.5710],
        [54.3004],
        [58.2960],
        [56.9389],
        [49.7775],
        [52.9170],
        [50.6535],
        [51.4295],
        [53.8750],
        [47.4645],
        [52.5802],
        [50.3670],
        [45.4703],
        [53.6993],
        [50.4569],
        [57.4888],
        [55.4910],
        [54.9386],
        [55.4920],
        [55.0334],
        [54.5277],
        [55.3496],
        [54.2979],
        [54.1922],
        [55.0171],
        [55.0456],
        [54.2455],
        [55.6492],
        [55.1278],
        [56.0076],
        [54.2284],
        [54.1712],
        [55.7690],
        [56.7927],
        [54.5543],
        [58.8908],
        [55.0493],
        [52.2862],
        [55.9617],
        [60.2673],
        [56.9853],
        [56.4119],
        [57.8576],
        [58.2017]])
Selected blocks appended
Decoding step 55
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([449, 319, 467, 478,  29, 278, 117, 434, 466, 395, 271, 103, 457, 306,
        470, 251,  10,  61, 458, 391, 378,  31, 457, 185,  95, 244, 148, 276,
        346,  76, 299, 406, 465, 317, 253, 126,  28, 391, 272,   2, 292, 411,
        128, 288, 435, 301, 281, 393, 248,   8])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[449]],

        [[319]],

        [[467]],

        [[478]],

        [[ 29]],

        [[278]],

        [[117]],

        [[434]],

        [[466]],

        [[395]],

        [[271]],

        [[103]],

        [[457]],

        [[306]],

        [[470]],

        [[251]],

        [[ 10]],

        [[ 61]],

        [[458]],

        [[391]],

        [[378]],

        [[ 31]],

        [[457]],

        [[185]],

        [[ 95]],

        [[244]],

        [[148]],

        [[276]],

        [[346]],

        [[ 76]],

        [[299]],

        [[406]],

        [[465]],

        [[317]],

        [[253]],

        [[126]],

        [[ 28]],

        [[391]],

        [[272]],

        [[  2]],

        [[292]],

        [[411]],

        [[128]],

        [[288]],

        [[435]],

        [[301]],

        [[281]],

        [[393]],

        [[248]],

        [[  8]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[52.4603],
        [59.6604],
        [57.1769],
        [57.4548],
        [54.8154],
        [57.9200],
        [59.2180],
        [55.2551],
        [59.2304],
        [57.8540],
        [50.4845],
        [53.8873],
        [51.6276],
        [52.3336],
        [54.5792],
        [48.4815],
        [53.3843],
        [51.1565],
        [46.1447],
        [54.6777],
        [51.3548],
        [58.3347],
        [56.9557],
        [56.1765],
        [56.2748],
        [56.0598],
        [55.3128],
        [56.7489],
        [55.1712],
        [55.4068],
        [55.6395],
        [56.2254],
        [55.5627],
        [56.1033],
        [56.0657],
        [57.5524],
        [54.7869],
        [54.9467],
        [56.7058],
        [57.6241],
        [55.4282],
        [60.0920],
        [56.0324],
        [53.4601],
        [56.8305],
        [61.2120],
        [57.7589],
        [57.1516],
        [58.6102],
        [58.9909]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[52.4603],
        [59.6604],
        [57.1769],
        [57.4548],
        [54.8154],
        [57.9200],
        [59.2180],
        [55.2551],
        [59.2304],
        [57.8540],
        [50.4845],
        [53.8873],
        [51.6276],
        [52.3336],
        [54.5792],
        [48.4815],
        [53.3843],
        [51.1565],
        [46.1447],
        [54.6777],
        [51.3548],
        [58.3347],
        [56.9557],
        [56.1765],
        [56.2748],
        [56.0598],
        [55.3128],
        [56.7489],
        [55.1712],
        [55.4068],
        [55.6395],
        [56.2254],
        [55.5627],
        [56.1033],
        [56.0657],
        [57.5524],
        [54.7869],
        [54.9467],
        [56.7058],
        [57.6241],
        [55.4282],
        [60.0920],
        [56.0324],
        [53.4601],
        [56.8305],
        [61.2120],
        [57.7589],
        [57.1516],
        [58.6102],
        [58.9909]])
Selected blocks appended
Decoding step 56
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([245, 315, 113, 482,  71, 111,  44,  89,  91, 160, 117, 229, 191,  37,
        203,  26, 202, 281, 216, 277, 261, 436, 137, 145, 202, 101, 458, 285,
        184, 322, 114, 154,  59, 409, 162,  62, 333,  59, 260, 443, 491, 364,
        285, 155, 143, 168,  91,   9, 409,   2])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[245]],

        [[315]],

        [[113]],

        [[482]],

        [[ 71]],

        [[111]],

        [[ 44]],

        [[ 89]],

        [[ 91]],

        [[160]],

        [[117]],

        [[229]],

        [[191]],

        [[ 37]],

        [[203]],

        [[ 26]],

        [[202]],

        [[281]],

        [[216]],

        [[277]],

        [[261]],

        [[436]],

        [[137]],

        [[145]],

        [[202]],

        [[101]],

        [[458]],

        [[285]],

        [[184]],

        [[322]],

        [[114]],

        [[154]],

        [[ 59]],

        [[409]],

        [[162]],

        [[ 62]],

        [[333]],

        [[ 59]],

        [[260]],

        [[443]],

        [[491]],

        [[364]],

        [[285]],

        [[155]],

        [[143]],

        [[168]],

        [[ 91]],

        [[  9]],

        [[409]],

        [[  2]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[53.1847],
        [60.6335],
        [57.7901],
        [58.3665],
        [56.0212],
        [58.9787],
        [60.3916],
        [56.3321],
        [60.5013],
        [58.9825],
        [51.4492],
        [55.0062],
        [52.5266],
        [53.2916],
        [55.4298],
        [49.4532],
        [54.1129],
        [52.2174],
        [47.1642],
        [55.6915],
        [52.5826],
        [59.4444],
        [58.1608],
        [57.2384],
        [57.3015],
        [57.2912],
        [56.0070],
        [58.3872],
        [55.9885],
        [56.5927],
        [56.9399],
        [57.2711],
        [56.9864],
        [56.6647],
        [56.9629],
        [58.6213],
        [55.9231],
        [56.3704],
        [58.0262],
        [58.5699],
        [56.4263],
        [61.1231],
        [56.9454],
        [54.1243],
        [57.7513],
        [62.2794],
        [58.5998],
        [58.0406],
        [59.7847],
        [59.5094]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[53.1847],
        [60.6335],
        [57.7901],
        [58.3665],
        [56.0212],
        [58.9787],
        [60.3916],
        [56.3321],
        [60.5013],
        [58.9825],
        [51.4492],
        [55.0062],
        [52.5266],
        [53.2916],
        [55.4298],
        [49.4532],
        [54.1129],
        [52.2174],
        [47.1642],
        [55.6915],
        [52.5826],
        [59.4444],
        [58.1608],
        [57.2384],
        [57.3015],
        [57.2912],
        [56.0070],
        [58.3872],
        [55.9885],
        [56.5927],
        [56.9399],
        [57.2711],
        [56.9864],
        [56.6647],
        [56.9629],
        [58.6213],
        [55.9231],
        [56.3704],
        [58.0262],
        [58.5699],
        [56.4263],
        [61.1231],
        [56.9454],
        [54.1243],
        [57.7513],
        [62.2794],
        [58.5998],
        [58.0406],
        [59.7847],
        [59.5094]])
Selected blocks appended
Decoding step 57
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([476, 239, 192,  30, 302, 267, 457, 462, 411, 206, 371, 474,  61, 172,
        326, 367, 477, 162, 295,   4, 365, 359, 381, 307, 397,  57,  66, 281,
        226, 283, 242, 172, 185, 166, 413,  71,  72, 201, 339,  39, 464,  87,
        465, 285, 174, 186, 142, 179, 440,  96])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[476]],

        [[239]],

        [[192]],

        [[ 30]],

        [[302]],

        [[267]],

        [[457]],

        [[462]],

        [[411]],

        [[206]],

        [[371]],

        [[474]],

        [[ 61]],

        [[172]],

        [[326]],

        [[367]],

        [[477]],

        [[162]],

        [[295]],

        [[  4]],

        [[365]],

        [[359]],

        [[381]],

        [[307]],

        [[397]],

        [[ 57]],

        [[ 66]],

        [[281]],

        [[226]],

        [[283]],

        [[242]],

        [[172]],

        [[185]],

        [[166]],

        [[413]],

        [[ 71]],

        [[ 72]],

        [[201]],

        [[339]],

        [[ 39]],

        [[464]],

        [[ 87]],

        [[465]],

        [[285]],

        [[174]],

        [[186]],

        [[142]],

        [[179]],

        [[440]],

        [[ 96]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[54.2513],
        [61.1714],
        [58.4724],
        [59.3474],
        [57.1862],
        [60.0909],
        [61.2737],
        [57.9313],
        [61.0900],
        [60.4741],
        [52.6747],
        [56.0189],
        [53.3160],
        [54.1860],
        [56.3342],
        [50.9298],
        [54.8274],
        [53.3609],
        [47.8890],
        [56.9918],
        [53.4031],
        [60.1240],
        [59.4067],
        [58.1698],
        [58.1331],
        [57.9596],
        [57.0300],
        [59.1230],
        [57.2335],
        [57.5009],
        [58.2204],
        [58.4118],
        [57.9226],
        [57.5650],
        [58.0920],
        [59.5633],
        [56.9146],
        [57.7663],
        [58.9092],
        [59.5947],
        [57.1819],
        [61.6590],
        [57.9533],
        [55.0374],
        [59.2999],
        [63.5702],
        [59.8972],
        [58.9759],
        [60.7020],
        [59.9799]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[54.2513],
        [61.1714],
        [58.4724],
        [59.3474],
        [57.1862],
        [60.0909],
        [61.2737],
        [57.9313],
        [61.0900],
        [60.4741],
        [52.6747],
        [56.0189],
        [53.3160],
        [54.1860],
        [56.3342],
        [50.9298],
        [54.8274],
        [53.3609],
        [47.8890],
        [56.9918],
        [53.4031],
        [60.1240],
        [59.4067],
        [58.1698],
        [58.1331],
        [57.9596],
        [57.0300],
        [59.1230],
        [57.2335],
        [57.5009],
        [58.2204],
        [58.4118],
        [57.9226],
        [57.5650],
        [58.0920],
        [59.5633],
        [56.9146],
        [57.7663],
        [58.9092],
        [59.5947],
        [57.1819],
        [61.6590],
        [57.9533],
        [55.0374],
        [59.2999],
        [63.5702],
        [59.8972],
        [58.9759],
        [60.7020],
        [59.9799]])
Selected blocks appended
Decoding step 58
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([249, 376, 399, 223,  94,  12,  35, 245, 419, 365, 242, 340, 454,  42,
        187, 198, 133, 406,  44, 198, 277,  58, 375,  78, 431, 297,  23, 470,
        320, 116, 181,  39, 340, 199,  29, 243, 413, 401, 387, 169, 498, 143,
         30, 295,  40,  46, 494, 342, 251,  99])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[249]],

        [[376]],

        [[399]],

        [[223]],

        [[ 94]],

        [[ 12]],

        [[ 35]],

        [[245]],

        [[419]],

        [[365]],

        [[242]],

        [[340]],

        [[454]],

        [[ 42]],

        [[187]],

        [[198]],

        [[133]],

        [[406]],

        [[ 44]],

        [[198]],

        [[277]],

        [[ 58]],

        [[375]],

        [[ 78]],

        [[431]],

        [[297]],

        [[ 23]],

        [[470]],

        [[320]],

        [[116]],

        [[181]],

        [[ 39]],

        [[340]],

        [[199]],

        [[ 29]],

        [[243]],

        [[413]],

        [[401]],

        [[387]],

        [[169]],

        [[498]],

        [[143]],

        [[ 30]],

        [[295]],

        [[ 40]],

        [[ 46]],

        [[494]],

        [[342]],

        [[251]],

        [[ 99]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[55.7207],
        [61.8277],
        [59.4985],
        [60.0773],
        [58.1718],
        [61.2542],
        [62.1975],
        [58.6556],
        [62.1994],
        [61.6658],
        [53.6502],
        [57.4027],
        [53.6128],
        [54.8001],
        [57.6001],
        [51.4022],
        [55.1595],
        [54.2019],
        [48.6775],
        [57.4642],
        [54.6138],
        [60.9349],
        [60.1437],
        [59.1842],
        [58.8388],
        [59.4531],
        [57.9390],
        [59.6661],
        [58.0635],
        [58.4358],
        [58.9601],
        [59.4366],
        [58.7787],
        [58.4549],
        [58.9003],
        [60.4709],
        [58.0438],
        [58.7406],
        [59.9005],
        [60.3757],
        [58.1131],
        [62.5798],
        [58.5996],
        [56.2627],
        [59.8411],
        [65.1354],
        [61.0909],
        [59.9411],
        [61.8101],
        [61.2599]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[55.7207],
        [61.8277],
        [59.4985],
        [60.0773],
        [58.1718],
        [61.2542],
        [62.1975],
        [58.6556],
        [62.1994],
        [61.6658],
        [53.6502],
        [57.4027],
        [53.6128],
        [54.8001],
        [57.6001],
        [51.4022],
        [55.1595],
        [54.2019],
        [48.6775],
        [57.4642],
        [54.6138],
        [60.9349],
        [60.1437],
        [59.1842],
        [58.8388],
        [59.4531],
        [57.9390],
        [59.6661],
        [58.0635],
        [58.4358],
        [58.9601],
        [59.4366],
        [58.7787],
        [58.4549],
        [58.9003],
        [60.4709],
        [58.0438],
        [58.7406],
        [59.9005],
        [60.3757],
        [58.1131],
        [62.5798],
        [58.5996],
        [56.2627],
        [59.8411],
        [65.1354],
        [61.0909],
        [59.9411],
        [61.8101],
        [61.2599]])
Selected blocks appended
Decoding step 59
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([489, 185, 444, 117,  24, 151,  42, 393,  76,  55, 309, 252, 234, 165,
        254, 441, 461, 282, 471,  78, 451, 416, 246, 339, 243, 448, 479, 131,
        483, 321, 343, 105, 210, 184, 365, 166, 441, 402,  95, 145, 260, 390,
        405, 449, 432, 398,  77, 266, 302, 392])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[489]],

        [[185]],

        [[444]],

        [[117]],

        [[ 24]],

        [[151]],

        [[ 42]],

        [[393]],

        [[ 76]],

        [[ 55]],

        [[309]],

        [[252]],

        [[234]],

        [[165]],

        [[254]],

        [[441]],

        [[461]],

        [[282]],

        [[471]],

        [[ 78]],

        [[451]],

        [[416]],

        [[246]],

        [[339]],

        [[243]],

        [[448]],

        [[479]],

        [[131]],

        [[483]],

        [[321]],

        [[343]],

        [[105]],

        [[210]],

        [[184]],

        [[365]],

        [[166]],

        [[441]],

        [[402]],

        [[ 95]],

        [[145]],

        [[260]],

        [[390]],

        [[405]],

        [[449]],

        [[432]],

        [[398]],

        [[ 77]],

        [[266]],

        [[302]],

        [[392]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[56.6091],
        [63.0982],
        [60.4648],
        [60.7243],
        [59.1720],
        [62.2963],
        [63.6801],
        [59.6297],
        [63.0326],
        [62.4782],
        [54.9520],
        [58.3883],
        [54.6669],
        [55.9818],
        [58.4917],
        [52.1586],
        [56.1540],
        [54.9304],
        [49.4780],
        [58.3374],
        [55.4928],
        [61.8030],
        [61.3622],
        [60.6035],
        [60.1545],
        [60.2817],
        [58.7576],
        [60.8776],
        [59.0417],
        [59.5839],
        [59.7181],
        [60.8149],
        [59.3561],
        [59.9897],
        [59.8520],
        [61.3712],
        [59.2971],
        [59.9866],
        [61.0239],
        [61.1040],
        [59.0340],
        [63.8031],
        [59.6542],
        [57.4713],
        [60.4403],
        [66.3892],
        [62.0572],
        [60.8281],
        [63.4460],
        [62.2251]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[56.6091],
        [63.0982],
        [60.4648],
        [60.7243],
        [59.1720],
        [62.2963],
        [63.6801],
        [59.6297],
        [63.0326],
        [62.4782],
        [54.9520],
        [58.3883],
        [54.6669],
        [55.9818],
        [58.4917],
        [52.1586],
        [56.1540],
        [54.9304],
        [49.4780],
        [58.3374],
        [55.4928],
        [61.8030],
        [61.3622],
        [60.6035],
        [60.1545],
        [60.2817],
        [58.7576],
        [60.8776],
        [59.0417],
        [59.5839],
        [59.7181],
        [60.8149],
        [59.3561],
        [59.9897],
        [59.8520],
        [61.3712],
        [59.2971],
        [59.9866],
        [61.0239],
        [61.1040],
        [59.0340],
        [63.8031],
        [59.6542],
        [57.4713],
        [60.4403],
        [66.3892],
        [62.0572],
        [60.8281],
        [63.4460],
        [62.2251]])
Selected blocks appended
Decoding step 60
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 81, 147, 381, 448, 188, 121, 131, 107,  17,  43, 159, 268, 490,  31,
        241, 314, 347, 163, 254, 219, 133, 480, 313, 149, 218,  15,  32,  74,
        110, 419, 391,  47, 333, 168, 230, 160, 124,  71, 443,  20, 410,  97,
        214,  49, 117,  86, 319, 228,  86,  20])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 81]],

        [[147]],

        [[381]],

        [[448]],

        [[188]],

        [[121]],

        [[131]],

        [[107]],

        [[ 17]],

        [[ 43]],

        [[159]],

        [[268]],

        [[490]],

        [[ 31]],

        [[241]],

        [[314]],

        [[347]],

        [[163]],

        [[254]],

        [[219]],

        [[133]],

        [[480]],

        [[313]],

        [[149]],

        [[218]],

        [[ 15]],

        [[ 32]],

        [[ 74]],

        [[110]],

        [[419]],

        [[391]],

        [[ 47]],

        [[333]],

        [[168]],

        [[230]],

        [[160]],

        [[124]],

        [[ 71]],

        [[443]],

        [[ 20]],

        [[410]],

        [[ 97]],

        [[214]],

        [[ 49]],

        [[117]],

        [[ 86]],

        [[319]],

        [[228]],

        [[ 86]],

        [[ 20]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[57.4234],
        [64.0286],
        [61.5379],
        [61.4629],
        [60.0575],
        [63.2292],
        [64.4678],
        [60.5942],
        [64.1470],
        [63.8620],
        [56.1297],
        [59.7002],
        [55.7934],
        [57.1287],
        [59.4228],
        [53.5974],
        [56.9183],
        [56.0418],
        [50.3695],
        [59.3591],
        [56.5381],
        [62.7572],
        [61.6993],
        [61.3296],
        [61.1529],
        [61.2075],
        [59.7032],
        [61.8690],
        [60.4163],
        [61.0554],
        [60.4936],
        [61.9403],
        [60.4924],
        [61.1318],
        [60.7970],
        [61.8034],
        [60.6370],
        [60.9285],
        [61.9698],
        [62.2761],
        [59.9815],
        [64.7869],
        [60.3152],
        [58.3015],
        [61.2092],
        [67.3499],
        [62.8542],
        [61.7199],
        [64.4066],
        [63.3511]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[57.4234],
        [64.0286],
        [61.5379],
        [61.4629],
        [60.0575],
        [63.2292],
        [64.4678],
        [60.5942],
        [64.1470],
        [63.8620],
        [56.1297],
        [59.7002],
        [55.7934],
        [57.1287],
        [59.4228],
        [53.5974],
        [56.9183],
        [56.0418],
        [50.3695],
        [59.3591],
        [56.5381],
        [62.7572],
        [61.6993],
        [61.3296],
        [61.1529],
        [61.2075],
        [59.7032],
        [61.8690],
        [60.4163],
        [61.0554],
        [60.4936],
        [61.9403],
        [60.4924],
        [61.1318],
        [60.7970],
        [61.8034],
        [60.6370],
        [60.9285],
        [61.9698],
        [62.2761],
        [59.9815],
        [64.7869],
        [60.3152],
        [58.3015],
        [61.2092],
        [67.3499],
        [62.8542],
        [61.7199],
        [64.4066],
        [63.3511]])
Selected blocks appended
Decoding step 61
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([135, 142, 362, 121, 261, 194, 469,  47, 343, 137, 378, 418, 171,  83,
        275,  60,  15, 204, 298, 270, 408, 397, 490, 175, 296, 231, 430,  71,
         80,  69, 166, 245, 141, 288, 245, 350, 361,  20, 412, 318,  50, 299,
          9, 259, 466,  35, 397, 321, 175, 123])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[135]],

        [[142]],

        [[362]],

        [[121]],

        [[261]],

        [[194]],

        [[469]],

        [[ 47]],

        [[343]],

        [[137]],

        [[378]],

        [[418]],

        [[171]],

        [[ 83]],

        [[275]],

        [[ 60]],

        [[ 15]],

        [[204]],

        [[298]],

        [[270]],

        [[408]],

        [[397]],

        [[490]],

        [[175]],

        [[296]],

        [[231]],

        [[430]],

        [[ 71]],

        [[ 80]],

        [[ 69]],

        [[166]],

        [[245]],

        [[141]],

        [[288]],

        [[245]],

        [[350]],

        [[361]],

        [[ 20]],

        [[412]],

        [[318]],

        [[ 50]],

        [[299]],

        [[  9]],

        [[259]],

        [[466]],

        [[ 35]],

        [[397]],

        [[321]],

        [[175]],

        [[123]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[58.0977],
        [64.8644],
        [62.3858],
        [62.3958],
        [60.7752],
        [63.7283],
        [65.3319],
        [61.3113],
        [65.6618],
        [65.0486],
        [56.9645],
        [60.9396],
        [56.9765],
        [58.2826],
        [60.4195],
        [54.3661],
        [57.5781],
        [56.5562],
        [51.2321],
        [60.5291],
        [57.5571],
        [63.5888],
        [62.4992],
        [61.9092],
        [62.5800],
        [61.9555],
        [60.9315],
        [63.0807],
        [61.5349],
        [62.1559],
        [61.3939],
        [62.9961],
        [61.5797],
        [61.9035],
        [61.8529],
        [62.7584],
        [61.4574],
        [62.1006],
        [62.9213],
        [63.5178],
        [61.1766],
        [65.6367],
        [61.2043],
        [59.0170],
        [62.2698],
        [68.2221],
        [63.6721],
        [62.8884],
        [65.8548],
        [63.6343]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[58.0977],
        [64.8644],
        [62.3858],
        [62.3958],
        [60.7752],
        [63.7283],
        [65.3319],
        [61.3113],
        [65.6618],
        [65.0486],
        [56.9645],
        [60.9396],
        [56.9765],
        [58.2826],
        [60.4195],
        [54.3661],
        [57.5781],
        [56.5562],
        [51.2321],
        [60.5291],
        [57.5571],
        [63.5888],
        [62.4992],
        [61.9092],
        [62.5800],
        [61.9555],
        [60.9315],
        [63.0807],
        [61.5349],
        [62.1559],
        [61.3939],
        [62.9961],
        [61.5797],
        [61.9035],
        [61.8529],
        [62.7584],
        [61.4574],
        [62.1006],
        [62.9213],
        [63.5178],
        [61.1766],
        [65.6367],
        [61.2043],
        [59.0170],
        [62.2698],
        [68.2221],
        [63.6721],
        [62.8884],
        [65.8548],
        [63.6343]])
Selected blocks appended
Decoding step 62
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([142, 481, 159,  35,  34,  30, 298, 427, 218,  10, 280, 326,   2, 307,
        300,  24, 421, 315,  38, 126, 437, 104, 215, 432, 155,  34, 172, 259,
        451, 402, 453, 332, 201, 395, 339,  69, 277, 222, 165, 338, 392, 226,
        429, 278, 402, 288, 325,  85, 417, 383])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[142]],

        [[481]],

        [[159]],

        [[ 35]],

        [[ 34]],

        [[ 30]],

        [[298]],

        [[427]],

        [[218]],

        [[ 10]],

        [[280]],

        [[326]],

        [[  2]],

        [[307]],

        [[300]],

        [[ 24]],

        [[421]],

        [[315]],

        [[ 38]],

        [[126]],

        [[437]],

        [[104]],

        [[215]],

        [[432]],

        [[155]],

        [[ 34]],

        [[172]],

        [[259]],

        [[451]],

        [[402]],

        [[453]],

        [[332]],

        [[201]],

        [[395]],

        [[339]],

        [[ 69]],

        [[277]],

        [[222]],

        [[165]],

        [[338]],

        [[392]],

        [[226]],

        [[429]],

        [[278]],

        [[402]],

        [[288]],

        [[325]],

        [[ 85]],

        [[417]],

        [[383]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[58.9336],
        [65.2773],
        [63.4951],
        [63.3196],
        [61.8775],
        [64.7092],
        [66.2669],
        [62.6152],
        [66.5413],
        [65.5601],
        [58.4577],
        [61.8440],
        [58.1345],
        [59.3858],
        [61.5523],
        [55.3481],
        [58.5279],
        [57.6960],
        [52.1301],
        [61.3225],
        [58.8106],
        [64.5721],
        [63.8483],
        [62.9474],
        [63.6455],
        [63.0820],
        [62.1210],
        [63.5808],
        [62.4139],
        [62.8785],
        [62.4464],
        [63.9686],
        [62.9756],
        [62.8927],
        [62.7359],
        [63.7248],
        [62.5486],
        [62.8213],
        [63.8783],
        [64.6530],
        [62.1417],
        [66.7105],
        [62.2711],
        [59.9617],
        [63.3282],
        [69.3960],
        [64.7122],
        [64.0388],
        [66.8930],
        [64.4249]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[58.9336],
        [65.2773],
        [63.4951],
        [63.3196],
        [61.8775],
        [64.7092],
        [66.2669],
        [62.6152],
        [66.5413],
        [65.5601],
        [58.4577],
        [61.8440],
        [58.1345],
        [59.3858],
        [61.5523],
        [55.3481],
        [58.5279],
        [57.6960],
        [52.1301],
        [61.3225],
        [58.8106],
        [64.5721],
        [63.8483],
        [62.9474],
        [63.6455],
        [63.0820],
        [62.1210],
        [63.5808],
        [62.4139],
        [62.8785],
        [62.4464],
        [63.9686],
        [62.9756],
        [62.8927],
        [62.7359],
        [63.7248],
        [62.5486],
        [62.8213],
        [63.8783],
        [64.6530],
        [62.1417],
        [66.7105],
        [62.2711],
        [59.9617],
        [63.3282],
        [69.3960],
        [64.7122],
        [64.0388],
        [66.8930],
        [64.4249]])
Selected blocks appended
Decoding step 63
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([458, 103, 174, 472, 375, 225, 430, 482, 326, 193, 496, 204, 485,  61,
        207, 194, 115, 473, 320,  12, 411,  75,  39, 112, 221, 327, 407, 261,
        469, 215, 326, 177, 216, 340,  61, 337,  83, 390, 202,  38, 482, 149,
        375, 438, 200,  63, 307, 244, 152, 380])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[458]],

        [[103]],

        [[174]],

        [[472]],

        [[375]],

        [[225]],

        [[430]],

        [[482]],

        [[326]],

        [[193]],

        [[496]],

        [[204]],

        [[485]],

        [[ 61]],

        [[207]],

        [[194]],

        [[115]],

        [[473]],

        [[320]],

        [[ 12]],

        [[411]],

        [[ 75]],

        [[ 39]],

        [[112]],

        [[221]],

        [[327]],

        [[407]],

        [[261]],

        [[469]],

        [[215]],

        [[326]],

        [[177]],

        [[216]],

        [[340]],

        [[ 61]],

        [[337]],

        [[ 83]],

        [[390]],

        [[202]],

        [[ 38]],

        [[482]],

        [[149]],

        [[375]],

        [[438]],

        [[200]],

        [[ 63]],

        [[307]],

        [[244]],

        [[152]],

        [[380]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[59.5700],
        [66.1362],
        [64.9377],
        [64.4475],
        [62.8250],
        [66.1631],
        [67.1843],
        [63.5270],
        [67.7019],
        [66.3417],
        [59.9446],
        [62.3583],
        [58.8184],
        [60.1752],
        [62.4573],
        [56.3907],
        [59.5196],
        [58.7096],
        [53.5679],
        [62.0428],
        [59.8629],
        [65.0482],
        [64.9196],
        [63.8329],
        [64.8869],
        [64.0870],
        [63.1381],
        [64.8086],
        [63.3881],
        [64.2275],
        [63.4198],
        [64.9070],
        [64.2910],
        [63.7488],
        [63.6318],
        [64.9790],
        [63.5657],
        [63.9242],
        [64.8689],
        [65.5319],
        [63.0435],
        [67.4815],
        [63.4870],
        [60.6205],
        [64.0509],
        [70.6000],
        [66.1958],
        [64.8865],
        [68.3412],
        [65.4320]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[59.5700],
        [66.1362],
        [64.9377],
        [64.4475],
        [62.8250],
        [66.1631],
        [67.1843],
        [63.5270],
        [67.7019],
        [66.3417],
        [59.9446],
        [62.3583],
        [58.8184],
        [60.1752],
        [62.4573],
        [56.3907],
        [59.5196],
        [58.7096],
        [53.5679],
        [62.0428],
        [59.8629],
        [65.0482],
        [64.9196],
        [63.8329],
        [64.8869],
        [64.0870],
        [63.1381],
        [64.8086],
        [63.3881],
        [64.2275],
        [63.4198],
        [64.9070],
        [64.2910],
        [63.7488],
        [63.6318],
        [64.9790],
        [63.5657],
        [63.9242],
        [64.8689],
        [65.5319],
        [63.0435],
        [67.4815],
        [63.4870],
        [60.6205],
        [64.0509],
        [70.6000],
        [66.1958],
        [64.8865],
        [68.3412],
        [65.4320]])
Selected blocks appended
Decoding step 64
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([115,  23, 127, 246, 413, 441, 441,  37, 109, 249, 133, 355, 137, 346,
        197, 155,  12, 143, 440, 313, 348, 393, 157, 378, 156,  96, 155, 452,
        359, 391, 323, 486, 118, 126, 267,  67, 464, 474, 131, 370, 111,  15,
        344, 190, 295, 273, 201, 347,  42, 170])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[115]],

        [[ 23]],

        [[127]],

        [[246]],

        [[413]],

        [[441]],

        [[441]],

        [[ 37]],

        [[109]],

        [[249]],

        [[133]],

        [[355]],

        [[137]],

        [[346]],

        [[197]],

        [[155]],

        [[ 12]],

        [[143]],

        [[440]],

        [[313]],

        [[348]],

        [[393]],

        [[157]],

        [[378]],

        [[156]],

        [[ 96]],

        [[155]],

        [[452]],

        [[359]],

        [[391]],

        [[323]],

        [[486]],

        [[118]],

        [[126]],

        [[267]],

        [[ 67]],

        [[464]],

        [[474]],

        [[131]],

        [[370]],

        [[111]],

        [[ 15]],

        [[344]],

        [[190]],

        [[295]],

        [[273]],

        [[201]],

        [[347]],

        [[ 42]],

        [[170]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[60.1318],
        [67.2803],
        [65.9925],
        [65.7504],
        [64.1372],
        [66.8866],
        [67.9079],
        [64.8966],
        [68.8719],
        [67.8111],
        [60.2767],
        [63.6876],
        [59.5431],
        [60.8509],
        [62.9524],
        [57.4607],
        [60.2400],
        [59.5978],
        [54.6691],
        [62.6147],
        [60.8336],
        [66.6122],
        [65.8513],
        [64.7308],
        [66.0608],
        [64.7313],
        [64.2036],
        [66.0963],
        [64.0678],
        [65.5123],
        [64.4522],
        [65.8970],
        [64.9683],
        [65.2937],
        [65.2293],
        [65.8323],
        [64.8004],
        [64.6516],
        [66.0618],
        [66.8096],
        [63.9077],
        [68.3485],
        [65.0470],
        [61.8402],
        [65.2762],
        [71.5278],
        [67.3670],
        [66.0181],
        [69.3392],
        [66.7323]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[60.1318],
        [67.2803],
        [65.9925],
        [65.7504],
        [64.1372],
        [66.8866],
        [67.9079],
        [64.8966],
        [68.8719],
        [67.8111],
        [60.2767],
        [63.6876],
        [59.5431],
        [60.8509],
        [62.9524],
        [57.4607],
        [60.2400],
        [59.5978],
        [54.6691],
        [62.6147],
        [60.8336],
        [66.6122],
        [65.8513],
        [64.7308],
        [66.0608],
        [64.7313],
        [64.2036],
        [66.0963],
        [64.0678],
        [65.5123],
        [64.4522],
        [65.8970],
        [64.9683],
        [65.2937],
        [65.2293],
        [65.8323],
        [64.8004],
        [64.6516],
        [66.0618],
        [66.8096],
        [63.9077],
        [68.3485],
        [65.0470],
        [61.8402],
        [65.2762],
        [71.5278],
        [67.3670],
        [66.0181],
        [69.3392],
        [66.7323]])
Selected blocks appended
Decoding step 65
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([436, 356, 179, 437, 263, 145,   7,   0, 108,  66, 125, 306, 245, 157,
        130, 356, 142, 264,  23,  39, 394, 412, 402, 334,  80, 394, 251, 186,
          6, 165, 122,  75, 119, 241, 391, 258,   4, 442, 346, 465, 195, 308,
        348, 323, 182, 493,  78, 232, 294, 137])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[436]],

        [[356]],

        [[179]],

        [[437]],

        [[263]],

        [[145]],

        [[  7]],

        [[  0]],

        [[108]],

        [[ 66]],

        [[125]],

        [[306]],

        [[245]],

        [[157]],

        [[130]],

        [[356]],

        [[142]],

        [[264]],

        [[ 23]],

        [[ 39]],

        [[394]],

        [[412]],

        [[402]],

        [[334]],

        [[ 80]],

        [[394]],

        [[251]],

        [[186]],

        [[  6]],

        [[165]],

        [[122]],

        [[ 75]],

        [[119]],

        [[241]],

        [[391]],

        [[258]],

        [[  4]],

        [[442]],

        [[346]],

        [[465]],

        [[195]],

        [[308]],

        [[348]],

        [[323]],

        [[182]],

        [[493]],

        [[ 78]],

        [[232]],

        [[294]],

        [[137]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[60.7818],
        [68.1087],
        [67.2201],
        [66.3382],
        [64.9454],
        [68.1067],
        [68.8173],
        [65.8117],
        [70.0547],
        [68.3776],
        [60.9736],
        [64.5917],
        [60.0926],
        [61.5635],
        [63.9923],
        [58.3489],
        [60.9923],
        [60.7856],
        [55.4968],
        [63.2982],
        [61.4478],
        [67.7137],
        [66.5739],
        [65.4013],
        [67.1793],
        [65.3455],
        [65.5974],
        [67.3543],
        [65.1037],
        [66.5578],
        [65.3930],
        [66.6238],
        [65.9664],
        [66.0786],
        [66.0047],
        [66.7121],
        [65.7475],
        [65.6429],
        [67.0094],
        [68.1267],
        [64.7085],
        [69.5055],
        [66.0828],
        [63.0383],
        [66.4914],
        [72.5413],
        [68.1885],
        [66.5602],
        [70.0051],
        [67.7901]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[60.7818],
        [68.1087],
        [67.2201],
        [66.3382],
        [64.9454],
        [68.1067],
        [68.8173],
        [65.8117],
        [70.0547],
        [68.3776],
        [60.9736],
        [64.5917],
        [60.0926],
        [61.5635],
        [63.9923],
        [58.3489],
        [60.9923],
        [60.7856],
        [55.4968],
        [63.2982],
        [61.4478],
        [67.7137],
        [66.5739],
        [65.4013],
        [67.1793],
        [65.3455],
        [65.5974],
        [67.3543],
        [65.1037],
        [66.5578],
        [65.3930],
        [66.6238],
        [65.9664],
        [66.0786],
        [66.0047],
        [66.7121],
        [65.7475],
        [65.6429],
        [67.0094],
        [68.1267],
        [64.7085],
        [69.5055],
        [66.0828],
        [63.0383],
        [66.4914],
        [72.5413],
        [68.1885],
        [66.5602],
        [70.0051],
        [67.7901]])
Selected blocks appended
Decoding step 66
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([147, 193, 101, 466, 439, 138, 323, 330, 202,  73, 493, 251,  30,  78,
        249, 465,  94, 488, 408,  68, 340, 196, 459, 147, 319, 303, 171, 198,
        341, 404,  47, 371, 238, 440, 174,  72, 406, 254,  66, 332,  71, 450,
        265, 131, 123, 262, 232, 452, 327, 231])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[147]],

        [[193]],

        [[101]],

        [[466]],

        [[439]],

        [[138]],

        [[323]],

        [[330]],

        [[202]],

        [[ 73]],

        [[493]],

        [[251]],

        [[ 30]],

        [[ 78]],

        [[249]],

        [[465]],

        [[ 94]],

        [[488]],

        [[408]],

        [[ 68]],

        [[340]],

        [[196]],

        [[459]],

        [[147]],

        [[319]],

        [[303]],

        [[171]],

        [[198]],

        [[341]],

        [[404]],

        [[ 47]],

        [[371]],

        [[238]],

        [[440]],

        [[174]],

        [[ 72]],

        [[406]],

        [[254]],

        [[ 66]],

        [[332]],

        [[ 71]],

        [[450]],

        [[265]],

        [[131]],

        [[123]],

        [[262]],

        [[232]],

        [[452]],

        [[327]],

        [[231]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[61.7122],
        [68.8902],
        [68.1708],
        [67.2726],
        [66.2493],
        [69.3701],
        [69.7369],
        [66.9401],
        [71.2017],
        [69.3590],
        [61.9860],
        [65.6087],
        [61.3595],
        [62.4367],
        [65.1839],
        [59.2830],
        [62.0984],
        [61.8688],
        [56.4962],
        [64.0464],
        [62.2229],
        [68.4741],
        [68.2668],
        [65.9587],
        [68.2826],
        [66.4551],
        [66.9900],
        [68.6613],
        [65.8950],
        [67.5571],
        [66.5184],
        [67.5071],
        [67.1415],
        [67.0007],
        [66.7222],
        [67.7037],
        [66.9273],
        [67.1233],
        [67.6813],
        [69.0992],
        [65.8358],
        [70.6730],
        [67.2898],
        [63.7783],
        [66.7746],
        [73.6919],
        [68.7306],
        [67.6895],
        [70.4409],
        [68.8437]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[61.7122],
        [68.8902],
        [68.1708],
        [67.2726],
        [66.2493],
        [69.3701],
        [69.7369],
        [66.9401],
        [71.2017],
        [69.3590],
        [61.9860],
        [65.6087],
        [61.3595],
        [62.4367],
        [65.1839],
        [59.2830],
        [62.0984],
        [61.8688],
        [56.4962],
        [64.0464],
        [62.2229],
        [68.4741],
        [68.2668],
        [65.9587],
        [68.2826],
        [66.4551],
        [66.9900],
        [68.6613],
        [65.8950],
        [67.5571],
        [66.5184],
        [67.5071],
        [67.1415],
        [67.0007],
        [66.7222],
        [67.7037],
        [66.9273],
        [67.1233],
        [67.6813],
        [69.0992],
        [65.8358],
        [70.6730],
        [67.2898],
        [63.7783],
        [66.7746],
        [73.6919],
        [68.7306],
        [67.6895],
        [70.4409],
        [68.8437]])
Selected blocks appended
Decoding step 67
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([347,  79, 345, 104, 364,  37, 497, 431,  62, 190, 314, 458,  52, 387,
        363, 368, 138,  89, 321, 103,   7, 170,  58, 416, 459, 400, 426, 235,
        147,  25, 295,  48, 353,  80, 358, 128, 132, 448, 392, 239, 439,  28,
        346, 271, 328, 454, 416, 236, 103, 242])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[347]],

        [[ 79]],

        [[345]],

        [[104]],

        [[364]],

        [[ 37]],

        [[497]],

        [[431]],

        [[ 62]],

        [[190]],

        [[314]],

        [[458]],

        [[ 52]],

        [[387]],

        [[363]],

        [[368]],

        [[138]],

        [[ 89]],

        [[321]],

        [[103]],

        [[  7]],

        [[170]],

        [[ 58]],

        [[416]],

        [[459]],

        [[400]],

        [[426]],

        [[235]],

        [[147]],

        [[ 25]],

        [[295]],

        [[ 48]],

        [[353]],

        [[ 80]],

        [[358]],

        [[128]],

        [[132]],

        [[448]],

        [[392]],

        [[239]],

        [[439]],

        [[ 28]],

        [[346]],

        [[271]],

        [[328]],

        [[454]],

        [[416]],

        [[236]],

        [[103]],

        [[242]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[62.9632],
        [70.0645],
        [69.5977],
        [68.1100],
        [67.4120],
        [70.7398],
        [71.1970],
        [67.9045],
        [72.5530],
        [70.2711],
        [63.4249],
        [66.2830],
        [62.4102],
        [63.2051],
        [66.2356],
        [59.9240],
        [63.0002],
        [62.6627],
        [57.4820],
        [65.0168],
        [63.4792],
        [69.5782],
        [69.0777],
        [66.8268],
        [69.9755],
        [67.7813],
        [68.0354],
        [69.8031],
        [66.4524],
        [68.9166],
        [67.9354],
        [68.6117],
        [67.9699],
        [68.1268],
        [67.7230],
        [68.5152],
        [67.8402],
        [68.4445],
        [68.8344],
        [69.9882],
        [66.5725],
        [71.5167],
        [68.6798],
        [65.1041],
        [67.8659],
        [74.3774],
        [70.0563],
        [68.4557],
        [71.1749],
        [69.9965]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[0, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[62.9632],
        [70.0645],
        [69.5977],
        [68.1100],
        [67.4120],
        [70.7398],
        [71.1970],
        [67.9045],
        [72.5530],
        [70.2711],
        [63.4249],
        [66.2830],
        [62.4102],
        [63.2051],
        [66.2356],
        [59.9240],
        [63.0002],
        [62.6627],
        [57.4820],
        [65.0168],
        [63.4792],
        [69.5782],
        [69.0777],
        [66.8268],
        [69.9755],
        [67.7813],
        [68.0354],
        [69.8031],
        [66.4524],
        [68.9166],
        [67.9354],
        [68.6117],
        [67.9699],
        [68.1268],
        [67.7230],
        [68.5152],
        [67.8402],
        [68.4445],
        [68.8344],
        [69.9882],
        [66.5725],
        [71.5167],
        [68.6798],
        [65.1041],
        [67.8659],
        [74.3774],
        [70.0563],
        [68.4557],
        [71.1749],
        [69.9965]])
Selected blocks appended
Decoding step 68
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([316, 156,  36,   5,  87, 366,  13, 280, 489, 423, 252, 185, 295, 104,
        494, 481, 358,  65, 266,  29,  27, 340, 248, 463, 192, 309, 126, 299,
         60, 420, 206, 362, 128, 342, 106, 138, 154, 477, 296, 166, 466, 268,
        216, 216, 213,  56, 439,   0, 432, 113])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[316]],

        [[156]],

        [[ 36]],

        [[  5]],

        [[ 87]],

        [[366]],

        [[ 13]],

        [[280]],

        [[489]],

        [[423]],

        [[252]],

        [[185]],

        [[295]],

        [[104]],

        [[494]],

        [[481]],

        [[358]],

        [[ 65]],

        [[266]],

        [[ 29]],

        [[ 27]],

        [[340]],

        [[248]],

        [[463]],

        [[192]],

        [[309]],

        [[126]],

        [[299]],

        [[ 60]],

        [[420]],

        [[206]],

        [[362]],

        [[128]],

        [[342]],

        [[106]],

        [[138]],

        [[154]],

        [[477]],

        [[296]],

        [[166]],

        [[466]],

        [[268]],

        [[216]],

        [[216]],

        [[213]],

        [[ 56]],

        [[439]],

        [[  0]],

        [[432]],

        [[113]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[64.0372],
        [71.2279],
        [70.5186],
        [69.0566],
        [68.4298],
        [71.7202],
        [72.4605],
        [69.0633],
        [73.4413],
        [71.0133],
        [64.4104],
        [67.0744],
        [63.1350],
        [64.1898],
        [66.8927],
        [60.6775],
        [63.9244],
        [63.0933],
        [58.6140],
        [65.7904],
        [64.5195],
        [70.3533],
        [70.3296],
        [68.0206],
        [71.4854],
        [68.5500],
        [69.4990],
        [70.7542],
        [67.5294],
        [69.9047],
        [69.0730],
        [69.5786],
        [68.7814],
        [68.8295],
        [68.5012],
        [69.4485],
        [68.8859],
        [69.3475],
        [70.0118],
        [70.8885],
        [67.6331],
        [72.4456],
        [70.0399],
        [66.4642],
        [69.4322],
        [75.1275],
        [70.7930],
        [69.1735],
        [71.7741],
        [70.7689]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[64.0372],
        [71.2279],
        [70.5186],
        [69.0566],
        [68.4298],
        [71.7202],
        [72.4605],
        [69.0633],
        [73.4413],
        [71.0133],
        [64.4104],
        [67.0744],
        [63.1350],
        [64.1898],
        [66.8927],
        [60.6775],
        [63.9244],
        [63.0933],
        [58.6140],
        [65.7904],
        [64.5195],
        [70.3533],
        [70.3296],
        [68.0206],
        [71.4854],
        [68.5500],
        [69.4990],
        [70.7542],
        [67.5294],
        [69.9047],
        [69.0730],
        [69.5786],
        [68.7814],
        [68.8295],
        [68.5012],
        [69.4485],
        [68.8859],
        [69.3475],
        [70.0118],
        [70.8885],
        [67.6331],
        [72.4456],
        [70.0399],
        [66.4642],
        [69.4322],
        [75.1275],
        [70.7930],
        [69.1735],
        [71.7741],
        [70.7689]])
Selected blocks appended
Decoding step 69
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([333,  76, 341, 150,  25,  14,  48, 165,  34, 275, 247, 468,   5, 320,
         53, 431, 483, 201,  83, 252, 172, 488, 288, 472, 332, 392, 409, 246,
         19, 350,  26, 440,  19, 172, 112, 245, 197, 216, 140, 136, 150, 115,
        254, 321, 417, 472, 143, 277, 223, 251])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[333]],

        [[ 76]],

        [[341]],

        [[150]],

        [[ 25]],

        [[ 14]],

        [[ 48]],

        [[165]],

        [[ 34]],

        [[275]],

        [[247]],

        [[468]],

        [[  5]],

        [[320]],

        [[ 53]],

        [[431]],

        [[483]],

        [[201]],

        [[ 83]],

        [[252]],

        [[172]],

        [[488]],

        [[288]],

        [[472]],

        [[332]],

        [[392]],

        [[409]],

        [[246]],

        [[ 19]],

        [[350]],

        [[ 26]],

        [[440]],

        [[ 19]],

        [[172]],

        [[112]],

        [[245]],

        [[197]],

        [[216]],

        [[140]],

        [[136]],

        [[150]],

        [[115]],

        [[254]],

        [[321]],

        [[417]],

        [[472]],

        [[143]],

        [[277]],

        [[223]],

        [[251]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[64.9531],
        [72.0611],
        [71.3370],
        [70.0132],
        [68.8675],
        [72.6142],
        [73.4421],
        [70.0758],
        [74.5436],
        [72.0955],
        [65.5395],
        [67.9961],
        [64.2220],
        [65.6276],
        [67.3965],
        [61.5587],
        [65.1664],
        [63.8472],
        [59.7679],
        [66.7760],
        [65.7090],
        [71.3112],
        [71.0847],
        [68.9342],
        [72.1967],
        [69.8819],
        [70.2414],
        [71.9727],
        [68.0696],
        [70.8618],
        [69.9678],
        [70.5007],
        [69.7406],
        [69.9703],
        [69.7912],
        [70.5043],
        [69.8757],
        [70.6629],
        [70.7676],
        [72.4217],
        [68.5907],
        [73.5842],
        [70.8473],
        [67.6327],
        [70.4704],
        [75.8769],
        [71.7138],
        [70.6701],
        [72.5126],
        [71.8769]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[64.9531],
        [72.0611],
        [71.3370],
        [70.0132],
        [68.8675],
        [72.6142],
        [73.4421],
        [70.0758],
        [74.5436],
        [72.0955],
        [65.5395],
        [67.9961],
        [64.2220],
        [65.6276],
        [67.3965],
        [61.5587],
        [65.1664],
        [63.8472],
        [59.7679],
        [66.7760],
        [65.7090],
        [71.3112],
        [71.0847],
        [68.9342],
        [72.1967],
        [69.8819],
        [70.2414],
        [71.9727],
        [68.0696],
        [70.8618],
        [69.9678],
        [70.5007],
        [69.7406],
        [69.9703],
        [69.7912],
        [70.5043],
        [69.8757],
        [70.6629],
        [70.7676],
        [72.4217],
        [68.5907],
        [73.5842],
        [70.8473],
        [67.6327],
        [70.4704],
        [75.8769],
        [71.7138],
        [70.6701],
        [72.5126],
        [71.8769]])
Selected blocks appended
Decoding step 70
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([312, 114, 111, 109, 112, 392,  70, 381, 486,  98, 182, 119, 279, 413,
        289,  10, 222, 149,  74, 462, 132,  61, 249, 159, 399, 350, 184, 162,
         95, 264,  11,  50, 234, 272, 338, 187, 182, 163, 275,   4, 377, 356,
        406, 488, 410, 130, 377, 451, 427,  67])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[312]],

        [[114]],

        [[111]],

        [[109]],

        [[112]],

        [[392]],

        [[ 70]],

        [[381]],

        [[486]],

        [[ 98]],

        [[182]],

        [[119]],

        [[279]],

        [[413]],

        [[289]],

        [[ 10]],

        [[222]],

        [[149]],

        [[ 74]],

        [[462]],

        [[132]],

        [[ 61]],

        [[249]],

        [[159]],

        [[399]],

        [[350]],

        [[184]],

        [[162]],

        [[ 95]],

        [[264]],

        [[ 11]],

        [[ 50]],

        [[234]],

        [[272]],

        [[338]],

        [[187]],

        [[182]],

        [[163]],

        [[275]],

        [[  4]],

        [[377]],

        [[356]],

        [[406]],

        [[488]],

        [[410]],

        [[130]],

        [[377]],

        [[451]],

        [[427]],

        [[ 67]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[65.9235],
        [73.1647],
        [72.3957],
        [71.1833],
        [70.2017],
        [73.5779],
        [74.1778],
        [71.1490],
        [75.5502],
        [73.2411],
        [66.6301],
        [69.0057],
        [65.2166],
        [66.4302],
        [68.8554],
        [62.3627],
        [65.8596],
        [65.0032],
        [60.7900],
        [67.6765],
        [66.5542],
        [71.7156],
        [72.4657],
        [69.5866],
        [73.4644],
        [70.8390],
        [71.0587],
        [72.8833],
        [68.8525],
        [71.8532],
        [70.7125],
        [71.6179],
        [70.7431],
        [70.9071],
        [70.9265],
        [71.3971],
        [70.8344],
        [71.9844],
        [71.5687],
        [73.3689],
        [69.4592],
        [74.5149],
        [71.8222],
        [68.2008],
        [71.4179],
        [77.0067],
        [72.5823],
        [71.9775],
        [73.2994],
        [73.0769]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[65.9235],
        [73.1647],
        [72.3957],
        [71.1833],
        [70.2017],
        [73.5779],
        [74.1778],
        [71.1490],
        [75.5502],
        [73.2411],
        [66.6301],
        [69.0057],
        [65.2166],
        [66.4302],
        [68.8554],
        [62.3627],
        [65.8596],
        [65.0032],
        [60.7900],
        [67.6765],
        [66.5542],
        [71.7156],
        [72.4657],
        [69.5866],
        [73.4644],
        [70.8390],
        [71.0587],
        [72.8833],
        [68.8525],
        [71.8532],
        [70.7125],
        [71.6179],
        [70.7431],
        [70.9071],
        [70.9265],
        [71.3971],
        [70.8344],
        [71.9844],
        [71.5687],
        [73.3689],
        [69.4592],
        [74.5149],
        [71.8222],
        [68.2008],
        [71.4179],
        [77.0067],
        [72.5823],
        [71.9775],
        [73.2994],
        [73.0769]])
Selected blocks appended
Decoding step 71
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([428, 243, 203, 184, 258, 417, 170,  65, 413, 435, 398, 331, 425, 350,
        423,  28, 171, 295, 319, 181, 284, 427, 387, 103, 230, 185, 380, 462,
        318, 413, 458, 180, 152, 354, 156, 484,  73,  72, 190, 383, 486,  63,
        293,  68, 362, 492, 294, 397,  20,  25])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[428]],

        [[243]],

        [[203]],

        [[184]],

        [[258]],

        [[417]],

        [[170]],

        [[ 65]],

        [[413]],

        [[435]],

        [[398]],

        [[331]],

        [[425]],

        [[350]],

        [[423]],

        [[ 28]],

        [[171]],

        [[295]],

        [[319]],

        [[181]],

        [[284]],

        [[427]],

        [[387]],

        [[103]],

        [[230]],

        [[185]],

        [[380]],

        [[462]],

        [[318]],

        [[413]],

        [[458]],

        [[180]],

        [[152]],

        [[354]],

        [[156]],

        [[484]],

        [[ 73]],

        [[ 72]],

        [[190]],

        [[383]],

        [[486]],

        [[ 63]],

        [[293]],

        [[ 68]],

        [[362]],

        [[492]],

        [[294]],

        [[397]],

        [[ 20]],

        [[ 25]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[66.6354],
        [73.9366],
        [72.9656],
        [72.4221],
        [70.8721],
        [74.6141],
        [74.6602],
        [72.1550],
        [76.8624],
        [74.2198],
        [67.7055],
        [70.0956],
        [66.1339],
        [67.3913],
        [69.6954],
        [63.3199],
        [67.0428],
        [65.7280],
        [62.0161],
        [68.6301],
        [67.7085],
        [72.8244],
        [73.7958],
        [70.4612],
        [74.2772],
        [72.0769],
        [71.7881],
        [74.1819],
        [70.1738],
        [73.1820],
        [72.1768],
        [72.7040],
        [71.4774],
        [72.3136],
        [72.0631],
        [72.5239],
        [72.2157],
        [72.9760],
        [72.5869],
        [74.0039],
        [70.5634],
        [75.7188],
        [73.6997],
        [68.7294],
        [72.5274],
        [77.9962],
        [73.2482],
        [72.7955],
        [74.4254],
        [73.8831]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[66.6354],
        [73.9366],
        [72.9656],
        [72.4221],
        [70.8721],
        [74.6141],
        [74.6602],
        [72.1550],
        [76.8624],
        [74.2198],
        [67.7055],
        [70.0956],
        [66.1339],
        [67.3913],
        [69.6954],
        [63.3199],
        [67.0428],
        [65.7280],
        [62.0161],
        [68.6301],
        [67.7085],
        [72.8244],
        [73.7958],
        [70.4612],
        [74.2772],
        [72.0769],
        [71.7881],
        [74.1819],
        [70.1738],
        [73.1820],
        [72.1768],
        [72.7040],
        [71.4774],
        [72.3136],
        [72.0631],
        [72.5239],
        [72.2157],
        [72.9760],
        [72.5869],
        [74.0039],
        [70.5634],
        [75.7188],
        [73.6997],
        [68.7294],
        [72.5274],
        [77.9962],
        [73.2482],
        [72.7955],
        [74.4254],
        [73.8831]])
Selected blocks appended
Decoding step 72
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([131,   8,   7, 290, 491,  53,  27, 453, 146, 207, 344, 462, 329, 154,
        104, 203, 374, 493,  31, 427, 442,  20, 355,  23,  43, 204, 284, 428,
        287, 444, 338, 448, 344, 338, 360, 369,  71, 218,  37,  89, 465,   9,
        308,  54, 158, 326, 473, 458, 237, 320])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[131]],

        [[  8]],

        [[  7]],

        [[290]],

        [[491]],

        [[ 53]],

        [[ 27]],

        [[453]],

        [[146]],

        [[207]],

        [[344]],

        [[462]],

        [[329]],

        [[154]],

        [[104]],

        [[203]],

        [[374]],

        [[493]],

        [[ 31]],

        [[427]],

        [[442]],

        [[ 20]],

        [[355]],

        [[ 23]],

        [[ 43]],

        [[204]],

        [[284]],

        [[428]],

        [[287]],

        [[444]],

        [[338]],

        [[448]],

        [[344]],

        [[338]],

        [[360]],

        [[369]],

        [[ 71]],

        [[218]],

        [[ 37]],

        [[ 89]],

        [[465]],

        [[  9]],

        [[308]],

        [[ 54]],

        [[158]],

        [[326]],

        [[473]],

        [[458]],

        [[237]],

        [[320]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[67.4231],
        [74.7480],
        [73.8751],
        [73.5699],
        [71.6698],
        [75.8665],
        [76.1096],
        [72.5537],
        [77.7366],
        [75.7660],
        [68.7061],
        [70.9962],
        [67.2736],
        [68.1713],
        [70.6800],
        [64.1705],
        [67.4964],
        [66.7405],
        [63.1630],
        [69.6335],
        [68.7105],
        [74.0556],
        [75.0009],
        [71.3701],
        [75.3445],
        [72.6284],
        [72.9425],
        [75.0363],
        [70.6210],
        [73.9970],
        [73.3121],
        [74.0252],
        [73.0258],
        [73.4489],
        [73.2066],
        [73.6082],
        [73.1577],
        [74.1660],
        [73.4585],
        [74.9790],
        [71.5713],
        [76.6078],
        [74.8566],
        [69.7467],
        [73.2628],
        [78.6637],
        [74.0055],
        [73.4610],
        [75.6320],
        [74.7003]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[67.4231],
        [74.7480],
        [73.8751],
        [73.5699],
        [71.6698],
        [75.8665],
        [76.1096],
        [72.5537],
        [77.7366],
        [75.7660],
        [68.7061],
        [70.9962],
        [67.2736],
        [68.1713],
        [70.6800],
        [64.1705],
        [67.4964],
        [66.7405],
        [63.1630],
        [69.6335],
        [68.7105],
        [74.0556],
        [75.0009],
        [71.3701],
        [75.3445],
        [72.6284],
        [72.9425],
        [75.0363],
        [70.6210],
        [73.9970],
        [73.3121],
        [74.0252],
        [73.0258],
        [73.4489],
        [73.2066],
        [73.6082],
        [73.1577],
        [74.1660],
        [73.4585],
        [74.9790],
        [71.5713],
        [76.6078],
        [74.8566],
        [69.7467],
        [73.2628],
        [78.6637],
        [74.0055],
        [73.4610],
        [75.6320],
        [74.7003]])
Selected blocks appended
Decoding step 73
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 62,  81, 420, 324, 189,  90, 313, 454, 477, 304, 231, 258, 179, 453,
        119, 216, 336, 247,  21, 279, 210, 192, 410, 355, 362, 130, 245, 438,
        362,  87, 202, 216, 377, 482, 218, 241,  69, 335, 425,  12, 191, 421,
        144, 390, 485, 266, 213, 162, 234, 152])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 62]],

        [[ 81]],

        [[420]],

        [[324]],

        [[189]],

        [[ 90]],

        [[313]],

        [[454]],

        [[477]],

        [[304]],

        [[231]],

        [[258]],

        [[179]],

        [[453]],

        [[119]],

        [[216]],

        [[336]],

        [[247]],

        [[ 21]],

        [[279]],

        [[210]],

        [[192]],

        [[410]],

        [[355]],

        [[362]],

        [[130]],

        [[245]],

        [[438]],

        [[362]],

        [[ 87]],

        [[202]],

        [[216]],

        [[377]],

        [[482]],

        [[218]],

        [[241]],

        [[ 69]],

        [[335]],

        [[425]],

        [[ 12]],

        [[191]],

        [[421]],

        [[144]],

        [[390]],

        [[485]],

        [[266]],

        [[213]],

        [[162]],

        [[234]],

        [[152]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[68.7744],
        [75.5624],
        [74.4277],
        [74.4554],
        [72.5963],
        [76.8846],
        [77.4115],
        [73.5679],
        [79.0239],
        [77.0645],
        [69.6463],
        [71.9771],
        [68.9836],
        [69.2425],
        [71.6897],
        [65.1901],
        [68.4350],
        [67.8695],
        [64.0629],
        [70.6281],
        [69.8982],
        [75.5654],
        [76.0232],
        [72.5752],
        [75.8400],
        [73.8891],
        [73.9269],
        [76.3114],
        [71.1165],
        [75.3032],
        [74.3027],
        [75.3405],
        [74.2671],
        [74.5771],
        [74.3967],
        [74.3932],
        [74.1240],
        [75.1049],
        [74.3788],
        [76.4512],
        [72.6236],
        [77.9654],
        [75.8456],
        [70.9700],
        [74.2317],
        [79.5507],
        [75.5719],
        [74.4578],
        [77.1125],
        [76.1485]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[68.7744],
        [75.5624],
        [74.4277],
        [74.4554],
        [72.5963],
        [76.8846],
        [77.4115],
        [73.5679],
        [79.0239],
        [77.0645],
        [69.6463],
        [71.9771],
        [68.9836],
        [69.2425],
        [71.6897],
        [65.1901],
        [68.4350],
        [67.8695],
        [64.0629],
        [70.6281],
        [69.8982],
        [75.5654],
        [76.0232],
        [72.5752],
        [75.8400],
        [73.8891],
        [73.9269],
        [76.3114],
        [71.1165],
        [75.3032],
        [74.3027],
        [75.3405],
        [74.2671],
        [74.5771],
        [74.3967],
        [74.3932],
        [74.1240],
        [75.1049],
        [74.3788],
        [76.4512],
        [72.6236],
        [77.9654],
        [75.8456],
        [70.9700],
        [74.2317],
        [79.5507],
        [75.5719],
        [74.4578],
        [77.1125],
        [76.1485]])
Selected blocks appended
Decoding step 74
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([483,  37, 488,  32, 149, 426, 144,  74, 430,  81, 274,  80, 195, 214,
        215, 424, 443, 174, 309, 149, 424, 431,  17, 437, 241, 139, 406, 388,
        209, 141, 342, 413, 487, 217, 138, 362, 252, 217, 194,  85, 335, 122,
        158, 363, 145, 222, 156, 423, 480, 297])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[483]],

        [[ 37]],

        [[488]],

        [[ 32]],

        [[149]],

        [[426]],

        [[144]],

        [[ 74]],

        [[430]],

        [[ 81]],

        [[274]],

        [[ 80]],

        [[195]],

        [[214]],

        [[215]],

        [[424]],

        [[443]],

        [[174]],

        [[309]],

        [[149]],

        [[424]],

        [[431]],

        [[ 17]],

        [[437]],

        [[241]],

        [[139]],

        [[406]],

        [[388]],

        [[209]],

        [[141]],

        [[342]],

        [[413]],

        [[487]],

        [[217]],

        [[138]],

        [[362]],

        [[252]],

        [[217]],

        [[194]],

        [[ 85]],

        [[335]],

        [[122]],

        [[158]],

        [[363]],

        [[145]],

        [[222]],

        [[156]],

        [[423]],

        [[480]],

        [[297]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[69.8118],
        [76.9320],
        [75.4878],
        [75.4103],
        [73.9216],
        [77.4827],
        [78.3554],
        [74.6284],
        [79.9414],
        [77.8788],
        [69.9799],
        [72.9300],
        [69.6266],
        [69.8211],
        [72.4707],
        [65.8956],
        [69.0387],
        [68.7201],
        [65.3647],
        [71.7841],
        [71.0964],
        [76.2711],
        [77.5775],
        [73.8287],
        [76.9836],
        [75.0126],
        [75.3425],
        [77.1832],
        [72.1312],
        [76.6384],
        [75.0054],
        [76.4697],
        [75.2869],
        [75.7331],
        [75.3299],
        [75.3601],
        [75.1998],
        [76.2610],
        [75.3301],
        [77.5606],
        [73.8104],
        [79.1307],
        [76.5810],
        [72.1278],
        [75.1628],
        [80.2268],
        [76.5284],
        [75.9843],
        [78.0648],
        [76.9935]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[69.8118],
        [76.9320],
        [75.4878],
        [75.4103],
        [73.9216],
        [77.4827],
        [78.3554],
        [74.6284],
        [79.9414],
        [77.8788],
        [69.9799],
        [72.9300],
        [69.6266],
        [69.8211],
        [72.4707],
        [65.8956],
        [69.0387],
        [68.7201],
        [65.3647],
        [71.7841],
        [71.0964],
        [76.2711],
        [77.5775],
        [73.8287],
        [76.9836],
        [75.0126],
        [75.3425],
        [77.1832],
        [72.1312],
        [76.6384],
        [75.0054],
        [76.4697],
        [75.2869],
        [75.7331],
        [75.3299],
        [75.3601],
        [75.1998],
        [76.2610],
        [75.3301],
        [77.5606],
        [73.8104],
        [79.1307],
        [76.5810],
        [72.1278],
        [75.1628],
        [80.2268],
        [76.5284],
        [75.9843],
        [78.0648],
        [76.9935]])
Selected blocks appended
Decoding step 75
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([429,  26, 300,  52, 496, 418,  50, 424, 401,  53, 463, 163, 487, 436,
        166, 444, 441, 410, 206, 387, 274,  50, 431, 405, 423, 307, 252, 252,
         71,  65, 165, 161, 473, 132, 328,  81, 235, 183, 268, 424,  46, 203,
        386, 124, 371, 185, 141, 227, 291, 222])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[429]],

        [[ 26]],

        [[300]],

        [[ 52]],

        [[496]],

        [[418]],

        [[ 50]],

        [[424]],

        [[401]],

        [[ 53]],

        [[463]],

        [[163]],

        [[487]],

        [[436]],

        [[166]],

        [[444]],

        [[441]],

        [[410]],

        [[206]],

        [[387]],

        [[274]],

        [[ 50]],

        [[431]],

        [[405]],

        [[423]],

        [[307]],

        [[252]],

        [[252]],

        [[ 71]],

        [[ 65]],

        [[165]],

        [[161]],

        [[473]],

        [[132]],

        [[328]],

        [[ 81]],

        [[235]],

        [[183]],

        [[268]],

        [[424]],

        [[ 46]],

        [[203]],

        [[386]],

        [[124]],

        [[371]],

        [[185]],

        [[141]],

        [[227]],

        [[291]],

        [[222]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[70.9029],
        [78.1062],
        [76.3377],
        [76.8653],
        [75.1051],
        [78.8446],
        [79.2972],
        [75.5278],
        [80.5794],
        [79.1313],
        [70.7054],
        [74.0414],
        [70.7585],
        [70.6343],
        [73.9739],
        [66.9968],
        [69.7951],
        [70.1504],
        [66.4619],
        [72.5525],
        [72.0739],
        [77.0181],
        [78.2832],
        [75.1381],
        [78.1723],
        [75.9441],
        [76.1371],
        [77.9778],
        [73.3430],
        [77.8379],
        [75.9624],
        [77.6351],
        [76.2749],
        [76.6460],
        [76.4600],
        [76.2973],
        [76.1117],
        [76.8369],
        [75.9722],
        [78.2238],
        [75.3756],
        [79.8710],
        [77.4288],
        [72.9731],
        [75.9431],
        [80.8443],
        [77.4480],
        [76.9978],
        [79.1351],
        [77.6696]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[70.9029],
        [78.1062],
        [76.3377],
        [76.8653],
        [75.1051],
        [78.8446],
        [79.2972],
        [75.5278],
        [80.5794],
        [79.1313],
        [70.7054],
        [74.0414],
        [70.7585],
        [70.6343],
        [73.9739],
        [66.9968],
        [69.7951],
        [70.1504],
        [66.4619],
        [72.5525],
        [72.0739],
        [77.0181],
        [78.2832],
        [75.1381],
        [78.1723],
        [75.9441],
        [76.1371],
        [77.9778],
        [73.3430],
        [77.8379],
        [75.9624],
        [77.6351],
        [76.2749],
        [76.6460],
        [76.4600],
        [76.2973],
        [76.1117],
        [76.8369],
        [75.9722],
        [78.2238],
        [75.3756],
        [79.8710],
        [77.4288],
        [72.9731],
        [75.9431],
        [80.8443],
        [77.4480],
        [76.9978],
        [79.1351],
        [77.6696]])
Selected blocks appended
Decoding step 76
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([191, 189, 105, 400, 167, 167,  12,  99, 164, 442,  24,   7, 325, 419,
        261, 301,  62,  84, 429, 315, 283, 349, 372, 460, 264, 366, 385,   0,
        243, 312,   6,   8, 498,  51, 281, 176,  44, 439,  71, 277, 362, 286,
        202, 230, 185,  76, 248, 105,  95, 368])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[191]],

        [[189]],

        [[105]],

        [[400]],

        [[167]],

        [[167]],

        [[ 12]],

        [[ 99]],

        [[164]],

        [[442]],

        [[ 24]],

        [[  7]],

        [[325]],

        [[419]],

        [[261]],

        [[301]],

        [[ 62]],

        [[ 84]],

        [[429]],

        [[315]],

        [[283]],

        [[349]],

        [[372]],

        [[460]],

        [[264]],

        [[366]],

        [[385]],

        [[  0]],

        [[243]],

        [[312]],

        [[  6]],

        [[  8]],

        [[498]],

        [[ 51]],

        [[281]],

        [[176]],

        [[ 44]],

        [[439]],

        [[ 71]],

        [[277]],

        [[362]],

        [[286]],

        [[202]],

        [[230]],

        [[185]],

        [[ 76]],

        [[248]],

        [[105]],

        [[ 95]],

        [[368]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[72.3270],
        [79.0327],
        [77.5194],
        [78.3279],
        [76.4109],
        [80.1504],
        [80.4606],
        [76.5040],
        [81.4813],
        [80.0316],
        [71.6874],
        [74.6581],
        [71.8726],
        [71.3090],
        [75.4550],
        [67.8275],
        [70.3783],
        [71.1344],
        [67.3749],
        [73.6923],
        [72.9821],
        [77.8381],
        [79.2134],
        [76.7337],
        [79.1637],
        [77.1365],
        [77.0373],
        [79.1198],
        [74.6586],
        [78.8266],
        [76.9570],
        [78.8892],
        [77.6343],
        [77.8261],
        [77.6323],
        [77.0910],
        [77.1629],
        [77.6303],
        [76.9142],
        [79.3151],
        [76.4851],
        [80.9772],
        [78.4603],
        [74.1613],
        [76.5607],
        [81.9700],
        [78.2006],
        [78.0844],
        [79.9473],
        [78.3953]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[72.3270],
        [79.0327],
        [77.5194],
        [78.3279],
        [76.4109],
        [80.1504],
        [80.4606],
        [76.5040],
        [81.4813],
        [80.0316],
        [71.6874],
        [74.6581],
        [71.8726],
        [71.3090],
        [75.4550],
        [67.8275],
        [70.3783],
        [71.1344],
        [67.3749],
        [73.6923],
        [72.9821],
        [77.8381],
        [79.2134],
        [76.7337],
        [79.1637],
        [77.1365],
        [77.0373],
        [79.1198],
        [74.6586],
        [78.8266],
        [76.9570],
        [78.8892],
        [77.6343],
        [77.8261],
        [77.6323],
        [77.0910],
        [77.1629],
        [77.6303],
        [76.9142],
        [79.3151],
        [76.4851],
        [80.9772],
        [78.4603],
        [74.1613],
        [76.5607],
        [81.9700],
        [78.2006],
        [78.0844],
        [79.9473],
        [78.3953]])
Selected blocks appended
Decoding step 77
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([398, 362, 490, 131, 414, 393,  33, 189, 130, 259, 180, 466,  65, 155,
        416,   4,  11, 127,  45, 267, 255, 184,  19, 239, 392, 353, 230, 375,
        140, 358, 176, 162, 438, 146, 283, 435, 348,   7, 352, 213,   4, 234,
        203, 174,  62,  20, 353, 216,  78, 361])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[398]],

        [[362]],

        [[490]],

        [[131]],

        [[414]],

        [[393]],

        [[ 33]],

        [[189]],

        [[130]],

        [[259]],

        [[180]],

        [[466]],

        [[ 65]],

        [[155]],

        [[416]],

        [[  4]],

        [[ 11]],

        [[127]],

        [[ 45]],

        [[267]],

        [[255]],

        [[184]],

        [[ 19]],

        [[239]],

        [[392]],

        [[353]],

        [[230]],

        [[375]],

        [[140]],

        [[358]],

        [[176]],

        [[162]],

        [[438]],

        [[146]],

        [[283]],

        [[435]],

        [[348]],

        [[  7]],

        [[352]],

        [[213]],

        [[  4]],

        [[234]],

        [[203]],

        [[174]],

        [[ 62]],

        [[ 20]],

        [[353]],

        [[216]],

        [[ 78]],

        [[361]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[73.1444],
        [79.8806],
        [78.8003],
        [79.1156],
        [77.5569],
        [81.1245],
        [81.4576],
        [77.4304],
        [83.0045],
        [80.7877],
        [72.8377],
        [75.2285],
        [72.3031],
        [72.3790],
        [76.4325],
        [69.1278],
        [70.8449],
        [72.5238],
        [67.8800],
        [74.3910],
        [73.8151],
        [78.6554],
        [79.7536],
        [77.9505],
        [80.4956],
        [78.2384],
        [77.8501],
        [79.8568],
        [75.6916],
        [79.8879],
        [77.7507],
        [79.7863],
        [78.3805],
        [78.5282],
        [78.4559],
        [78.5162],
        [77.9483],
        [78.8443],
        [77.9643],
        [80.4308],
        [77.7817],
        [82.4577],
        [79.2006],
        [75.7099],
        [77.5335],
        [83.0961],
        [78.9178],
        [79.4444],
        [80.7688],
        [79.3218]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[73.1444],
        [79.8806],
        [78.8003],
        [79.1156],
        [77.5569],
        [81.1245],
        [81.4576],
        [77.4304],
        [83.0045],
        [80.7877],
        [72.8377],
        [75.2285],
        [72.3031],
        [72.3790],
        [76.4325],
        [69.1278],
        [70.8449],
        [72.5238],
        [67.8800],
        [74.3910],
        [73.8151],
        [78.6554],
        [79.7536],
        [77.9505],
        [80.4956],
        [78.2384],
        [77.8501],
        [79.8568],
        [75.6916],
        [79.8879],
        [77.7507],
        [79.7863],
        [78.3805],
        [78.5282],
        [78.4559],
        [78.5162],
        [77.9483],
        [78.8443],
        [77.9643],
        [80.4308],
        [77.7817],
        [82.4577],
        [79.2006],
        [75.7099],
        [77.5335],
        [83.0961],
        [78.9178],
        [79.4444],
        [80.7688],
        [79.3218]])
Selected blocks appended
Decoding step 78
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([404, 453, 425, 330, 469, 491, 176, 414, 463,  47, 343, 345, 134, 456,
        184, 479, 105, 334, 134, 497, 477, 105, 217, 382, 436, 485, 324, 491,
        321,  63, 407,   7, 199, 458, 234, 326, 351, 441, 340, 308, 484,  79,
        263, 439, 269, 412, 298, 120, 187,  56])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[404]],

        [[453]],

        [[425]],

        [[330]],

        [[469]],

        [[491]],

        [[176]],

        [[414]],

        [[463]],

        [[ 47]],

        [[343]],

        [[345]],

        [[134]],

        [[456]],

        [[184]],

        [[479]],

        [[105]],

        [[334]],

        [[134]],

        [[497]],

        [[477]],

        [[105]],

        [[217]],

        [[382]],

        [[436]],

        [[485]],

        [[324]],

        [[491]],

        [[321]],

        [[ 63]],

        [[407]],

        [[  7]],

        [[199]],

        [[458]],

        [[234]],

        [[326]],

        [[351]],

        [[441]],

        [[340]],

        [[308]],

        [[484]],

        [[ 79]],

        [[263]],

        [[439]],

        [[269]],

        [[412]],

        [[298]],

        [[120]],

        [[187]],

        [[ 56]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[74.2738],
        [80.2793],
        [79.9460],
        [80.2441],
        [78.4210],
        [81.9223],
        [82.7480],
        [78.5764],
        [83.6946],
        [81.5049],
        [73.6874],
        [75.9982],
        [73.1019],
        [73.1902],
        [77.5105],
        [69.9676],
        [71.2608],
        [73.7588],
        [68.6787],
        [75.0768],
        [74.7200],
        [79.6718],
        [81.1549],
        [79.1111],
        [81.6053],
        [79.3554],
        [78.8740],
        [81.2356],
        [76.8397],
        [81.0308],
        [78.8182],
        [81.0003],
        [79.2704],
        [79.9925],
        [79.4583],
        [79.4897],
        [79.0444],
        [80.0976],
        [78.8204],
        [81.5814],
        [78.8969],
        [83.6940],
        [79.9347],
        [76.4466],
        [78.5629],
        [83.8150],
        [80.1590],
        [79.8469],
        [81.7929],
        [80.0719]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[74.2738],
        [80.2793],
        [79.9460],
        [80.2441],
        [78.4210],
        [81.9223],
        [82.7480],
        [78.5764],
        [83.6946],
        [81.5049],
        [73.6874],
        [75.9982],
        [73.1019],
        [73.1902],
        [77.5105],
        [69.9676],
        [71.2608],
        [73.7588],
        [68.6787],
        [75.0768],
        [74.7200],
        [79.6718],
        [81.1549],
        [79.1111],
        [81.6053],
        [79.3554],
        [78.8740],
        [81.2356],
        [76.8397],
        [81.0308],
        [78.8182],
        [81.0003],
        [79.2704],
        [79.9925],
        [79.4583],
        [79.4897],
        [79.0444],
        [80.0976],
        [78.8204],
        [81.5814],
        [78.8969],
        [83.6940],
        [79.9347],
        [76.4466],
        [78.5629],
        [83.8150],
        [80.1590],
        [79.8469],
        [81.7929],
        [80.0719]])
Selected blocks appended
Decoding step 79
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 47, 364, 305, 441, 137, 215,  88,  95, 444,  59, 477, 134, 267, 239,
        447, 439,  40,  53, 267, 324,  37, 188, 141, 323, 440,  71,  30, 189,
        269, 290, 486, 101, 337,  83,  67,  95, 200, 304, 459, 283, 293, 439,
        493,   9, 482,  27, 252, 441, 426, 367])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 47]],

        [[364]],

        [[305]],

        [[441]],

        [[137]],

        [[215]],

        [[ 88]],

        [[ 95]],

        [[444]],

        [[ 59]],

        [[477]],

        [[134]],

        [[267]],

        [[239]],

        [[447]],

        [[439]],

        [[ 40]],

        [[ 53]],

        [[267]],

        [[324]],

        [[ 37]],

        [[188]],

        [[141]],

        [[323]],

        [[440]],

        [[ 71]],

        [[ 30]],

        [[189]],

        [[269]],

        [[290]],

        [[486]],

        [[101]],

        [[337]],

        [[ 83]],

        [[ 67]],

        [[ 95]],

        [[200]],

        [[304]],

        [[459]],

        [[283]],

        [[293]],

        [[439]],

        [[493]],

        [[  9]],

        [[482]],

        [[ 27]],

        [[252]],

        [[441]],

        [[426]],

        [[367]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[74.9910],
        [81.4420],
        [81.1401],
        [80.9676],
        [79.6076],
        [83.0818],
        [84.0312],
        [79.7156],
        [84.6608],
        [82.1626],
        [74.4019],
        [76.7970],
        [73.8005],
        [74.1213],
        [78.4708],
        [70.9265],
        [71.9931],
        [74.2626],
        [69.3774],
        [75.9972],
        [75.1933],
        [80.7817],
        [82.4901],
        [80.0528],
        [82.4680],
        [80.5671],
        [79.5239],
        [82.0484],
        [77.9170],
        [81.9009],
        [79.8083],
        [81.6897],
        [80.5247],
        [81.0095],
        [80.3116],
        [80.6131],
        [80.0304],
        [81.4062],
        [79.5064],
        [82.4050],
        [80.7743],
        [84.4307],
        [80.9483],
        [77.3357],
        [79.4647],
        [84.7535],
        [81.2344],
        [81.0747],
        [82.8795],
        [81.1180]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[74.9910],
        [81.4420],
        [81.1401],
        [80.9676],
        [79.6076],
        [83.0818],
        [84.0312],
        [79.7156],
        [84.6608],
        [82.1626],
        [74.4019],
        [76.7970],
        [73.8005],
        [74.1213],
        [78.4708],
        [70.9265],
        [71.9931],
        [74.2626],
        [69.3774],
        [75.9972],
        [75.1933],
        [80.7817],
        [82.4901],
        [80.0528],
        [82.4680],
        [80.5671],
        [79.5239],
        [82.0484],
        [77.9170],
        [81.9009],
        [79.8083],
        [81.6897],
        [80.5247],
        [81.0095],
        [80.3116],
        [80.6131],
        [80.0304],
        [81.4062],
        [79.5064],
        [82.4050],
        [80.7743],
        [84.4307],
        [80.9483],
        [77.3357],
        [79.4647],
        [84.7535],
        [81.2344],
        [81.0747],
        [82.8795],
        [81.1180]])
Selected blocks appended
Decoding step 80
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 77, 316,  48, 353, 384, 368,  49, 321,  52, 469, 142,  68, 369, 304,
        165, 152,  52, 431, 158,  66, 158, 233, 405, 311, 368, 345, 493, 498,
        420, 369, 437, 138,   6, 310,  60, 244, 487, 488, 332, 230,   8, 295,
         28, 448, 190, 170, 378, 449, 183,  26])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 77]],

        [[316]],

        [[ 48]],

        [[353]],

        [[384]],

        [[368]],

        [[ 49]],

        [[321]],

        [[ 52]],

        [[469]],

        [[142]],

        [[ 68]],

        [[369]],

        [[304]],

        [[165]],

        [[152]],

        [[ 52]],

        [[431]],

        [[158]],

        [[ 66]],

        [[158]],

        [[233]],

        [[405]],

        [[311]],

        [[368]],

        [[345]],

        [[493]],

        [[498]],

        [[420]],

        [[369]],

        [[437]],

        [[138]],

        [[  6]],

        [[310]],

        [[ 60]],

        [[244]],

        [[487]],

        [[488]],

        [[332]],

        [[230]],

        [[  8]],

        [[295]],

        [[ 28]],

        [[448]],

        [[190]],

        [[170]],

        [[378]],

        [[449]],

        [[183]],

        [[ 26]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[75.9842],
        [82.5159],
        [82.1216],
        [81.5357],
        [80.3994],
        [83.7811],
        [84.9188],
        [80.9963],
        [86.1158],
        [83.0267],
        [75.1542],
        [77.5452],
        [74.5731],
        [75.0932],
        [79.6525],
        [71.9224],
        [73.0438],
        [75.1437],
        [70.3284],
        [76.7411],
        [76.0111],
        [82.1439],
        [83.7995],
        [81.3677],
        [83.6039],
        [81.2772],
        [80.2583],
        [82.7317],
        [78.9051],
        [82.8870],
        [80.5466],
        [82.6229],
        [81.5193],
        [82.0087],
        [80.9434],
        [81.7986],
        [81.0503],
        [82.7904],
        [80.4788],
        [83.3500],
        [81.5635],
        [85.6560],
        [81.7919],
        [78.1268],
        [80.6844],
        [86.0537],
        [82.3922],
        [82.2833],
        [84.4278],
        [81.9408]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[75.9842],
        [82.5159],
        [82.1216],
        [81.5357],
        [80.3994],
        [83.7811],
        [84.9188],
        [80.9963],
        [86.1158],
        [83.0267],
        [75.1542],
        [77.5452],
        [74.5731],
        [75.0932],
        [79.6525],
        [71.9224],
        [73.0438],
        [75.1437],
        [70.3284],
        [76.7411],
        [76.0111],
        [82.1439],
        [83.7995],
        [81.3677],
        [83.6039],
        [81.2772],
        [80.2583],
        [82.7317],
        [78.9051],
        [82.8870],
        [80.5466],
        [82.6229],
        [81.5193],
        [82.0087],
        [80.9434],
        [81.7986],
        [81.0503],
        [82.7904],
        [80.4788],
        [83.3500],
        [81.5635],
        [85.6560],
        [81.7919],
        [78.1268],
        [80.6844],
        [86.0537],
        [82.3922],
        [82.2833],
        [84.4278],
        [81.9408]])
Selected blocks appended
Decoding step 81
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([376,  59, 342, 123, 285, 321, 274,  94,  77,   5,   0, 471, 423, 244,
        474, 247, 157, 100, 490,  22, 212, 407, 444,  50, 430, 496, 228, 211,
        195,  54, 100, 405, 100,  39, 301, 201, 168,  27,  72, 195, 231,   7,
         73,  48, 205, 442, 293,  75, 477, 474])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[376]],

        [[ 59]],

        [[342]],

        [[123]],

        [[285]],

        [[321]],

        [[274]],

        [[ 94]],

        [[ 77]],

        [[  5]],

        [[  0]],

        [[471]],

        [[423]],

        [[244]],

        [[474]],

        [[247]],

        [[157]],

        [[100]],

        [[490]],

        [[ 22]],

        [[212]],

        [[407]],

        [[444]],

        [[ 50]],

        [[430]],

        [[496]],

        [[228]],

        [[211]],

        [[195]],

        [[ 54]],

        [[100]],

        [[405]],

        [[100]],

        [[ 39]],

        [[301]],

        [[201]],

        [[168]],

        [[ 27]],

        [[ 72]],

        [[195]],

        [[231]],

        [[  7]],

        [[ 73]],

        [[ 48]],

        [[205]],

        [[442]],

        [[293]],

        [[ 75]],

        [[477]],

        [[474]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[76.6405],
        [83.1736],
        [82.9214],
        [82.3971],
        [81.0335],
        [85.0618],
        [86.2368],
        [81.9818],
        [87.1090],
        [83.9733],
        [76.2408],
        [78.3457],
        [75.4131],
        [76.0272],
        [80.6651],
        [73.0515],
        [73.7564],
        [76.0309],
        [71.4549],
        [77.8465],
        [76.7151],
        [83.1609],
        [84.6146],
        [82.1148],
        [84.8322],
        [81.9897],
        [80.8458],
        [83.8063],
        [79.7846],
        [84.0360],
        [81.8477],
        [83.7672],
        [82.8205],
        [83.0336],
        [81.8379],
        [83.1945],
        [82.1923],
        [83.6861],
        [81.4704],
        [84.4810],
        [82.6171],
        [86.7482],
        [82.2675],
        [79.0272],
        [82.0558],
        [87.0503],
        [84.2696],
        [83.3929],
        [85.3577],
        [83.1914]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[76.6405],
        [83.1736],
        [82.9214],
        [82.3971],
        [81.0335],
        [85.0618],
        [86.2368],
        [81.9818],
        [87.1090],
        [83.9733],
        [76.2408],
        [78.3457],
        [75.4131],
        [76.0272],
        [80.6651],
        [73.0515],
        [73.7564],
        [76.0309],
        [71.4549],
        [77.8465],
        [76.7151],
        [83.1609],
        [84.6146],
        [82.1148],
        [84.8322],
        [81.9897],
        [80.8458],
        [83.8063],
        [79.7846],
        [84.0360],
        [81.8477],
        [83.7672],
        [82.8205],
        [83.0336],
        [81.8379],
        [83.1945],
        [82.1923],
        [83.6861],
        [81.4704],
        [84.4810],
        [82.6171],
        [86.7482],
        [82.2675],
        [79.0272],
        [82.0558],
        [87.0503],
        [84.2696],
        [83.3929],
        [85.3577],
        [83.1914]])
Selected blocks appended
Decoding step 82
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([177, 381, 317, 317, 124, 250, 387, 181, 139, 138, 443, 139, 465, 106,
         45, 164, 204, 389, 467,   3,  63,  99, 123, 364, 489, 184, 210, 320,
        375,  45, 463, 221, 183, 386, 325, 328, 424, 420, 329, 477, 152, 119,
        185, 498, 439,  89, 477, 210, 195, 324])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[177]],

        [[381]],

        [[317]],

        [[317]],

        [[124]],

        [[250]],

        [[387]],

        [[181]],

        [[139]],

        [[138]],

        [[443]],

        [[139]],

        [[465]],

        [[106]],

        [[ 45]],

        [[164]],

        [[204]],

        [[389]],

        [[467]],

        [[  3]],

        [[ 63]],

        [[ 99]],

        [[123]],

        [[364]],

        [[489]],

        [[184]],

        [[210]],

        [[320]],

        [[375]],

        [[ 45]],

        [[463]],

        [[221]],

        [[183]],

        [[386]],

        [[325]],

        [[328]],

        [[424]],

        [[420]],

        [[329]],

        [[477]],

        [[152]],

        [[119]],

        [[185]],

        [[498]],

        [[439]],

        [[ 89]],

        [[477]],

        [[210]],

        [[195]],

        [[324]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[77.6479],
        [84.2468],
        [83.5607],
        [83.0364],
        [82.1046],
        [85.9495],
        [87.3489],
        [82.8012],
        [87.9064],
        [85.2367],
        [76.8445],
        [78.9920],
        [76.3472],
        [77.0275],
        [81.1701],
        [73.8815],
        [74.2708],
        [77.2448],
        [72.5274],
        [78.5186],
        [77.8580],
        [84.1333],
        [85.5793],
        [82.9637],
        [85.9499],
        [82.8070],
        [82.0334],
        [84.6363],
        [80.5216],
        [84.8860],
        [82.9932],
        [85.0519],
        [83.3964],
        [84.4719],
        [82.8047],
        [84.3246],
        [82.8555],
        [84.1591],
        [82.5381],
        [85.3841],
        [84.0653],
        [87.8360],
        [82.8851],
        [79.9584],
        [82.7926],
        [88.2789],
        [85.1995],
        [84.2863],
        [86.1585],
        [83.8452]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[77.6479],
        [84.2468],
        [83.5607],
        [83.0364],
        [82.1046],
        [85.9495],
        [87.3489],
        [82.8012],
        [87.9064],
        [85.2367],
        [76.8445],
        [78.9920],
        [76.3472],
        [77.0275],
        [81.1701],
        [73.8815],
        [74.2708],
        [77.2448],
        [72.5274],
        [78.5186],
        [77.8580],
        [84.1333],
        [85.5793],
        [82.9637],
        [85.9499],
        [82.8070],
        [82.0334],
        [84.6363],
        [80.5216],
        [84.8860],
        [82.9932],
        [85.0519],
        [83.3964],
        [84.4719],
        [82.8047],
        [84.3246],
        [82.8555],
        [84.1591],
        [82.5381],
        [85.3841],
        [84.0653],
        [87.8360],
        [82.8851],
        [79.9584],
        [82.7926],
        [88.2789],
        [85.1995],
        [84.2863],
        [86.1585],
        [83.8452]])
Selected blocks appended
Decoding step 83
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([202, 207,  96,  78,  46, 434, 246, 400, 410, 274,  61, 142,  46, 376,
        101, 206, 241, 301, 126, 174, 140, 307, 474, 408, 294, 474, 399, 126,
        364, 231, 251, 412, 225, 121, 438, 169, 472, 360, 331,  46, 287,  90,
        438, 471,  29, 199, 243, 351, 338,   3])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[202]],

        [[207]],

        [[ 96]],

        [[ 78]],

        [[ 46]],

        [[434]],

        [[246]],

        [[400]],

        [[410]],

        [[274]],

        [[ 61]],

        [[142]],

        [[ 46]],

        [[376]],

        [[101]],

        [[206]],

        [[241]],

        [[301]],

        [[126]],

        [[174]],

        [[140]],

        [[307]],

        [[474]],

        [[408]],

        [[294]],

        [[474]],

        [[399]],

        [[126]],

        [[364]],

        [[231]],

        [[251]],

        [[412]],

        [[225]],

        [[121]],

        [[438]],

        [[169]],

        [[472]],

        [[360]],

        [[331]],

        [[ 46]],

        [[287]],

        [[ 90]],

        [[438]],

        [[471]],

        [[ 29]],

        [[199]],

        [[243]],

        [[351]],

        [[338]],

        [[  3]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[78.7949],
        [85.7929],
        [84.6446],
        [84.0985],
        [83.4548],
        [86.9041],
        [88.6517],
        [84.2638],
        [88.9803],
        [86.5547],
        [77.6340],
        [79.7444],
        [77.0447],
        [78.2869],
        [82.0903],
        [74.9787],
        [75.2019],
        [78.0755],
        [73.3208],
        [79.3692],
        [78.8910],
        [85.0647],
        [86.4068],
        [83.9828],
        [87.3124],
        [83.6345],
        [83.3012],
        [86.0998],
        [81.3705],
        [85.6340],
        [83.7817],
        [86.0035],
        [84.5176],
        [85.2910],
        [83.5508],
        [85.1055],
        [83.8599],
        [85.3026],
        [83.9618],
        [86.3398],
        [85.3131],
        [88.3666],
        [83.5439],
        [80.9913],
        [84.5597],
        [89.3464],
        [85.5118],
        [84.7605],
        [86.9937],
        [84.8047]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[78.7949],
        [85.7929],
        [84.6446],
        [84.0985],
        [83.4548],
        [86.9041],
        [88.6517],
        [84.2638],
        [88.9803],
        [86.5547],
        [77.6340],
        [79.7444],
        [77.0447],
        [78.2869],
        [82.0903],
        [74.9787],
        [75.2019],
        [78.0755],
        [73.3208],
        [79.3692],
        [78.8910],
        [85.0647],
        [86.4068],
        [83.9828],
        [87.3124],
        [83.6345],
        [83.3012],
        [86.0998],
        [81.3705],
        [85.6340],
        [83.7817],
        [86.0035],
        [84.5176],
        [85.2910],
        [83.5508],
        [85.1055],
        [83.8599],
        [85.3026],
        [83.9618],
        [86.3398],
        [85.3131],
        [88.3666],
        [83.5439],
        [80.9913],
        [84.5597],
        [89.3464],
        [85.5118],
        [84.7605],
        [86.9937],
        [84.8047]])
Selected blocks appended
Decoding step 84
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([278, 172, 280, 492, 353, 180, 219, 366, 424, 123, 320,  65, 306, 460,
        176, 271,  45, 477, 268, 409, 406,  76, 453, 184, 331, 486, 410, 430,
        186, 228, 185,  99, 481,  20, 324, 112,  75,  88, 388, 210, 164, 158,
        353,   1, 120, 438, 256, 166, 419,  60])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[278]],

        [[172]],

        [[280]],

        [[492]],

        [[353]],

        [[180]],

        [[219]],

        [[366]],

        [[424]],

        [[123]],

        [[320]],

        [[ 65]],

        [[306]],

        [[460]],

        [[176]],

        [[271]],

        [[ 45]],

        [[477]],

        [[268]],

        [[409]],

        [[406]],

        [[ 76]],

        [[453]],

        [[184]],

        [[331]],

        [[486]],

        [[410]],

        [[430]],

        [[186]],

        [[228]],

        [[185]],

        [[ 99]],

        [[481]],

        [[ 20]],

        [[324]],

        [[112]],

        [[ 75]],

        [[ 88]],

        [[388]],

        [[210]],

        [[164]],

        [[158]],

        [[353]],

        [[  1]],

        [[120]],

        [[438]],

        [[256]],

        [[166]],

        [[419]],

        [[ 60]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[79.8850],
        [87.0458],
        [85.8033],
        [84.9580],
        [84.0228],
        [88.2667],
        [89.4396],
        [85.2442],
        [89.8796],
        [87.4162],
        [79.0718],
        [80.1749],
        [77.9487],
        [78.8938],
        [83.2130],
        [75.6856],
        [75.7070],
        [78.7900],
        [74.6328],
        [80.3874],
        [80.3067],
        [86.2793],
        [87.7041],
        [84.8001],
        [88.1277],
        [84.3735],
        [84.3235],
        [87.3281],
        [82.6285],
        [86.2215],
        [84.7179],
        [87.1970],
        [85.4507],
        [86.4631],
        [84.5048],
        [86.3956],
        [84.5867],
        [86.1826],
        [84.8655],
        [86.9172],
        [86.3277],
        [89.1020],
        [84.2610],
        [82.5047],
        [84.9622],
        [90.0052],
        [86.2787],
        [86.2258],
        [88.1663],
        [86.0468]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[79.8850],
        [87.0458],
        [85.8033],
        [84.9580],
        [84.0228],
        [88.2667],
        [89.4396],
        [85.2442],
        [89.8796],
        [87.4162],
        [79.0718],
        [80.1749],
        [77.9487],
        [78.8938],
        [83.2130],
        [75.6856],
        [75.7070],
        [78.7900],
        [74.6328],
        [80.3874],
        [80.3067],
        [86.2793],
        [87.7041],
        [84.8001],
        [88.1277],
        [84.3735],
        [84.3235],
        [87.3281],
        [82.6285],
        [86.2215],
        [84.7179],
        [87.1970],
        [85.4507],
        [86.4631],
        [84.5048],
        [86.3956],
        [84.5867],
        [86.1826],
        [84.8655],
        [86.9172],
        [86.3277],
        [89.1020],
        [84.2610],
        [82.5047],
        [84.9622],
        [90.0052],
        [86.2787],
        [86.2258],
        [88.1663],
        [86.0468]])
Selected blocks appended
Decoding step 85
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 44,  71, 162, 350, 321, 206, 468, 348, 269, 420, 390, 200, 124, 162,
        185, 162, 446, 452,  58, 274, 452,  73, 399, 495, 293, 422, 214, 371,
         48, 375,  72, 472, 463, 227, 315, 135, 170, 258, 105,  13, 407,  47,
        352, 302, 134, 200, 165, 443, 185, 299])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 44]],

        [[ 71]],

        [[162]],

        [[350]],

        [[321]],

        [[206]],

        [[468]],

        [[348]],

        [[269]],

        [[420]],

        [[390]],

        [[200]],

        [[124]],

        [[162]],

        [[185]],

        [[162]],

        [[446]],

        [[452]],

        [[ 58]],

        [[274]],

        [[452]],

        [[ 73]],

        [[399]],

        [[495]],

        [[293]],

        [[422]],

        [[214]],

        [[371]],

        [[ 48]],

        [[375]],

        [[ 72]],

        [[472]],

        [[463]],

        [[227]],

        [[315]],

        [[135]],

        [[170]],

        [[258]],

        [[105]],

        [[ 13]],

        [[407]],

        [[ 47]],

        [[352]],

        [[302]],

        [[134]],

        [[200]],

        [[165]],

        [[443]],

        [[185]],

        [[299]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[81.0586],
        [88.2515],
        [86.7178],
        [86.3506],
        [85.3035],
        [89.7583],
        [89.9727],
        [86.5869],
        [90.6721],
        [87.9688],
        [80.1084],
        [80.7853],
        [79.1248],
        [80.0373],
        [84.0044],
        [76.8291],
        [77.0686],
        [80.0140],
        [75.5083],
        [80.7210],
        [81.5943],
        [87.2526],
        [88.9719],
        [85.9141],
        [88.8361],
        [85.6000],
        [85.4049],
        [88.6642],
        [83.5910],
        [86.9585],
        [85.7095],
        [88.2014],
        [86.5961],
        [87.1902],
        [85.6619],
        [87.3272],
        [85.0397],
        [87.0625],
        [86.2437],
        [87.9821],
        [87.6511],
        [90.1075],
        [85.1415],
        [84.1405],
        [86.0629],
        [90.7280],
        [87.4433],
        [87.1577],
        [88.7838],
        [86.8966]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[81.0586],
        [88.2515],
        [86.7178],
        [86.3506],
        [85.3035],
        [89.7583],
        [89.9727],
        [86.5869],
        [90.6721],
        [87.9688],
        [80.1084],
        [80.7853],
        [79.1248],
        [80.0373],
        [84.0044],
        [76.8291],
        [77.0686],
        [80.0140],
        [75.5083],
        [80.7210],
        [81.5943],
        [87.2526],
        [88.9719],
        [85.9141],
        [88.8361],
        [85.6000],
        [85.4049],
        [88.6642],
        [83.5910],
        [86.9585],
        [85.7095],
        [88.2014],
        [86.5961],
        [87.1902],
        [85.6619],
        [87.3272],
        [85.0397],
        [87.0625],
        [86.2437],
        [87.9821],
        [87.6511],
        [90.1075],
        [85.1415],
        [84.1405],
        [86.0629],
        [90.7280],
        [87.4433],
        [87.1577],
        [88.7838],
        [86.8966]])
Selected blocks appended
Decoding step 86
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([  5,  73, 320, 410, 361, 388, 489, 487, 308, 343, 394, 199, 497, 414,
        309, 120, 331, 243,  60, 384, 432, 234, 210, 188, 174, 491, 287, 361,
        227, 319, 281, 249, 312, 171, 307, 365, 399, 381, 256, 128, 104, 471,
         85,  56, 111, 295, 210, 185,  40, 211])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[  5]],

        [[ 73]],

        [[320]],

        [[410]],

        [[361]],

        [[388]],

        [[489]],

        [[487]],

        [[308]],

        [[343]],

        [[394]],

        [[199]],

        [[497]],

        [[414]],

        [[309]],

        [[120]],

        [[331]],

        [[243]],

        [[ 60]],

        [[384]],

        [[432]],

        [[234]],

        [[210]],

        [[188]],

        [[174]],

        [[491]],

        [[287]],

        [[361]],

        [[227]],

        [[319]],

        [[281]],

        [[249]],

        [[312]],

        [[171]],

        [[307]],

        [[365]],

        [[399]],

        [[381]],

        [[256]],

        [[128]],

        [[104]],

        [[471]],

        [[ 85]],

        [[ 56]],

        [[111]],

        [[295]],

        [[210]],

        [[185]],

        [[ 40]],

        [[211]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[82.0052],
        [89.2329],
        [87.3108],
        [87.4246],
        [86.7621],
        [90.8131],
        [90.8611],
        [87.3416],
        [91.9538],
        [89.4837],
        [81.3850],
        [81.6448],
        [79.8106],
        [80.9723],
        [85.3063],
        [77.8458],
        [78.1585],
        [81.2929],
        [76.2770],
        [81.2230],
        [82.6325],
        [88.3206],
        [90.1595],
        [87.0240],
        [90.0383],
        [86.9789],
        [85.8521],
        [89.7766],
        [84.2722],
        [88.0618],
        [86.8817],
        [89.3269],
        [87.6111],
        [88.4362],
        [86.7462],
        [88.2788],
        [85.9394],
        [88.6362],
        [87.5522],
        [88.7937],
        [88.8206],
        [91.1404],
        [86.2919],
        [84.8906],
        [86.9271],
        [91.9533],
        [88.3367],
        [87.7752],
        [89.3250],
        [88.2794]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[82.0052],
        [89.2329],
        [87.3108],
        [87.4246],
        [86.7621],
        [90.8131],
        [90.8611],
        [87.3416],
        [91.9538],
        [89.4837],
        [81.3850],
        [81.6448],
        [79.8106],
        [80.9723],
        [85.3063],
        [77.8458],
        [78.1585],
        [81.2929],
        [76.2770],
        [81.2230],
        [82.6325],
        [88.3206],
        [90.1595],
        [87.0240],
        [90.0383],
        [86.9789],
        [85.8521],
        [89.7766],
        [84.2722],
        [88.0618],
        [86.8817],
        [89.3269],
        [87.6111],
        [88.4362],
        [86.7462],
        [88.2788],
        [85.9394],
        [88.6362],
        [87.5522],
        [88.7937],
        [88.8206],
        [91.1404],
        [86.2919],
        [84.8906],
        [86.9271],
        [91.9533],
        [88.3367],
        [87.7752],
        [89.3250],
        [88.2794]])
Selected blocks appended
Decoding step 87
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([155, 467, 307, 224, 335,  99, 100,  41,  31, 222, 268,  23, 470, 335,
        105, 171, 176, 486, 202, 189, 229, 362, 176,  38, 153, 317,  88, 188,
        489, 261,  17, 118, 233, 478, 383, 452, 251, 104,  48, 215, 183,  75,
        290, 185, 487, 318, 373, 419, 197, 352])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[155]],

        [[467]],

        [[307]],

        [[224]],

        [[335]],

        [[ 99]],

        [[100]],

        [[ 41]],

        [[ 31]],

        [[222]],

        [[268]],

        [[ 23]],

        [[470]],

        [[335]],

        [[105]],

        [[171]],

        [[176]],

        [[486]],

        [[202]],

        [[189]],

        [[229]],

        [[362]],

        [[176]],

        [[ 38]],

        [[153]],

        [[317]],

        [[ 88]],

        [[188]],

        [[489]],

        [[261]],

        [[ 17]],

        [[118]],

        [[233]],

        [[478]],

        [[383]],

        [[452]],

        [[251]],

        [[104]],

        [[ 48]],

        [[215]],

        [[183]],

        [[ 75]],

        [[290]],

        [[185]],

        [[487]],

        [[318]],

        [[373]],

        [[419]],

        [[197]],

        [[352]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[82.9986],
        [89.9623],
        [88.0814],
        [88.5743],
        [87.5017],
        [91.7893],
        [91.7029],
        [88.0618],
        [93.2821],
        [90.5218],
        [82.6970],
        [82.4726],
        [80.5147],
        [81.8170],
        [85.7222],
        [79.0289],
        [79.2812],
        [82.4214],
        [77.0057],
        [82.1504],
        [83.5107],
        [88.8161],
        [91.0598],
        [88.0057],
        [91.2800],
        [87.4631],
        [86.8266],
        [90.8865],
        [85.3899],
        [89.2897],
        [88.1849],
        [90.0042],
        [88.4083],
        [89.3673],
        [87.3813],
        [89.3390],
        [86.7279],
        [89.4632],
        [88.6569],
        [89.9115],
        [90.3689],
        [92.2500],
        [86.9926],
        [85.5081],
        [88.0683],
        [93.1559],
        [89.3517],
        [88.9478],
        [90.1618],
        [89.1599]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[82.9986],
        [89.9623],
        [88.0814],
        [88.5743],
        [87.5017],
        [91.7893],
        [91.7029],
        [88.0618],
        [93.2821],
        [90.5218],
        [82.6970],
        [82.4726],
        [80.5147],
        [81.8170],
        [85.7222],
        [79.0289],
        [79.2812],
        [82.4214],
        [77.0057],
        [82.1504],
        [83.5107],
        [88.8161],
        [91.0598],
        [88.0057],
        [91.2800],
        [87.4631],
        [86.8266],
        [90.8865],
        [85.3899],
        [89.2897],
        [88.1849],
        [90.0042],
        [88.4083],
        [89.3673],
        [87.3813],
        [89.3390],
        [86.7279],
        [89.4632],
        [88.6569],
        [89.9115],
        [90.3689],
        [92.2500],
        [86.9926],
        [85.5081],
        [88.0683],
        [93.1559],
        [89.3517],
        [88.9478],
        [90.1618],
        [89.1599]])
Selected blocks appended
Decoding step 88
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([352, 202, 310, 391, 489, 470, 405, 267, 302, 403,  39, 158,  72, 461,
         72, 173, 188, 269, 369, 191, 371, 238, 365, 354, 300, 291, 208,  76,
        495, 256, 337, 267, 425, 439, 179, 319, 418, 331,  18, 404,  58, 475,
        455,  36,  99, 405, 496,  36,  11, 311])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[352]],

        [[202]],

        [[310]],

        [[391]],

        [[489]],

        [[470]],

        [[405]],

        [[267]],

        [[302]],

        [[403]],

        [[ 39]],

        [[158]],

        [[ 72]],

        [[461]],

        [[ 72]],

        [[173]],

        [[188]],

        [[269]],

        [[369]],

        [[191]],

        [[371]],

        [[238]],

        [[365]],

        [[354]],

        [[300]],

        [[291]],

        [[208]],

        [[ 76]],

        [[495]],

        [[256]],

        [[337]],

        [[267]],

        [[425]],

        [[439]],

        [[179]],

        [[319]],

        [[418]],

        [[331]],

        [[ 18]],

        [[404]],

        [[ 58]],

        [[475]],

        [[455]],

        [[ 36]],

        [[ 99]],

        [[405]],

        [[496]],

        [[ 36]],

        [[ 11]],

        [[311]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[84.1044],
        [91.1093],
        [88.9871],
        [89.2545],
        [88.3901],
        [92.5484],
        [92.3825],
        [89.1739],
        [94.4471],
        [91.8639],
        [83.3804],
        [83.4236],
        [81.4236],
        [82.8115],
        [86.6311],
        [79.9397],
        [80.1424],
        [83.3069],
        [77.7782],
        [83.0494],
        [84.8468],
        [89.5516],
        [91.8803],
        [89.2481],
        [92.7583],
        [88.5642],
        [87.7366],
        [92.1011],
        [86.5039],
        [90.0443],
        [89.4391],
        [91.6017],
        [89.3286],
        [90.1607],
        [88.0869],
        [90.6380],
        [87.4496],
        [90.8869],
        [89.0811],
        [91.0993],
        [91.3318],
        [93.4585],
        [87.9046],
        [86.5691],
        [89.3483],
        [94.2104],
        [90.1472],
        [90.0087],
        [90.8947],
        [90.0989]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[84.1044],
        [91.1093],
        [88.9871],
        [89.2545],
        [88.3901],
        [92.5484],
        [92.3825],
        [89.1739],
        [94.4471],
        [91.8639],
        [83.3804],
        [83.4236],
        [81.4236],
        [82.8115],
        [86.6311],
        [79.9397],
        [80.1424],
        [83.3069],
        [77.7782],
        [83.0494],
        [84.8468],
        [89.5516],
        [91.8803],
        [89.2481],
        [92.7583],
        [88.5642],
        [87.7366],
        [92.1011],
        [86.5039],
        [90.0443],
        [89.4391],
        [91.6017],
        [89.3286],
        [90.1607],
        [88.0869],
        [90.6380],
        [87.4496],
        [90.8869],
        [89.0811],
        [91.0993],
        [91.3318],
        [93.4585],
        [87.9046],
        [86.5691],
        [89.3483],
        [94.2104],
        [90.1472],
        [90.0087],
        [90.8947],
        [90.0989]])
Selected blocks appended
Decoding step 89
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([127,   6,  13, 126,  56,  94,  47, 275,  35, 182, 460, 218, 458, 218,
         58, 112, 270,  32, 473, 140,  85, 116, 449, 477, 357, 114, 150, 340,
        173, 123, 440,   0, 122, 274,  86, 456, 467, 139, 353, 333,   5, 291,
        469, 416, 329, 322, 126, 320, 244, 464])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[127]],

        [[  6]],

        [[ 13]],

        [[126]],

        [[ 56]],

        [[ 94]],

        [[ 47]],

        [[275]],

        [[ 35]],

        [[182]],

        [[460]],

        [[218]],

        [[458]],

        [[218]],

        [[ 58]],

        [[112]],

        [[270]],

        [[ 32]],

        [[473]],

        [[140]],

        [[ 85]],

        [[116]],

        [[449]],

        [[477]],

        [[357]],

        [[114]],

        [[150]],

        [[340]],

        [[173]],

        [[123]],

        [[440]],

        [[  0]],

        [[122]],

        [[274]],

        [[ 86]],

        [[456]],

        [[467]],

        [[139]],

        [[353]],

        [[333]],

        [[  5]],

        [[291]],

        [[469]],

        [[416]],

        [[329]],

        [[322]],

        [[126]],

        [[320]],

        [[244]],

        [[464]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[85.1591],
        [92.0695],
        [90.2505],
        [89.9546],
        [89.1909],
        [93.5340],
        [93.0996],
        [90.2561],
        [95.3710],
        [92.9108],
        [83.9873],
        [83.8628],
        [82.0979],
        [83.2508],
        [87.5067],
        [80.8191],
        [81.3123],
        [84.1071],
        [78.7918],
        [83.8939],
        [86.1676],
        [90.4864],
        [92.6860],
        [90.1530],
        [93.9005],
        [89.8221],
        [88.7819],
        [92.8762],
        [87.5605],
        [91.0090],
        [90.3612],
        [92.5158],
        [90.2695],
        [91.3239],
        [88.8750],
        [91.8865],
        [88.3224],
        [91.9785],
        [89.9094],
        [92.2355],
        [92.5070],
        [94.5287],
        [88.9141],
        [87.8947],
        [90.0449],
        [95.7097],
        [91.2843],
        [90.8259],
        [91.7423],
        [90.8545]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[85.1591],
        [92.0695],
        [90.2505],
        [89.9546],
        [89.1909],
        [93.5340],
        [93.0996],
        [90.2561],
        [95.3710],
        [92.9108],
        [83.9873],
        [83.8628],
        [82.0979],
        [83.2508],
        [87.5067],
        [80.8191],
        [81.3123],
        [84.1071],
        [78.7918],
        [83.8939],
        [86.1676],
        [90.4864],
        [92.6860],
        [90.1530],
        [93.9005],
        [89.8221],
        [88.7819],
        [92.8762],
        [87.5605],
        [91.0090],
        [90.3612],
        [92.5158],
        [90.2695],
        [91.3239],
        [88.8750],
        [91.8865],
        [88.3224],
        [91.9785],
        [89.9094],
        [92.2355],
        [92.5070],
        [94.5287],
        [88.9141],
        [87.8947],
        [90.0449],
        [95.7097],
        [91.2843],
        [90.8259],
        [91.7423],
        [90.8545]])
Selected blocks appended
Decoding step 90
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([290, 169,  69,  65, 374, 114, 349, 448,  87, 145, 224, 325, 276, 372,
         24,  29, 349, 449, 371, 201, 435, 350, 398, 284, 442, 267,  77,  29,
        449, 374, 290, 255,   8, 197, 122, 480,   7,  80, 263, 276, 347, 432,
         47, 376, 360,  34, 405,  48, 301, 216])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[290]],

        [[169]],

        [[ 69]],

        [[ 65]],

        [[374]],

        [[114]],

        [[349]],

        [[448]],

        [[ 87]],

        [[145]],

        [[224]],

        [[325]],

        [[276]],

        [[372]],

        [[ 24]],

        [[ 29]],

        [[349]],

        [[449]],

        [[371]],

        [[201]],

        [[435]],

        [[350]],

        [[398]],

        [[284]],

        [[442]],

        [[267]],

        [[ 77]],

        [[ 29]],

        [[449]],

        [[374]],

        [[290]],

        [[255]],

        [[  8]],

        [[197]],

        [[122]],

        [[480]],

        [[  7]],

        [[ 80]],

        [[263]],

        [[276]],

        [[347]],

        [[432]],

        [[ 47]],

        [[376]],

        [[360]],

        [[ 34]],

        [[405]],

        [[ 48]],

        [[301]],

        [[216]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[86.3069],
        [92.9894],
        [91.6127],
        [90.9607],
        [89.9955],
        [94.6376],
        [94.2956],
        [90.9947],
        [96.3887],
        [94.1309],
        [85.2435],
        [84.9769],
        [83.4633],
        [84.1872],
        [88.4887],
        [81.5928],
        [82.6853],
        [85.0860],
        [80.0173],
        [84.6479],
        [87.4329],
        [91.4435],
        [93.5568],
        [91.3074],
        [94.9025],
        [90.7877],
        [89.9033],
        [94.6244],
        [88.3662],
        [91.6465],
        [91.1280],
        [93.1764],
        [91.5236],
        [92.3137],
        [89.8159],
        [93.1760],
        [89.5365],
        [93.1046],
        [91.1693],
        [92.9164],
        [93.6386],
        [95.1279],
        [89.9196],
        [88.6691],
        [91.1791],
        [96.6659],
        [92.3388],
        [91.7263],
        [92.6870],
        [92.2146]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[86.3069],
        [92.9894],
        [91.6127],
        [90.9607],
        [89.9955],
        [94.6376],
        [94.2956],
        [90.9947],
        [96.3887],
        [94.1309],
        [85.2435],
        [84.9769],
        [83.4633],
        [84.1872],
        [88.4887],
        [81.5928],
        [82.6853],
        [85.0860],
        [80.0173],
        [84.6479],
        [87.4329],
        [91.4435],
        [93.5568],
        [91.3074],
        [94.9025],
        [90.7877],
        [89.9033],
        [94.6244],
        [88.3662],
        [91.6465],
        [91.1280],
        [93.1764],
        [91.5236],
        [92.3137],
        [89.8159],
        [93.1760],
        [89.5365],
        [93.1046],
        [91.1693],
        [92.9164],
        [93.6386],
        [95.1279],
        [89.9196],
        [88.6691],
        [91.1791],
        [96.6659],
        [92.3388],
        [91.7263],
        [92.6870],
        [92.2146]])
Selected blocks appended
Decoding step 91
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([469, 365, 349, 303, 436, 119, 161, 493,  22, 315,  51, 281, 339, 485,
        365,  87, 368,  90, 332, 417, 399, 240, 213, 113, 187, 373, 395, 414,
          3, 271, 106, 260,  13, 258, 201, 343, 103, 106, 496, 206, 124, 239,
         55, 476, 377, 471, 168,  32, 250, 485])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[469]],

        [[365]],

        [[349]],

        [[303]],

        [[436]],

        [[119]],

        [[161]],

        [[493]],

        [[ 22]],

        [[315]],

        [[ 51]],

        [[281]],

        [[339]],

        [[485]],

        [[365]],

        [[ 87]],

        [[368]],

        [[ 90]],

        [[332]],

        [[417]],

        [[399]],

        [[240]],

        [[213]],

        [[113]],

        [[187]],

        [[373]],

        [[395]],

        [[414]],

        [[  3]],

        [[271]],

        [[106]],

        [[260]],

        [[ 13]],

        [[258]],

        [[201]],

        [[343]],

        [[103]],

        [[106]],

        [[496]],

        [[206]],

        [[124]],

        [[239]],

        [[ 55]],

        [[476]],

        [[377]],

        [[471]],

        [[168]],

        [[ 32]],

        [[250]],

        [[485]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[87.1710],
        [94.1811],
        [92.8086],
        [92.0924],
        [90.6454],
        [95.6384],
        [96.0364],
        [92.6872],
        [97.3223],
        [95.1039],
        [86.0225],
        [86.0377],
        [84.5173],
        [84.8711],
        [89.5269],
        [82.0768],
        [83.3264],
        [86.3160],
        [81.2541],
        [85.5019],
        [88.7006],
        [92.4692],
        [94.8312],
        [92.0518],
        [95.8445],
        [91.3988],
        [91.1206],
        [95.0438],
        [89.6406],
        [92.7765],
        [91.9062],
        [94.4968],
        [92.5885],
        [93.1935],
        [91.2118],
        [93.9340],
        [90.7397],
        [93.8828],
        [92.4740],
        [94.0540],
        [94.4839],
        [96.1530],
        [91.1702],
        [89.5807],
        [92.0476],
        [97.6988],
        [93.4063],
        [92.6633],
        [93.8978],
        [93.1835]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[87.1710],
        [94.1811],
        [92.8086],
        [92.0924],
        [90.6454],
        [95.6384],
        [96.0364],
        [92.6872],
        [97.3223],
        [95.1039],
        [86.0225],
        [86.0377],
        [84.5173],
        [84.8711],
        [89.5269],
        [82.0768],
        [83.3264],
        [86.3160],
        [81.2541],
        [85.5019],
        [88.7006],
        [92.4692],
        [94.8312],
        [92.0518],
        [95.8445],
        [91.3988],
        [91.1206],
        [95.0438],
        [89.6406],
        [92.7765],
        [91.9062],
        [94.4968],
        [92.5885],
        [93.1935],
        [91.2118],
        [93.9340],
        [90.7397],
        [93.8828],
        [92.4740],
        [94.0540],
        [94.4839],
        [96.1530],
        [91.1702],
        [89.5807],
        [92.0476],
        [97.6988],
        [93.4063],
        [92.6633],
        [93.8978],
        [93.1835]])
Selected blocks appended
Decoding step 92
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([424, 382,  90, 403, 135, 466, 137, 128, 115, 242, 457, 160, 188, 164,
        114, 113, 410, 138, 287,  81, 381, 244, 263,  77,   6, 377, 390, 394,
         67,  96, 179, 258,  93, 229, 177, 141, 198,  64, 132, 240, 478, 179,
         87,  82, 353, 138, 235, 390, 356, 168])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[424]],

        [[382]],

        [[ 90]],

        [[403]],

        [[135]],

        [[466]],

        [[137]],

        [[128]],

        [[115]],

        [[242]],

        [[457]],

        [[160]],

        [[188]],

        [[164]],

        [[114]],

        [[113]],

        [[410]],

        [[138]],

        [[287]],

        [[ 81]],

        [[381]],

        [[244]],

        [[263]],

        [[ 77]],

        [[  6]],

        [[377]],

        [[390]],

        [[394]],

        [[ 67]],

        [[ 96]],

        [[179]],

        [[258]],

        [[ 93]],

        [[229]],

        [[177]],

        [[141]],

        [[198]],

        [[ 64]],

        [[132]],

        [[240]],

        [[478]],

        [[179]],

        [[ 87]],

        [[ 82]],

        [[353]],

        [[138]],

        [[235]],

        [[390]],

        [[356]],

        [[168]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[88.0703],
        [95.2582],
        [93.8267],
        [93.4345],
        [91.3198],
        [96.5728],
        [97.2231],
        [93.9147],
        [97.8841],
        [96.5425],
        [86.9966],
        [87.0618],
        [85.3785],
        [85.7011],
        [90.5704],
        [82.9620],
        [84.7567],
        [87.2177],
        [82.1816],
        [86.9568],
        [89.9465],
        [93.4956],
        [96.3301],
        [93.1731],
        [96.8804],
        [92.1770],
        [92.3355],
        [95.6580],
        [90.8227],
        [93.4208],
        [92.6118],
        [95.3766],
        [93.6859],
        [94.2885],
        [92.1503],
        [95.0214],
        [91.7755],
        [94.4655],
        [93.3869],
        [95.5192],
        [95.4261],
        [97.0882],
        [91.7061],
        [90.6921],
        [92.7647],
        [98.6999],
        [93.9613],
        [93.8866],
        [94.8284],
        [94.2509]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[88.0703],
        [95.2582],
        [93.8267],
        [93.4345],
        [91.3198],
        [96.5728],
        [97.2231],
        [93.9147],
        [97.8841],
        [96.5425],
        [86.9966],
        [87.0618],
        [85.3785],
        [85.7011],
        [90.5704],
        [82.9620],
        [84.7567],
        [87.2177],
        [82.1816],
        [86.9568],
        [89.9465],
        [93.4956],
        [96.3301],
        [93.1731],
        [96.8804],
        [92.1770],
        [92.3355],
        [95.6580],
        [90.8227],
        [93.4208],
        [92.6118],
        [95.3766],
        [93.6859],
        [94.2885],
        [92.1503],
        [95.0214],
        [91.7755],
        [94.4655],
        [93.3869],
        [95.5192],
        [95.4261],
        [97.0882],
        [91.7061],
        [90.6921],
        [92.7647],
        [98.6999],
        [93.9613],
        [93.8866],
        [94.8284],
        [94.2509]])
Selected blocks appended
Decoding step 93
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([198,   2, 435,   0, 301, 383, 438, 303, 105, 176,  34,  45,  11,  14,
        443, 230,  28, 432, 215, 235, 257,  40, 385, 298,  62, 305, 312, 406,
        428, 434, 182, 199,   5, 364, 109, 498, 328, 352, 288, 171, 440, 478,
         17, 440, 129, 173, 188, 107,  92, 184])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[198]],

        [[  2]],

        [[435]],

        [[  0]],

        [[301]],

        [[383]],

        [[438]],

        [[303]],

        [[105]],

        [[176]],

        [[ 34]],

        [[ 45]],

        [[ 11]],

        [[ 14]],

        [[443]],

        [[230]],

        [[ 28]],

        [[432]],

        [[215]],

        [[235]],

        [[257]],

        [[ 40]],

        [[385]],

        [[298]],

        [[ 62]],

        [[305]],

        [[312]],

        [[406]],

        [[428]],

        [[434]],

        [[182]],

        [[199]],

        [[  5]],

        [[364]],

        [[109]],

        [[498]],

        [[328]],

        [[352]],

        [[288]],

        [[171]],

        [[440]],

        [[478]],

        [[ 17]],

        [[440]],

        [[129]],

        [[173]],

        [[188]],

        [[107]],

        [[ 92]],

        [[184]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[88.9559],
        [96.0939],
        [94.8055],
        [94.3496],
        [92.1638],
        [97.9244],
        [98.3716],
        [95.0465],
        [99.0658],
        [97.8329],
        [88.2470],
        [87.5668],
        [85.8451],
        [86.8680],
        [91.1742],
        [83.9506],
        [85.7138],
        [88.1687],
        [82.9627],
        [88.0307],
        [90.6877],
        [94.5018],
        [97.2303],
        [94.0881],
        [97.6773],
        [93.1606],
        [93.3242],
        [97.0736],
        [91.6772],
        [94.5684],
        [93.5705],
        [96.2665],
        [94.8732],
        [95.0964],
        [93.0828],
        [96.3808],
        [92.9056],
        [95.5156],
        [94.1586],
        [96.7653],
        [96.3434],
        [98.0304],
        [92.4711],
        [91.6094],
        [93.2670],
        [99.3245],
        [95.3065],
        [95.1388],
        [96.4162],
        [95.3986]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[88.9559],
        [96.0939],
        [94.8055],
        [94.3496],
        [92.1638],
        [97.9244],
        [98.3716],
        [95.0465],
        [99.0658],
        [97.8329],
        [88.2470],
        [87.5668],
        [85.8451],
        [86.8680],
        [91.1742],
        [83.9506],
        [85.7138],
        [88.1687],
        [82.9627],
        [88.0307],
        [90.6877],
        [94.5018],
        [97.2303],
        [94.0881],
        [97.6773],
        [93.1606],
        [93.3242],
        [97.0736],
        [91.6772],
        [94.5684],
        [93.5705],
        [96.2665],
        [94.8732],
        [95.0964],
        [93.0828],
        [96.3808],
        [92.9056],
        [95.5156],
        [94.1586],
        [96.7653],
        [96.3434],
        [98.0304],
        [92.4711],
        [91.6094],
        [93.2670],
        [99.3245],
        [95.3065],
        [95.1388],
        [96.4162],
        [95.3986]])
Selected blocks appended
Decoding step 94
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([106,  69, 338, 219, 330, 142, 373,  24, 307, 323, 318, 242, 155,  72,
        427, 389, 185, 316, 211, 461,  83, 445, 382,  26,  14, 341, 420, 399,
        155, 440, 324, 197, 336,  31,  80, 205, 314,  17, 286, 231, 269, 430,
        327,  97, 486, 351, 315, 328, 379,  18])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[106]],

        [[ 69]],

        [[338]],

        [[219]],

        [[330]],

        [[142]],

        [[373]],

        [[ 24]],

        [[307]],

        [[323]],

        [[318]],

        [[242]],

        [[155]],

        [[ 72]],

        [[427]],

        [[389]],

        [[185]],

        [[316]],

        [[211]],

        [[461]],

        [[ 83]],

        [[445]],

        [[382]],

        [[ 26]],

        [[ 14]],

        [[341]],

        [[420]],

        [[399]],

        [[155]],

        [[440]],

        [[324]],

        [[197]],

        [[336]],

        [[ 31]],

        [[ 80]],

        [[205]],

        [[314]],

        [[ 17]],

        [[286]],

        [[231]],

        [[269]],

        [[430]],

        [[327]],

        [[ 97]],

        [[486]],

        [[351]],

        [[315]],

        [[328]],

        [[379]],

        [[ 18]]])
Shape of gathered_loc_valid: torch.Size([50, 1, 4])
Stored size after update: tensor([[90.1161],
        [97.4560],
        [95.7598],
        [95.1374],
        [93.2923],
        [98.7602],
        [99.0950],
        [96.0468],
        [99.8363],
        [98.7525],
        [89.5776],
        [88.5423],
        [86.9151],
        [87.7769],
        [92.1777],
        [85.1646],
        [86.5053],
        [89.0937],
        [83.9788],
        [89.0253],
        [91.7364],
        [95.4314],
        [98.3910],
        [94.8772],
        [98.5504],
        [93.9520],
        [94.3123],
        [98.3414],
        [92.7427],
        [95.4311],
        [94.5245],
        [97.2563],
        [95.7852],
        [95.8765],
        [94.2089],
        [97.4309],
        [94.0463],
        [96.8188],
        [95.5399],
        [97.8074],
        [97.3728],
        [98.9112],
        [92.9069],
        [92.5932],
        [94.3711],
        [99.7987],
        [96.6673],
        [96.2301],
        [97.6832],
        [96.2818]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[90.1161],
        [97.4560],
        [95.7598],
        [95.1374],
        [93.2923],
        [98.7602],
        [99.0950],
        [96.0468],
        [99.8363],
        [98.7525],
        [89.5776],
        [88.5423],
        [86.9151],
        [87.7769],
        [92.1777],
        [85.1646],
        [86.5053],
        [89.0937],
        [83.9788],
        [89.0253],
        [91.7364],
        [95.4314],
        [98.3910],
        [94.8772],
        [98.5504],
        [93.9520],
        [94.3123],
        [98.3414],
        [92.7427],
        [95.4311],
        [94.5245],
        [97.2563],
        [95.7852],
        [95.8765],
        [94.2089],
        [97.4309],
        [94.0463],
        [96.8188],
        [95.5399],
        [97.8074],
        [97.3728],
        [98.9112],
        [92.9069],
        [92.5932],
        [94.3711],
        [99.7987],
        [96.6673],
        [96.2301],
        [97.6832],
        [96.2818]])
Selected blocks appended
Decoding step 95
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 8],
        [45]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 9],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [46],
        [47],
        [48],
        [49]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([414, 472,  55, 468, 102, 123, 115, 349,  -1, 146, 201, 207, 426, 288,
         41, 299, 369, 260, 272, 199, 490, 482, 400, 247, 225, 362, 250, 307,
        228,  79, 350, 230, 109, 179,  57, 351, 448, 499, 337, 458,  90, 117,
        319, 453, 152,  -1, 385, 209, 360, 292])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[414]],

        [[472]],

        [[ 55]],

        [[468]],

        [[102]],

        [[123]],

        [[115]],

        [[349]],

        [[ -1]],

        [[146]],

        [[201]],

        [[207]],

        [[426]],

        [[288]],

        [[ 41]],

        [[299]],

        [[369]],

        [[260]],

        [[272]],

        [[199]],

        [[490]],

        [[482]],

        [[400]],

        [[247]],

        [[225]],

        [[362]],

        [[250]],

        [[307]],

        [[228]],

        [[ 79]],

        [[350]],

        [[230]],

        [[109]],

        [[179]],

        [[ 57]],

        [[351]],

        [[448]],

        [[499]],

        [[337]],

        [[458]],

        [[ 90]],

        [[117]],

        [[319]],

        [[453]],

        [[152]],

        [[ -1]],

        [[385]],

        [[209]],

        [[360]],

        [[292]]])
Shape of gathered_loc_valid: torch.Size([48, 1, 4])
Stored size after update: tensor([[91.2621],
        [98.5839],
        [96.5722],
        [95.6705],
        [94.0150],
        [99.6217],
        [99.6568],
        [97.2427],
        [99.8363],
        [99.6267],
        [90.3316],
        [89.4473],
        [87.7065],
        [88.7488],
        [92.9673],
        [86.2002],
        [87.2778],
        [89.8247],
        [84.5725],
        [89.8848],
        [92.5364],
        [96.6641],
        [99.7172],
        [96.0064],
        [99.2085],
        [94.4475],
        [94.9474],
        [99.2728],
        [93.3302],
        [96.7204],
        [95.4796],
        [98.2014],
        [96.7177],
        [96.5821],
        [95.1924],
        [98.5269],
        [95.3675],
        [97.9632],
        [96.7941],
        [99.2718],
        [97.9034],
        [99.6801],
        [93.7039],
        [93.2075],
        [95.8193],
        [99.7987],
        [97.9268],
        [96.8399],
        [98.8173],
        [97.1557]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[91.2621],
        [98.5839],
        [96.5722],
        [95.6705],
        [94.0150],
        [99.6217],
        [99.6568],
        [97.2427],
        [99.8363],
        [99.6267],
        [90.3316],
        [89.4473],
        [87.7065],
        [88.7488],
        [92.9673],
        [86.2002],
        [87.2778],
        [89.8247],
        [84.5725],
        [89.8848],
        [92.5364],
        [96.6641],
        [99.7172],
        [96.0064],
        [99.2085],
        [94.4475],
        [94.9474],
        [99.2728],
        [93.3302],
        [96.7204],
        [95.4796],
        [98.2014],
        [96.7177],
        [96.5821],
        [95.1924],
        [98.5269],
        [95.3675],
        [97.9632],
        [96.7941],
        [99.2718],
        [97.9034],
        [99.6801],
        [93.7039],
        [93.2075],
        [95.8193],
        [99.7987],
        [97.9268],
        [96.8399],
        [98.8173],
        [97.1557]])
Selected blocks appended
Decoding step 96
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 8],
        [45]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 9],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [46],
        [47],
        [48],
        [49]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ 34, 332, 396, 204, 126, 208, 208, 421,  -1, 446, 495, 124, 303, 496,
        413, 333, 194, 135, 488, 121, 368,   1, 337, 482, 377, 494, 156, 212,
        131, 368, 216, 386, 331, 365, 418, 140, 395, 377, 356, 282, 153, 243,
        334, 258, 357,  -1, 304, 296, 353, 133])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ 34]],

        [[332]],

        [[396]],

        [[204]],

        [[126]],

        [[208]],

        [[208]],

        [[421]],

        [[ -1]],

        [[446]],

        [[495]],

        [[124]],

        [[303]],

        [[496]],

        [[413]],

        [[333]],

        [[194]],

        [[135]],

        [[488]],

        [[121]],

        [[368]],

        [[  1]],

        [[337]],

        [[482]],

        [[377]],

        [[494]],

        [[156]],

        [[212]],

        [[131]],

        [[368]],

        [[216]],

        [[386]],

        [[331]],

        [[365]],

        [[418]],

        [[140]],

        [[395]],

        [[377]],

        [[356]],

        [[282]],

        [[153]],

        [[243]],

        [[334]],

        [[258]],

        [[357]],

        [[ -1]],

        [[304]],

        [[296]],

        [[353]],

        [[133]]])
Shape of gathered_loc_valid: torch.Size([48, 1, 4])
Stored size after update: tensor([[92.3644],
        [99.3130],
        [97.5653],
        [96.5679],
        [94.7151],
        [99.9392],
        [99.9743],
        [98.3024],
        [99.8363],
        [99.9836],
        [91.3872],
        [90.6233],
        [88.5086],
        [90.2357],
        [93.7699],
        [87.0886],
        [88.3204],
        [90.7591],
        [85.6556],
        [90.5144],
        [93.6723],
        [97.3977],
        [99.8540],
        [97.2391],
        [99.9867],
        [95.4252],
        [96.1212],
        [99.9768],
        [94.5416],
        [97.8564],
        [96.7950],
        [99.6397],
        [98.1415],
        [97.5337],
        [95.9141],
        [99.2828],
        [96.3567],
        [99.2046],
        [97.6554],
        [99.9146],
        [99.0381],
        [99.9924],
        [94.6215],
        [94.0152],
        [96.6597],
        [99.7987],
        [99.1163],
        [97.3258],
        [99.5345],
        [98.4297]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[92.3644],
        [99.3130],
        [97.5653],
        [96.5679],
        [94.7151],
        [99.9392],
        [99.9743],
        [98.3024],
        [99.8363],
        [99.9836],
        [91.3872],
        [90.6233],
        [88.5086],
        [90.2357],
        [93.7699],
        [87.0886],
        [88.3204],
        [90.7591],
        [85.6556],
        [90.5144],
        [93.6723],
        [97.3977],
        [99.8540],
        [97.2391],
        [99.9867],
        [95.4252],
        [96.1212],
        [99.9768],
        [94.5416],
        [97.8564],
        [96.7950],
        [99.6397],
        [98.1415],
        [97.5337],
        [95.9141],
        [99.2828],
        [96.3567],
        [99.2046],
        [97.6554],
        [99.9146],
        [99.0381],
        [99.9924],
        [94.6215],
        [94.0152],
        [96.6597],
        [99.7987],
        [99.1163],
        [97.3258],
        [99.5345],
        [98.4297]])
Selected blocks appended
Decoding step 97
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 5],
        [ 6],
        [ 8],
        [ 9],
        [22],
        [24],
        [27],
        [39],
        [41],
        [45]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 7],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21],
        [23],
        [25],
        [26],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [40],
        [42],
        [43],
        [44],
        [46],
        [47],
        [48],
        [49]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([  6, 317, 253, 299, 422,  -1,  -1,  46,  -1,  -1,  10, 324, 227, 352,
        424, 160, 149, 249, 346, 292, 215,  28,  -1, 321,  -1, 225, 157,  -1,
        462, 353, 404, 495, 325, 192, 310, 317, 227, 176, 316,  -1, 279,  -1,
        468,  33,  77,  -1, 209, 299, 154, 330])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[  6]],

        [[317]],

        [[253]],

        [[299]],

        [[422]],

        [[ -1]],

        [[ -1]],

        [[ 46]],

        [[ -1]],

        [[ -1]],

        [[ 10]],

        [[324]],

        [[227]],

        [[352]],

        [[424]],

        [[160]],

        [[149]],

        [[249]],

        [[346]],

        [[292]],

        [[215]],

        [[ 28]],

        [[ -1]],

        [[321]],

        [[ -1]],

        [[225]],

        [[157]],

        [[ -1]],

        [[462]],

        [[353]],

        [[404]],

        [[495]],

        [[325]],

        [[192]],

        [[310]],

        [[317]],

        [[227]],

        [[176]],

        [[316]],

        [[ -1]],

        [[279]],

        [[ -1]],

        [[468]],

        [[ 33]],

        [[ 77]],

        [[ -1]],

        [[209]],

        [[299]],

        [[154]],

        [[330]]])
Shape of gathered_loc_valid: torch.Size([40, 1, 4])
Stored size after update: tensor([[93.3245],
        [99.9523],
        [98.3717],
        [97.3525],
        [95.6889],
        [99.9392],
        [99.9743],
        [99.6526],
        [99.8363],
        [99.9836],
        [92.1913],
        [91.5437],
        [89.4839],
        [91.4833],
        [94.4754],
        [88.1127],
        [89.4764],
        [91.9506],
        [86.3313],
        [91.3527],
        [95.0213],
        [98.3722],
        [99.8540],
        [98.3872],
        [99.9867],
        [96.0833],
        [97.0530],
        [99.9768],
        [95.8402],
        [98.9583],
        [97.9828],
        [99.9969],
        [99.1082],
        [98.0650],
        [96.9133],
        [99.7369],
        [97.0838],
        [99.9982],
        [98.7128],
        [99.9146],
        [99.5824],
        [99.9924],
        [95.5750],
        [95.1149],
        [97.6261],
        [99.7987],
        [99.7261],
        [98.1756],
        [99.8885],
        [99.4714]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[93.3245],
        [99.9523],
        [98.3717],
        [97.3525],
        [95.6889],
        [99.9392],
        [99.9743],
        [99.6526],
        [99.8363],
        [99.9836],
        [92.1913],
        [91.5437],
        [89.4839],
        [91.4833],
        [94.4754],
        [88.1127],
        [89.4764],
        [91.9506],
        [86.3313],
        [91.3527],
        [95.0213],
        [98.3722],
        [99.8540],
        [98.3872],
        [99.9867],
        [96.0833],
        [97.0530],
        [99.9768],
        [95.8402],
        [98.9583],
        [97.9828],
        [99.9969],
        [99.1082],
        [98.0650],
        [96.9133],
        [99.7369],
        [97.0838],
        [99.9982],
        [98.7128],
        [99.9146],
        [99.5824],
        [99.9924],
        [95.5750],
        [95.1149],
        [97.6261],
        [99.7987],
        [99.7261],
        [98.1756],
        [99.8885],
        [99.4714]])
Selected blocks appended
Decoding step 98
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 5],
        [ 6],
        [ 8],
        [ 9],
        [22],
        [24],
        [27],
        [31],
        [35],
        [37],
        [39],
        [41],
        [45],
        [46],
        [48]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 2],
        [ 3],
        [ 4],
        [ 7],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21],
        [23],
        [25],
        [26],
        [28],
        [29],
        [30],
        [32],
        [33],
        [34],
        [36],
        [38],
        [40],
        [42],
        [43],
        [44],
        [47],
        [49]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([208,  -1, 306, 254, 281,  -1,  -1, 208,  -1,  -1,  81, 271, 164, 283,
         86, 428, 422,   3, 357, 286, 498, 437,  -1, 372,  -1,  97, 182,  -1,
        403, 307, 452,  -1, 284, 359, 355,  -1, 172,  -1, 427,  -1, 243,  -1,
         60, 375, 267,  -1,  -1,  96,  -1, 154])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[208]],

        [[ -1]],

        [[306]],

        [[254]],

        [[281]],

        [[ -1]],

        [[ -1]],

        [[208]],

        [[ -1]],

        [[ -1]],

        [[ 81]],

        [[271]],

        [[164]],

        [[283]],

        [[ 86]],

        [[428]],

        [[422]],

        [[  3]],

        [[357]],

        [[286]],

        [[498]],

        [[437]],

        [[ -1]],

        [[372]],

        [[ -1]],

        [[ 97]],

        [[182]],

        [[ -1]],

        [[403]],

        [[307]],

        [[452]],

        [[ -1]],

        [[284]],

        [[359]],

        [[355]],

        [[ -1]],

        [[172]],

        [[ -1]],

        [[427]],

        [[ -1]],

        [[243]],

        [[ -1]],

        [[ 60]],

        [[375]],

        [[267]],

        [[ -1]],

        [[ -1]],

        [[ 96]],

        [[ -1]],

        [[154]]])
Shape of gathered_loc_valid: torch.Size([34, 1, 4])
Stored size after update: tensor([[93.6420],
        [99.9523],
        [99.8501],
        [97.9241],
        [96.2119],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [93.6462],
        [92.2506],
        [90.3139],
        [92.4199],
        [95.9327],
        [89.3368],
        [90.5660],
        [92.6227],
        [87.3228],
        [92.5624],
        [95.7046],
        [99.6257],
        [99.8540],
        [99.3174],
        [99.9867],
        [96.8625],
        [98.3134],
        [99.9768],
        [96.5010],
        [99.8897],
        [99.0430],
        [99.9969],
        [99.9216],
        [99.1860],
        [97.7775],
        [99.7369],
        [98.2245],
        [99.9982],
        [99.2069],
        [99.9146],
        [99.8947],
        [99.9924],
        [96.8171],
        [96.3308],
        [98.5735],
        [99.7987],
        [99.7261],
        [98.6461],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[93.6420],
        [99.9523],
        [99.8501],
        [97.9241],
        [96.2119],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [93.6462],
        [92.2506],
        [90.3139],
        [92.4199],
        [95.9327],
        [89.3368],
        [90.5660],
        [92.6227],
        [87.3228],
        [92.5624],
        [95.7046],
        [99.6257],
        [99.8540],
        [99.3174],
        [99.9867],
        [96.8625],
        [98.3134],
        [99.9768],
        [96.5010],
        [99.8897],
        [99.0430],
        [99.9969],
        [99.9216],
        [99.1860],
        [97.7775],
        [99.7369],
        [98.2245],
        [99.9982],
        [99.2069],
        [99.9146],
        [99.8947],
        [99.9924],
        [96.8171],
        [96.3308],
        [98.5735],
        [99.7987],
        [99.7261],
        [98.6461],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 99
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 2],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [22],
        [24],
        [27],
        [29],
        [31],
        [32],
        [35],
        [37],
        [39],
        [40],
        [41],
        [45],
        [46],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 3],
        [ 4],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21],
        [23],
        [25],
        [26],
        [28],
        [30],
        [33],
        [34],
        [36],
        [38],
        [42],
        [43],
        [44],
        [47]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([151,  -1,  -1,  42, 269,  -1,  -1,  -1,  -1,  -1, 498, 174, 180, 477,
        395, 426,  33,  42, 196, 364, 139, 337,  -1, 128,  -1, 216,  21,  -1,
        366,  -1, 268,  -1,  -1,  91, 254,  -1, 295,  -1, 391,  -1,  -1,  -1,
         74, 307, 382,  -1,  -1, 407,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[151]],

        [[ -1]],

        [[ -1]],

        [[ 42]],

        [[269]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[498]],

        [[174]],

        [[180]],

        [[477]],

        [[395]],

        [[426]],

        [[ 33]],

        [[ 42]],

        [[196]],

        [[364]],

        [[139]],

        [[337]],

        [[ -1]],

        [[128]],

        [[ -1]],

        [[216]],

        [[ 21]],

        [[ -1]],

        [[366]],

        [[ -1]],

        [[268]],

        [[ -1]],

        [[ -1]],

        [[ 91]],

        [[254]],

        [[ -1]],

        [[295]],

        [[ -1]],

        [[391]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ 74]],

        [[307]],

        [[382]],

        [[ -1]],

        [[ -1]],

        [[407]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([28, 1, 4])
Stored size after update: tensor([[94.6841],
        [99.9523],
        [99.8501],
        [99.4068],
        [97.0044],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [94.7798],
        [93.1012],
        [91.4643],
        [93.1344],
        [96.7008],
        [90.1282],
        [91.3821],
        [93.2368],
        [87.9907],
        [93.4305],
        [96.8282],
        [99.7624],
        [99.8540],
        [99.9831],
        [99.9867],
        [98.0681],
        [99.3650],
        [99.9768],
        [97.6934],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.2579],
        [99.7369],
        [99.6415],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [97.5533],
        [97.8145],
        [99.1615],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[94.6841],
        [99.9523],
        [99.8501],
        [99.4068],
        [97.0044],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [94.7798],
        [93.1012],
        [91.4643],
        [93.1344],
        [96.7008],
        [90.1282],
        [91.3821],
        [93.2368],
        [87.9907],
        [93.4305],
        [96.8282],
        [99.7624],
        [99.8540],
        [99.9831],
        [99.9867],
        [98.0681],
        [99.3650],
        [99.9768],
        [97.6934],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.2579],
        [99.7369],
        [99.6415],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [97.5533],
        [97.8145],
        [99.1615],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 100
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 2],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [22],
        [23],
        [24],
        [27],
        [29],
        [30],
        [31],
        [32],
        [33],
        [35],
        [37],
        [38],
        [39],
        [40],
        [41],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 3],
        [ 4],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [21],
        [25],
        [26],
        [28],
        [34],
        [36],
        [42],
        [43],
        [44]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([207,  -1,  -1, 213, 461,  -1,  -1,  -1,  -1,  -1, 448,  63, 107, 149,
        272, 297,  79, 215, 396, 221, 397, 417,  -1,  -1,  -1, 289, 394,  -1,
         40,  -1,  -1,  -1,  -1,  -1,  70,  -1, 495,  -1,  -1,  -1,  -1,  -1,
        249, 342,  90,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[207]],

        [[ -1]],

        [[ -1]],

        [[213]],

        [[461]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[448]],

        [[ 63]],

        [[107]],

        [[149]],

        [[272]],

        [[297]],

        [[ 79]],

        [[215]],

        [[396]],

        [[221]],

        [[397]],

        [[417]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[289]],

        [[394]],

        [[ -1]],

        [[ 40]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ 70]],

        [[ -1]],

        [[495]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[249]],

        [[342]],

        [[ 90]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([23, 1, 4])
Stored size after update: tensor([[96.2302],
        [99.9523],
        [99.8501],
        [99.9832],
        [97.9809],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [95.3783],
        [94.0036],
        [92.5127],
        [94.2904],
        [97.2945],
        [91.0783],
        [92.3571],
        [94.0179],
        [88.7905],
        [94.6034],
        [97.6598],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.0656],
        [99.9792],
        [99.9768],
        [98.6996],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.2517],
        [98.7797],
        [99.6921],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[96.2302],
        [99.9523],
        [99.8501],
        [99.9832],
        [97.9809],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [95.3783],
        [94.0036],
        [92.5127],
        [94.2904],
        [97.2945],
        [91.0783],
        [92.3571],
        [94.0179],
        [88.7905],
        [94.6034],
        [97.6598],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.0656],
        [99.9792],
        [99.9768],
        [98.6996],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.2517],
        [98.7797],
        [99.6921],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 101
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 2],
        [ 3],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [21],
        [22],
        [23],
        [24],
        [26],
        [27],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 4],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [25],
        [28],
        [42],
        [43],
        [44]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([183,  -1,  -1,  -1, 305,  -1,  -1,  -1,  -1,  -1, 380, 430, 459, 206,
        236,  39, 160, 374, 496, 152, 186,  -1,  -1,  -1,  -1, 157,  -1,  -1,
        431,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        235, 484, 479,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[183]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[305]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[380]],

        [[430]],

        [[459]],

        [[206]],

        [[236]],

        [[ 39]],

        [[160]],

        [[374]],

        [[496]],

        [[152]],

        [[186]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[157]],

        [[ -1]],

        [[ -1]],

        [[431]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[235]],

        [[484]],

        [[479]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([18, 1, 4])
Stored size after update: tensor([[97.2686],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.1749],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [96.7138],
        [95.0293],
        [93.8722],
        [95.3876],
        [98.3896],
        [91.7617],
        [93.3811],
        [94.4715],
        [90.2775],
        [95.5993],
        [98.9178],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.4053],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[97.2686],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.1749],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [96.7138],
        [95.0293],
        [93.8722],
        [95.3876],
        [98.3896],
        [91.7617],
        [93.3811],
        [94.4715],
        [90.2775],
        [95.5993],
        [98.9178],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.4053],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 102
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 2],
        [ 3],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [ 4],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20],
        [28]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([432,  -1,  -1,  -1, 227,  -1,  -1,  -1,  -1,  -1, 385,  32, 291, 234,
        151, 416, 139, 376, 376,  77, 487,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        175,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[432]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[227]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[385]],

        [[ 32]],

        [[291]],

        [[234]],

        [[151]],

        [[416]],

        [[139]],

        [[376]],

        [[376]],

        [[ 77]],

        [[487]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[175]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([14, 1, 4])
Stored size after update: tensor([[98.0598],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [97.9505],
        [95.8295],
        [94.9534],
        [96.4416],
        [99.5212],
        [92.7393],
        [94.0274],
        [95.7308],
        [91.5368],
        [96.5591],
        [99.6476],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[98.0598],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [97.9505],
        [95.8295],
        [94.9534],
        [96.4416],
        [99.5212],
        [92.7393],
        [94.0274],
        [95.7308],
        [91.5368],
        [96.5591],
        [99.6476],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 103
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [10],
        [11],
        [12],
        [13],
        [14],
        [15],
        [16],
        [17],
        [18],
        [19],
        [20]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([189,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 292, 351, 257, 279,
         11,  41, 128, 248,  25, 250, 313,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[189]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[292]],

        [[351]],

        [[257]],

        [[279]],

        [[ 11]],

        [[ 41]],

        [[128]],

        [[248]],

        [[ 25]],

        [[250]],

        [[313]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([12, 1, 4])
Stored size after update: tensor([[98.9863],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [98.7887],
        [96.7747],
        [95.8070],
        [97.4362],
        [99.9878],
        [93.5289],
        [95.0421],
        [96.8031],
        [92.6866],
        [97.4538],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[98.9863],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [98.7887],
        [96.7747],
        [95.8070],
        [97.4362],
        [99.9878],
        [93.5289],
        [95.0421],
        [96.8031],
        [92.6866],
        [97.4538],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 104
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [14],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[ 0],
        [10],
        [11],
        [12],
        [13],
        [15],
        [16],
        [17],
        [18],
        [19]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([289,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 387, 104, 221, 353,
         -1, 170, 361, 418, 200, 168,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[289]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[387]],

        [[104]],

        [[221]],

        [[353]],

        [[ -1]],

        [[170]],

        [[361]],

        [[418]],

        [[200]],

        [[168]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([10, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.5572],
        [97.7594],
        [96.9800],
        [98.3120],
        [99.9878],
        [94.3551],
        [96.1727],
        [98.0425],
        [93.2970],
        [98.1771],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.5572],
        [97.7594],
        [96.9800],
        [98.3120],
        [99.9878],
        [94.3551],
        [96.1727],
        [98.0425],
        [93.2970],
        [98.1771],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 105
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [14],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[10],
        [11],
        [12],
        [13],
        [15],
        [16],
        [17],
        [18],
        [19]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 105, 122,  92, 308,
         -1, 212, 378, 375, 411, 458,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[105]],

        [[122]],

        [[ 92]],

        [[308]],

        [[ -1]],

        [[212]],

        [[378]],

        [[375]],

        [[411]],

        [[458]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([9, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.0232],
        [97.6639],
        [99.4467],
        [99.9878],
        [95.2007],
        [97.0075],
        [98.9751],
        [94.5782],
        [98.8515],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.0232],
        [97.6639],
        [99.4467],
        [99.9878],
        [95.2007],
        [97.0075],
        [98.9751],
        [94.5782],
        [98.8515],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 106
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10],
        [14],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[11],
        [12],
        [13],
        [15],
        [16],
        [17],
        [18],
        [19]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  49, 204,
         -1, 448,  49,  36, 442, 245,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[293]],

        [[ 49]],

        [[204]],

        [[ -1]],

        [[448]],

        [[ 49]],

        [[ 36]],

        [[442]],

        [[245]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([8, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [98.2485],
        [99.9610],
        [99.9878],
        [95.7992],
        [97.5921],
        [99.8327],
        [95.7934],
        [99.4010],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [98.2485],
        [99.9610],
        [99.9878],
        [95.7992],
        [97.5921],
        [99.8327],
        [95.7934],
        [99.4010],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 107
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10],
        [11],
        [13],
        [14],
        [17],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[12],
        [15],
        [16],
        [18],
        [19]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 385,  -1,
         -1,  67, 387,  -1, 230, 374,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[385]],

        [[ -1]],

        [[ -1]],

        [[ 67]],

        [[387]],

        [[ -1]],

        [[230]],

        [[374]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([5, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.4852],
        [99.9610],
        [99.9878],
        [97.0127],
        [98.3605],
        [99.8327],
        [96.7820],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.4852],
        [99.9610],
        [99.9878],
        [97.0127],
        [98.3605],
        [99.8327],
        [96.7820],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 108
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10],
        [11],
        [13],
        [14],
        [17],
        [19],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[12],
        [15],
        [16],
        [18]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 197,  -1,
         -1,  51, 274,  -1, 413,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[197]],

        [[ -1]],

        [[ -1]],

        [[ 51]],

        [[274]],

        [[ -1]],

        [[413]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([4, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [97.7918],
        [98.6941],
        [99.8327],
        [97.5846],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [97.7918],
        [98.6941],
        [99.8327],
        [97.5846],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 109
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10],
        [11],
        [12],
        [13],
        [14],
        [17],
        [19],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[15],
        [16],
        [18]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  15,  90,  -1, 434,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ 15]],

        [[ 90]],

        [[ -1]],

        [[434]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([3, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [98.4516],
        [99.9241],
        [99.8327],
        [98.7225],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [98.4516],
        [99.9241],
        [99.8327],
        [98.7225],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 110
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10],
        [11],
        [12],
        [13],
        [14],
        [16],
        [17],
        [19],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[15],
        [18]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1, 364,  -1,  -1, 470,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[364]],

        [[ -1]],

        [[ -1]],

        [[470]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([2, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [99.3197],
        [99.9241],
        [99.8327],
        [99.4266],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [99.3197],
        [99.9241],
        [99.8327],
        [99.4266],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 111
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
Select indices of next blocks to store
Batches with all actions masked: tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10],
        [11],
        [12],
        [13],
        [14],
        [16],
        [17],
        [19],
        [20],
        [21],
        [22],
        [23],
        [24],
        [25],
        [26],
        [27],
        [28],
        [29],
        [30],
        [31],
        [32],
        [33],
        [34],
        [35],
        [36],
        [37],
        [38],
        [39],
        [40],
        [41],
        [42],
        [43],
        [44],
        [45],
        [46],
        [47],
        [48],
        [49]])
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Sampled bad values, resampling!
Max resampling attempts reached for batch tensor([[15],
        [18]])
Shape of selected blocks: torch.Size([50])
Selected blocks:tensor([ -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1, 274,  -1,  -1, 197,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
         -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1])
Selection complete
Update state with selected blocks
Shape of loc: torch.Size([50, 500, 4])
Shape of selected: torch.Size([50])
Shape of prev_a: torch.Size([50, 1, 1])
Prev_a: tensor([[[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[274]],

        [[ -1]],

        [[ -1]],

        [[197]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]],

        [[ -1]]])
Shape of gathered_loc_valid: torch.Size([2, 1, 4])
Stored size after update: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [99.6533],
        [99.9241],
        [99.8327],
        [99.9217],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks after update: tensor([[[0, 0, 1,  ..., 0, 0, 0]],

        [[0, 1, 1,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0]],

        ...,

        [[1, 1, 0,  ..., 0, 0, 1]],

        [[0, 0, 0,  ..., 0, 1, 0]],

        [[0, 0, 1,  ..., 0, 0, 0]]], dtype=torch.uint8)
State updated
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [99.6533],
        [99.9241],
        [99.8327],
        [99.9217],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Selected blocks appended
Decoding step 112
Get log probabilities and mask
Shape of node context embeddings before projection: torch.Size([50, 500, 128])
Current node tensor shape: torch.Size([50, 1])
Shape of current block embedding: torch.Size([50, 1, 128])
Shape of temp: torch.Size([50, 1, 128])
Shape of context embedded: torch.Size([50, 1, 128])
Glimpse key shape:torch.Size([8, 50, 1, 500, 16])
Glimpse value shape: torch.Size([8, 50, 1, 500, 16])
 Logit key shape:torch.Size([50, 1, 500, 128])
Checking for selected blocks
Shape of mask with only selected: torch.Size([50, 1, 500])
Checking capacity violation
***Checking capacity violation
What's the mask?: torch.Size([50, 1, 500])
Query shape: torch.Size([50, 1, 128])
Key size: 16
Shape of glimpse: torch.Size([8, 50, 1, 1, 16])
Compatibility shape before mask inner: torch.Size([8, 50, 1, 1, 500])
Shape of mask: torch.Size([50, 1, 500])
Compatibility shape after mask inner: torch.Size([8, 50, 1, 1, 500])
Computing attention heads
Heads shape: torch.Size([8, 50, 1, 1, 16])
Glimpse shape: torch.Size([50, 1, 1, 128])
Logits shape: torch.Size([50, 1, 500])
Logits clipping successful
Masking successful
Logits computation successful
Log probabilities normalized
Shape of log_p: torch.Size([50, 1, 500])
All actions are masked. Ending decoding process.
Local blockchain storage: tensor([[99.9449],
        [99.9523],
        [99.8501],
        [99.9832],
        [99.9427],
        [99.9392],
        [99.9743],
        [99.9701],
        [99.8363],
        [99.9836],
        [99.9732],
        [99.8597],
        [99.9803],
        [99.9610],
        [99.9878],
        [99.6533],
        [99.9241],
        [99.8327],
        [99.9217],
        [99.8546],
        [99.9847],
        [99.9878],
        [99.8540],
        [99.9831],
        [99.9867],
        [99.9974],
        [99.9792],
        [99.9768],
        [99.9849],
        [99.8897],
        [99.6851],
        [99.9969],
        [99.9216],
        [99.9189],
        [99.8857],
        [99.7369],
        [99.9987],
        [99.9982],
        [99.9824],
        [99.9146],
        [99.8947],
        [99.9924],
        [99.8068],
        [99.8949],
        [99.9874],
        [99.7987],
        [99.7261],
        [99.9694],
        [99.8885],
        [99.8254]])
Decoding completed
-------------------------------------------------------------------------------
Selected blocks: [tensor([236, 174, 156, 443, 104,  40,  46, 489, 100, 104,  68, 496, 173, 381,
        294, 286, 182, 287, 494, 316, 346,   4, 380, 389, 123, 115, 283, 147,
        210, 360, 346, 356, 176, 488, 327, 347, 264, 478, 233,  58, 459, 314,
         52, 244, 460, 341, 159, 130, 146,  66]), tensor([ 94,  63, 423, 457, 262, 115, 383,  64, 316,  30,   9, 297, 237,  85,
        109, 463, 391, 395, 472, 100, 315,  30, 433, 281, 199, 393, 267, 175,
        161, 101, 222, 467, 382, 324, 345, 477, 214, 434, 223, 110,  11, 128,
        161, 105, 192, 321, 443, 230,  34, 296]), tensor([193, 310, 256, 106, 216,  10, 284, 153, 299, 102, 437, 226, 440, 448,
        242, 382,  73, 329, 343,  92, 197, 198, 496,  10, 121, 148, 366, 408,
        290, 439, 310, 183, 350, 362, 130, 338,  51, 376, 394, 485,  55, 207,
        135, 443, 281, 249, 105, 435, 483,  79]), tensor([300, 433, 494, 287, 221, 248, 348, 113, 379, 298, 166, 485, 398,  84,
         46, 408,  22, 154, 220, 491, 106,  93, 304, 165,  35, 340, 370, 420,
        404, 208, 139, 407, 369,  57, 371, 136, 261, 487, 150, 382, 140, 378,
        329, 286, 283, 274, 251, 332, 469, 225]), tensor([286, 164, 191, 132, 423, 373, 127,  87, 110, 303, 289, 167,  74, 489,
        255, 494, 401, 325, 313, 459,  11, 154, 115, 306, 486, 460, 496, 422,
        494, 314, 480, 326,  75, 358, 143,  89, 437, 366, 154, 428,  54, 361,
        351, 252,  61,  19, 497, 492, 228, 166]), tensor([443,  68, 462,  75, 208, 246, 366,  39, 176, 201, 263, 328,  82,   7,
        446,  64, 492,  24, 120,  48, 266, 110,  56,   0, 470, 222, 413,   9,
        356,  26,  49, 301, 328, 201, 119, 466, 217, 160, 333, 396, 278, 182,
        394, 455, 378,  79, 433, 491, 271, 495]), tensor([267, 246, 124, 130, 370, 316, 142, 212, 166,  75, 423, 339, 353, 196,
        188, 223, 245, 426, 414, 436, 383,  12,  11, 330, 405, 444, 351, 463,
        328,  57, 345, 487, 373, 299, 166,  20, 201, 159, 274,  97, 325,  33,
          7, 397, 349, 304, 408, 177, 348, 161]), tensor([346, 299, 150, 475, 254,   8, 442, 432, 484, 369, 250, 184, 313, 473,
        325, 378, 320,  94, 453, 305, 395, 381, 411, 435, 386, 288, 166,  32,
        176, 359, 301, 106,  83, 208, 108, 177, 312, 410, 487, 416, 402, 275,
        367, 426, 257, 343, 227, 432, 487, 226]), tensor([485, 444, 491, 236, 424, 476, 257, 299, 215, 168, 412, 366, 252,  24,
        256, 485, 125, 475, 161,   2, 416, 252, 122, 237, 308, 378, 419, 437,
        183, 124, 328, 360, 368, 368, 172,  39,  93, 359, 475, 484, 467, 375,
        441, 337, 230, 419,  87, 247, 113,  71]), tensor([161, 179, 265, 191, 203,  95, 329,  31, 224, 432, 232, 284, 294,  95,
         59,  65,  31, 320, 101, 287, 409, 291, 432, 127, 181, 336, 187,  72,
          7, 212, 344, 123,  80, 261, 455, 214, 359, 317, 489, 460, 426, 420,
        186, 265,  87, 161, 332, 175, 204,  88]), tensor([355, 107, 303, 175,  41, 342, 483, 319, 286, 114, 187, 157, 133,  58,
         48,  72, 257,  18, 275, 451, 131, 173, 478, 331, 109, 449,  86, 410,
        178, 284, 377, 382, 297, 293,  43, 279, 122, 375, 166, 127, 249, 211,
        316, 130,  75, 474, 266, 292, 161, 295]), tensor([369, 132, 340, 307, 170, 410, 280, 270, 352, 419, 337, 197, 331,  33,
        321, 319, 493, 193, 204,  63, 337, 325,  95,  87, 162, 315, 484, 444,
         16, 251, 138,  68,  76, 207, 227, 216, 393, 372, 334, 325, 131, 344,
         67, 327, 155, 302, 132,  90, 397, 384]), tensor([372, 140, 108, 186, 420, 137, 431, 246, 443, 352, 494, 231, 241,  48,
        226,  95, 473, 451, 125, 298,  42, 408,  81, 457, 424,  42, 408,   1,
         13, 393, 333, 189, 383,  72, 152, 324,  57, 315, 450, 269, 266, 476,
        212, 146,  64, 477, 172, 139, 257, 235]), tensor([ 78,  15, 172, 232, 331, 478, 395, 146, 436, 404, 172, 401, 445, 183,
        265, 145,  23, 368, 325, 269, 388, 422, 113, 346, 493, 208, 104, 316,
        120, 481, 378, 427, 387, 367, 312, 407, 417, 168, 441, 368,  60, 252,
         39, 387, 187, 415, 228, 472, 286, 358]), tensor([187, 394, 368,  21,  98, 317, 494,  80, 284, 497, 284, 243, 199, 366,
        190, 265, 131, 267, 113, 236, 422,  64, 491, 452, 145, 168,  45, 359,
         91, 424, 353, 157, 157, 139, 265, 156, 107,  99, 201, 104, 188, 108,
         50, 467, 351,  99, 226, 117, 492, 409]), tensor([171, 477, 185, 366, 179, 343,  25, 118, 217, 417,  30,  79, 315, 409,
        426, 372, 485, 168,  32, 373,  61, 151, 237, 234, 371,  53, 311, 471,
        334, 397,  21,  93, 403, 116, 161, 157, 240, 297, 186, 402,  30,  91,
         31, 119, 370, 313, 189, 333, 340, 266]), tensor([261, 151, 230, 461, 166, 339, 273, 476, 278, 406, 454, 188, 380, 326,
         98,  31, 267, 192,  12, 215, 204, 123, 332, 255, 227,  54, 198, 133,
        168, 281, 362,  90, 326, 131,  47,  51, 158, 251,  47, 144, 448, 213,
        458, 108, 390, 133, 104, 106, 429, 155]), tensor([  2,  43, 449, 146,   9, 200, 169, 154, 194, 418,  29, 361, 311, 405,
        285, 133, 212, 203, 449, 339,  80,  42, 202, 439, 238, 349, 160, 238,
        239, 394, 108, 312, 106, 123,   2, 388, 471, 492, 281, 380, 199, 162,
        382,  64, 170, 402, 249, 462, 241, 191]), tensor([120,  75, 257, 417, 354, 486, 315, 449, 417, 426,  64,  89,  73,  59,
        387, 157, 179,  99, 448, 405, 479, 441, 260, 163,  11, 301, 247,  93,
        123, 467, 347, 338, 272, 240, 342, 375, 336, 262, 238,  28, 272, 385,
        238, 451, 481, 464, 447, 310, 215, 272]), tensor([494, 416,  84, 244, 446, 166, 232, 205, 149,  39,  32, 254, 401, 209,
         89,  44, 351, 291, 258,  61, 243,  33, 116, 384, 163, 278, 207, 423,
        444, 289, 172, 350, 462,  36, 261, 296, 294, 318,  19, 139, 380, 227,
        211, 354, 235, 451, 115, 375, 180, 233]), tensor([109, 200, 220,  63, 498, 409, 234,  26, 390, 414, 296,  52, 280, 235,
         94, 172, 215, 115, 291, 311,  48, 424, 314, 139, 111, 240, 494, 136,
        307, 254, 272, 179, 135,  75, 294, 253,  19, 429, 143,  78, 204, 164,
        331, 388, 489, 139, 321,  39, 405, 247]), tensor([328, 389, 294, 124,  22, 217, 402, 273,  56, 333,  87, 368, 374, 370,
        463, 443, 310, 332, 135, 280, 338, 319,  14, 167, 428, 237, 357, 354,
        133,  30, 158, 333, 327, 165, 239, 231, 283, 353, 116, 360, 343, 218,
        152, 351, 367,  48, 488, 368,  88, 267]), tensor([101, 289, 132,   4, 382, 270,  31, 180,  79, 363, 148, 352, 361, 494,
        118,  93, 246, 401, 235,  25, 385, 410, 225, 335, 206, 174,  87, 426,
        306, 239, 237, 100, 453, 397, 425, 371,  43, 277, 495, 446,  86, 255,
         82,  24,  74,  55, 419,  12, 297, 289]), tensor([351, 203, 421,  27, 328,  86, 296, 147, 454,  44, 300, 214, 368, 262,
        425, 101, 282,  75, 335, 481, 206, 156, 310,  71, 108, 401, 135, 107,
        262, 198, 171, 316,  47, 251,  48, 455, 199, 413, 217, 480, 103, 447,
         46, 281, 375,  92,  80, 134, 163, 135]), tensor([326, 146, 429, 274, 266, 120, 151, 305, 397, 482,  53,  46, 448, 173,
        449, 137, 178, 133, 167, 208,  14, 216, 228, 319, 291, 398, 416, 458,
         49, 238, 161, 309, 166, 302, 472, 360, 339, 445, 180, 440, 264, 296,
          8, 343, 265,  29, 441,  98, 109,  10]), tensor([336, 413,  81, 308, 273, 284,  74, 265, 249, 296,  85, 237, 403,  91,
        143, 307, 424,  91, 456,  73, 468, 336, 128, 485, 151, 192,  69, 336,
        323, 252, 365,  20, 159, 265, 377, 336, 347, 418, 423, 482,  32, 498,
        257, 234, 427, 204, 258, 282, 399, 318]), tensor([456, 419, 125, 295, 267,  57, 231, 428, 179, 284, 157, 397,  85, 254,
         37, 409, 192,  54, 256, 202,  12, 442,  57, 210, 110, 265, 141, 461,
        348, 352, 312, 331, 388, 462, 323, 240, 147, 112, 343, 435, 242, 161,
        133,  60, 429, 101,  66,  63, 269, 315]), tensor([403,  17, 197, 238, 144,  25, 196, 419, 186,  80, 211, 359,   3,  53,
        266,   2, 210, 454, 236, 111, 238, 264, 401, 160,  78,  74, 147, 110,
        267, 265, 382, 498, 230, 327, 473, 165, 362, 444, 125, 273,  10, 266,
         51, 319, 347, 358, 435, 188, 205, 281]), tensor([374, 371,  42, 153, 486, 262, 133, 382, 414,  60,  65, 114, 189,  47,
          3, 199, 344, 246, 146, 301, 474,  51,  34, 241, 321, 172, 222, 355,
        103, 213, 388, 163, 371,  17,  85,  38, 137, 328,  43, 214, 214, 228,
        472,  45, 425, 479, 355, 436, 461, 404]), tensor([322, 470, 393, 108, 141,  29,  79,  53, 437,  70, 368, 475, 442, 213,
        270, 454,  68, 403, 417, 171, 293, 460, 277,  59, 137, 397, 176, 197,
        188, 499, 118, 348,  29, 336, 343, 411, 343, 334, 312, 132, 248, 328,
        313, 378,  14, 129, 434, 260,  32,  12]), tensor([409, 359, 439, 118, 243, 352,  21, 332, 493, 270, 181,  12, 127,  54,
        489, 323, 335, 145, 195, 260, 219, 210, 201, 399, 213, 379, 495, 124,
        100, 468, 261, 116,  71, 111, 361,  92, 383, 246,  25, 386, 289,  85,
         15, 255, 428, 282, 469, 276, 498, 321]), tensor([168, 271, 309, 183,  39, 192, 193, 459, 140, 246,   7, 465, 284,  10,
         21,  53, 325,  27, 344, 351, 491,  68,  20, 360, 242, 319,  72, 345,
        345, 356,  45, 135, 161, 345, 334, 481,  39, 382, 350, 107, 173, 355,
        483, 167, 195, 253, 475,  59, 230, 273]), tensor([ 58,  46, 405, 438, 350,  19, 166,  57,  73, 241, 476, 298,   9, 384,
        154, 403,  76, 307, 245, 183, 311, 377, 150, 411, 158, 374, 205, 373,
        174,  47, 133, 365, 323, 400, 182, 196, 241, 117, 470, 250,  31, 304,
        169, 225, 250,  33,  61, 184,  59, 345]), tensor([254, 314, 295, 406,  73,  13, 462, 363, 227, 377, 248, 494, 258,  46,
        286, 334, 137,  69, 133, 479, 374, 465, 256, 451, 348,  86, 127, 265,
         41, 423, 151,   3, 338, 294,   4, 428, 163, 484, 207,  86,  29,  12,
        392, 370,  92, 117, 220, 450,  76, 415]), tensor([413, 392, 133, 120, 381,  83, 244, 491,  11,  51,  16, 483, 207, 301,
        498, 235, 122, 359, 140,   0, 485, 475, 464, 204, 393, 263,  79,  16,
         57, 138, 236, 144, 358, 281, 244, 305, 412, 125, 261, 253, 205, 103,
        434,   5, 137, 164,  44,  49, 284, 431]), tensor([255, 464, 270, 283, 323, 335, 393,  36, 298,  23, 336, 288, 157,  65,
        222, 218, 187, 184, 265, 203,  99, 113, 370, 132,  44, 364, 337, 118,
        292, 179, 413, 119, 282, 335,  71,  14, 369, 259, 177, 295, 222, 473,
        113, 398, 140,  14,  62, 243, 476, 335]), tensor([223, 129, 427,  43, 340, 350, 496, 433, 262, 200, 169,  61,  80, 168,
         70,  43,  36, 139,  36, 449, 305, 226, 389, 357, 494,  68, 113,  34,
        347, 203,  15, 287,  20, 328, 242,   8, 131, 469, 151, 479, 172, 407,
        480, 478,  38,   8, 185,  27, 418, 217]), tensor([ 46, 348, 411, 119, 218, 130, 261,  52, 347, 244, 281, 413, 109, 410,
        487, 390, 340, 156, 273, 217, 470, 300, 354, 189, 427, 126,  20, 295,
         37, 120, 177,  80, 394, 360, 347, 257, 218, 411, 382, 456, 112, 454,
        225, 432, 253,  60, 478, 122, 144, 283]), tensor([124, 212, 392, 349, 226, 458, 455, 408, 481, 421, 432, 121, 152, 327,
        223, 193, 218, 132, 347, 372, 322,  11, 126,  84, 359, 318, 483, 114,
        106,  92, 248,  25, 184, 323, 139, 219, 273, 243, 397, 400, 275, 310,
         97, 296,   7, 440, 133,  56, 481, 394]), tensor([180, 266, 409, 489, 462, 384, 479, 375, 300, 458,  42,  88, 255, 253,
        141,   3, 450, 430, 455,  35, 170, 311, 155, 170, 146, 475,   3, 322,
         47, 430, 119, 212, 429, 138, 183, 148, 215, 167,  55, 112,  97, 423,
        173, 434, 493, 179,  72, 302, 411, 437]), tensor([213, 244, 470,  22, 111,  77, 490, 436, 250, 495, 419, 374, 213, 193,
        157, 396, 437, 265,  16, 353, 230, 207,  60,  18, 325, 387, 124,  35,
          0, 113, 369, 194, 218, 447, 289, 440, 346, 462, 404, 393, 473, 145,
        411,  30, 244, 136, 490, 226, 282, 317]), tensor([237, 204, 237,   6, 341, 238, 253, 370, 234, 277, 483, 186, 472, 226,
        297, 189, 478, 462, 424, 477,  13, 496, 427,  15, 255, 426, 359, 425,
        401, 293,  90, 252, 270, 490, 437,  80, 133, 397, 471, 218, 116, 178,
        245, 462, 372, 270, 480,   8, 188, 129]), tensor([128,  42,  67, 327, 394, 344, 111, 152, 427, 252,  73, 337, 193, 156,
        320,  50, 408, 134, 431, 463, 372, 471, 283, 233, 179, 209, 428, 362,
        368, 453, 397,  86, 364, 162, 279, 144,  92, 340,  41, 464, 274, 139,
        162, 496, 478, 460, 445, 262, 496, 201]), tensor([209, 118, 442, 416, 312, 159,  80, 217, 383, 491, 104, 177, 483,  77,
         78,  77, 127, 214, 119, 445, 493, 476, 271, 114, 367,  12, 438, 161,
        124, 102, 219, 132, 418, 315, 209, 271, 323, 182, 231, 384, 256, 387,
        117,  52, 300, 470,  20, 101, 203, 386]), tensor([ 53,   1, 469, 325,  93, 433, 149, 227, 281, 181, 374, 411, 153, 322,
        379, 455, 141,  79, 307, 448,   5, 296, 110,  31, 448,  51, 466, 467,
        387, 199, 132, 114, 305, 322, 229, 268, 106,  65, 373, 344, 368, 414,
         45, 256, 262, 254, 297, 499, 325, 174]), tensor([134, 195,  83, 240, 447,  67, 116,  79, 106, 386, 475,  40, 253, 123,
         77, 346,  35, 402, 387, 101,  89, 236, 223, 230, 191, 260, 220, 378,
        361, 259, 403, 387, 254, 464, 332, 133, 391, 307, 100,  71, 229, 256,
        337, 374, 463, 359, 371, 360, 108, 433]), tensor([295, 230, 464, 407, 101, 155, 215, 216, 404, 237,  11, 145, 209,  62,
         20, 132, 466, 230,  92, 239, 446, 483, 339, 299,  73, 396, 437, 329,
         66, 363, 226, 377, 339,  71, 151, 151, 187, 239, 199, 114, 209, 293,
        417, 396, 462, 455,  17, 477,   3, 262]), tensor([163, 276, 375,  25, 103, 378,  61,  83, 439, 191,  60, 491,  78, 328,
        113, 440, 111, 164, 454, 453, 316, 415, 352, 390, 184, 203, 101, 120,
        279, 427, 239, 310, 357, 185,  38, 270, 432, 287, 328, 492, 119, 469,
        419,   2, 468, 297, 308, 138, 261, 128]), tensor([ 76,  90, 241, 102, 481,  32,  39, 174, 480, 209, 240, 263, 469, 296,
        121, 477, 135, 321, 384, 308, 245, 245,  59, 455, 312, 322,  49, 206,
        315,  46, 406, 193, 345, 291, 135, 420, 272, 373, 455, 167,  52, 142,
        416,  93, 334, 220, 312, 493, 422, 340]), tensor([411, 422,  12, 113,  85,  81,   6, 277, 350, 276, 384, 449,  54, 174,
        330, 204, 418,  82, 218, 307, 289, 328, 188,  16,  93,  23, 329, 178,
        411, 240,  48, 168, 334, 196, 222, 453, 327, 231, 400, 369,  36, 413,
        276, 188, 272, 148, 194, 163,  14, 308]), tensor([119, 291,  82,  76, 443, 156,  51, 336,  86, 321,  58, 461,  59,   1,
        173, 126,  74, 365, 382, 454, 169, 102, 191, 202, 212, 175, 159, 144,
        335, 336, 339, 369, 172, 312, 297,  15, 382, 204,   2, 125, 262, 480,
         27, 263, 169, 298, 432, 410, 219,  49]), tensor([362, 349, 322, 210, 410, 112, 459, 423,  41, 479,  76,  30, 141, 185,
        451,  74, 201,  55, 264,  30, 373,  37, 471, 313, 376, 316, 257, 488,
        122, 134, 231, 139, 356, 122,  84, 192, 358, 189, 341, 192, 411, 381,
        362, 326, 368, 156, 164, 140, 465,  13]), tensor([285, 410, 454,  80, 377,  73,   0, 168, 183, 431, 473, 433, 350, 375,
        376, 166, 217, 228, 436, 338,  53, 324, 251, 337,  27, 111, 108, 404,
        305, 169, 275, 202, 422, 144, 369, 129, 345, 415, 161, 182,  69, 121,
        165, 405,  91, 433,  58, 165, 186, 238]), tensor([ 74, 474, 251, 133,  78, 136,  86, 417, 246, 466, 302, 274, 265, 435,
        377, 362, 312, 387, 150, 114, 402,   0, 261, 142, 169, 162,  51, 442,
         82, 377, 287,  72, 252, 233,  10, 467, 207, 466, 474, 229, 446, 424,
        444, 320,  39,  61, 369, 157, 140, 325]), tensor([146, 302,  78, 450,  96,  24, 258, 398, 111, 344,  70, 396,  64, 425,
        138, 388, 145,  49, 368, 102, 299, 462, 151,  51,   2, 333, 362, 447,
        264, 193,  43,  88, 406, 333,  72, 267,  67, 126, 348,  88, 280, 287,
        252,  20, 223, 427, 225,   1, 134, 200]), tensor([449, 319, 467, 478,  29, 278, 117, 434, 466, 395, 271, 103, 457, 306,
        470, 251,  10,  61, 458, 391, 378,  31, 457, 185,  95, 244, 148, 276,
        346,  76, 299, 406, 465, 317, 253, 126,  28, 391, 272,   2, 292, 411,
        128, 288, 435, 301, 281, 393, 248,   8]), tensor([245, 315, 113, 482,  71, 111,  44,  89,  91, 160, 117, 229, 191,  37,
        203,  26, 202, 281, 216, 277, 261, 436, 137, 145, 202, 101, 458, 285,
        184, 322, 114, 154,  59, 409, 162,  62, 333,  59, 260, 443, 491, 364,
        285, 155, 143, 168,  91,   9, 409,   2]), tensor([476, 239, 192,  30, 302, 267, 457, 462, 411, 206, 371, 474,  61, 172,
        326, 367, 477, 162, 295,   4, 365, 359, 381, 307, 397,  57,  66, 281,
        226, 283, 242, 172, 185, 166, 413,  71,  72, 201, 339,  39, 464,  87,
        465, 285, 174, 186, 142, 179, 440,  96]), tensor([249, 376, 399, 223,  94,  12,  35, 245, 419, 365, 242, 340, 454,  42,
        187, 198, 133, 406,  44, 198, 277,  58, 375,  78, 431, 297,  23, 470,
        320, 116, 181,  39, 340, 199,  29, 243, 413, 401, 387, 169, 498, 143,
         30, 295,  40,  46, 494, 342, 251,  99]), tensor([489, 185, 444, 117,  24, 151,  42, 393,  76,  55, 309, 252, 234, 165,
        254, 441, 461, 282, 471,  78, 451, 416, 246, 339, 243, 448, 479, 131,
        483, 321, 343, 105, 210, 184, 365, 166, 441, 402,  95, 145, 260, 390,
        405, 449, 432, 398,  77, 266, 302, 392]), tensor([ 81, 147, 381, 448, 188, 121, 131, 107,  17,  43, 159, 268, 490,  31,
        241, 314, 347, 163, 254, 219, 133, 480, 313, 149, 218,  15,  32,  74,
        110, 419, 391,  47, 333, 168, 230, 160, 124,  71, 443,  20, 410,  97,
        214,  49, 117,  86, 319, 228,  86,  20]), tensor([135, 142, 362, 121, 261, 194, 469,  47, 343, 137, 378, 418, 171,  83,
        275,  60,  15, 204, 298, 270, 408, 397, 490, 175, 296, 231, 430,  71,
         80,  69, 166, 245, 141, 288, 245, 350, 361,  20, 412, 318,  50, 299,
          9, 259, 466,  35, 397, 321, 175, 123]), tensor([142, 481, 159,  35,  34,  30, 298, 427, 218,  10, 280, 326,   2, 307,
        300,  24, 421, 315,  38, 126, 437, 104, 215, 432, 155,  34, 172, 259,
        451, 402, 453, 332, 201, 395, 339,  69, 277, 222, 165, 338, 392, 226,
        429, 278, 402, 288, 325,  85, 417, 383]), tensor([458, 103, 174, 472, 375, 225, 430, 482, 326, 193, 496, 204, 485,  61,
        207, 194, 115, 473, 320,  12, 411,  75,  39, 112, 221, 327, 407, 261,
        469, 215, 326, 177, 216, 340,  61, 337,  83, 390, 202,  38, 482, 149,
        375, 438, 200,  63, 307, 244, 152, 380]), tensor([115,  23, 127, 246, 413, 441, 441,  37, 109, 249, 133, 355, 137, 346,
        197, 155,  12, 143, 440, 313, 348, 393, 157, 378, 156,  96, 155, 452,
        359, 391, 323, 486, 118, 126, 267,  67, 464, 474, 131, 370, 111,  15,
        344, 190, 295, 273, 201, 347,  42, 170]), tensor([436, 356, 179, 437, 263, 145,   7,   0, 108,  66, 125, 306, 245, 157,
        130, 356, 142, 264,  23,  39, 394, 412, 402, 334,  80, 394, 251, 186,
          6, 165, 122,  75, 119, 241, 391, 258,   4, 442, 346, 465, 195, 308,
        348, 323, 182, 493,  78, 232, 294, 137]), tensor([147, 193, 101, 466, 439, 138, 323, 330, 202,  73, 493, 251,  30,  78,
        249, 465,  94, 488, 408,  68, 340, 196, 459, 147, 319, 303, 171, 198,
        341, 404,  47, 371, 238, 440, 174,  72, 406, 254,  66, 332,  71, 450,
        265, 131, 123, 262, 232, 452, 327, 231]), tensor([347,  79, 345, 104, 364,  37, 497, 431,  62, 190, 314, 458,  52, 387,
        363, 368, 138,  89, 321, 103,   7, 170,  58, 416, 459, 400, 426, 235,
        147,  25, 295,  48, 353,  80, 358, 128, 132, 448, 392, 239, 439,  28,
        346, 271, 328, 454, 416, 236, 103, 242]), tensor([316, 156,  36,   5,  87, 366,  13, 280, 489, 423, 252, 185, 295, 104,
        494, 481, 358,  65, 266,  29,  27, 340, 248, 463, 192, 309, 126, 299,
         60, 420, 206, 362, 128, 342, 106, 138, 154, 477, 296, 166, 466, 268,
        216, 216, 213,  56, 439,   0, 432, 113]), tensor([333,  76, 341, 150,  25,  14,  48, 165,  34, 275, 247, 468,   5, 320,
         53, 431, 483, 201,  83, 252, 172, 488, 288, 472, 332, 392, 409, 246,
         19, 350,  26, 440,  19, 172, 112, 245, 197, 216, 140, 136, 150, 115,
        254, 321, 417, 472, 143, 277, 223, 251]), tensor([312, 114, 111, 109, 112, 392,  70, 381, 486,  98, 182, 119, 279, 413,
        289,  10, 222, 149,  74, 462, 132,  61, 249, 159, 399, 350, 184, 162,
         95, 264,  11,  50, 234, 272, 338, 187, 182, 163, 275,   4, 377, 356,
        406, 488, 410, 130, 377, 451, 427,  67]), tensor([428, 243, 203, 184, 258, 417, 170,  65, 413, 435, 398, 331, 425, 350,
        423,  28, 171, 295, 319, 181, 284, 427, 387, 103, 230, 185, 380, 462,
        318, 413, 458, 180, 152, 354, 156, 484,  73,  72, 190, 383, 486,  63,
        293,  68, 362, 492, 294, 397,  20,  25]), tensor([131,   8,   7, 290, 491,  53,  27, 453, 146, 207, 344, 462, 329, 154,
        104, 203, 374, 493,  31, 427, 442,  20, 355,  23,  43, 204, 284, 428,
        287, 444, 338, 448, 344, 338, 360, 369,  71, 218,  37,  89, 465,   9,
        308,  54, 158, 326, 473, 458, 237, 320]), tensor([ 62,  81, 420, 324, 189,  90, 313, 454, 477, 304, 231, 258, 179, 453,
        119, 216, 336, 247,  21, 279, 210, 192, 410, 355, 362, 130, 245, 438,
        362,  87, 202, 216, 377, 482, 218, 241,  69, 335, 425,  12, 191, 421,
        144, 390, 485, 266, 213, 162, 234, 152]), tensor([483,  37, 488,  32, 149, 426, 144,  74, 430,  81, 274,  80, 195, 214,
        215, 424, 443, 174, 309, 149, 424, 431,  17, 437, 241, 139, 406, 388,
        209, 141, 342, 413, 487, 217, 138, 362, 252, 217, 194,  85, 335, 122,
        158, 363, 145, 222, 156, 423, 480, 297]), tensor([429,  26, 300,  52, 496, 418,  50, 424, 401,  53, 463, 163, 487, 436,
        166, 444, 441, 410, 206, 387, 274,  50, 431, 405, 423, 307, 252, 252,
         71,  65, 165, 161, 473, 132, 328,  81, 235, 183, 268, 424,  46, 203,
        386, 124, 371, 185, 141, 227, 291, 222]), tensor([191, 189, 105, 400, 167, 167,  12,  99, 164, 442,  24,   7, 325, 419,
        261, 301,  62,  84, 429, 315, 283, 349, 372, 460, 264, 366, 385,   0,
        243, 312,   6,   8, 498,  51, 281, 176,  44, 439,  71, 277, 362, 286,
        202, 230, 185,  76, 248, 105,  95, 368]), tensor([398, 362, 490, 131, 414, 393,  33, 189, 130, 259, 180, 466,  65, 155,
        416,   4,  11, 127,  45, 267, 255, 184,  19, 239, 392, 353, 230, 375,
        140, 358, 176, 162, 438, 146, 283, 435, 348,   7, 352, 213,   4, 234,
        203, 174,  62,  20, 353, 216,  78, 361]), tensor([404, 453, 425, 330, 469, 491, 176, 414, 463,  47, 343, 345, 134, 456,
        184, 479, 105, 334, 134, 497, 477, 105, 217, 382, 436, 485, 324, 491,
        321,  63, 407,   7, 199, 458, 234, 326, 351, 441, 340, 308, 484,  79,
        263, 439, 269, 412, 298, 120, 187,  56]), tensor([ 47, 364, 305, 441, 137, 215,  88,  95, 444,  59, 477, 134, 267, 239,
        447, 439,  40,  53, 267, 324,  37, 188, 141, 323, 440,  71,  30, 189,
        269, 290, 486, 101, 337,  83,  67,  95, 200, 304, 459, 283, 293, 439,
        493,   9, 482,  27, 252, 441, 426, 367]), tensor([ 77, 316,  48, 353, 384, 368,  49, 321,  52, 469, 142,  68, 369, 304,
        165, 152,  52, 431, 158,  66, 158, 233, 405, 311, 368, 345, 493, 498,
        420, 369, 437, 138,   6, 310,  60, 244, 487, 488, 332, 230,   8, 295,
         28, 448, 190, 170, 378, 449, 183,  26]), tensor([376,  59, 342, 123, 285, 321, 274,  94,  77,   5,   0, 471, 423, 244,
        474, 247, 157, 100, 490,  22, 212, 407, 444,  50, 430, 496, 228, 211,
        195,  54, 100, 405, 100,  39, 301, 201, 168,  27,  72, 195, 231,   7,
         73,  48, 205, 442, 293,  75, 477, 474]), tensor([177, 381, 317, 317, 124, 250, 387, 181, 139, 138, 443, 139, 465, 106,
         45, 164, 204, 389, 467,   3,  63,  99, 123, 364, 489, 184, 210, 320,
        375,  45, 463, 221, 183, 386, 325, 328, 424, 420, 329, 477, 152, 119,
        185, 498, 439,  89, 477, 210, 195, 324]), tensor([202, 207,  96,  78,  46, 434, 246, 400, 410, 274,  61, 142,  46, 376,
        101, 206, 241, 301, 126, 174, 140, 307, 474, 408, 294, 474, 399, 126,
        364, 231, 251, 412, 225, 121, 438, 169, 472, 360, 331,  46, 287,  90,
        438, 471,  29, 199, 243, 351, 338,   3]), tensor([278, 172, 280, 492, 353, 180, 219, 366, 424, 123, 320,  65, 306, 460,
        176, 271,  45, 477, 268, 409, 406,  76, 453, 184, 331, 486, 410, 430,
        186, 228, 185,  99, 481,  20, 324, 112,  75,  88, 388, 210, 164, 158,
        353,   1, 120, 438, 256, 166, 419,  60]), tensor([ 44,  71, 162, 350, 321, 206, 468, 348, 269, 420, 390, 200, 124, 162,
        185, 162, 446, 452,  58, 274, 452,  73, 399, 495, 293, 422, 214, 371,
         48, 375,  72, 472, 463, 227, 315, 135, 170, 258, 105,  13, 407,  47,
        352, 302, 134, 200, 165, 443, 185, 299]), tensor([  5,  73, 320, 410, 361, 388, 489, 487, 308, 343, 394, 199, 497, 414,
        309, 120, 331, 243,  60, 384, 432, 234, 210, 188, 174, 491, 287, 361,
        227, 319, 281, 249, 312, 171, 307, 365, 399, 381, 256, 128, 104, 471,
         85,  56, 111, 295, 210, 185,  40, 211]), tensor([155, 467, 307, 224, 335,  99, 100,  41,  31, 222, 268,  23, 470, 335,
        105, 171, 176, 486, 202, 189, 229, 362, 176,  38, 153, 317,  88, 188,
        489, 261,  17, 118, 233, 478, 383, 452, 251, 104,  48, 215, 183,  75,
        290, 185, 487, 318, 373, 419, 197, 352]), tensor([352, 202, 310, 391, 489, 470, 405, 267, 302, 403,  39, 158,  72, 461,
         72, 173, 188, 269, 369, 191, 371, 238, 365, 354, 300, 291, 208,  76,
        495, 256, 337, 267, 425, 439, 179, 319, 418, 331,  18, 404,  58, 475,
        455,  36,  99, 405, 496,  36,  11, 311]), tensor([127,   6,  13, 126,  56,  94,  47, 275,  35, 182, 460, 218, 458, 218,
         58, 112, 270,  32, 473, 140,  85, 116, 449, 477, 357, 114, 150, 340,
        173, 123, 440,   0, 122, 274,  86, 456, 467, 139, 353, 333,   5, 291,
        469, 416, 329, 322, 126, 320, 244, 464]), tensor([290, 169,  69,  65, 374, 114, 349, 448,  87, 145, 224, 325, 276, 372,
         24,  29, 349, 449, 371, 201, 435, 350, 398, 284, 442, 267,  77,  29,
        449, 374, 290, 255,   8, 197, 122, 480,   7,  80, 263, 276, 347, 432,
         47, 376, 360,  34, 405,  48, 301, 216]), tensor([469, 365, 349, 303, 436, 119, 161, 493,  22, 315,  51, 281, 339, 485,
        365,  87, 368,  90, 332, 417, 399, 240, 213, 113, 187, 373, 395, 414,
          3, 271, 106, 260,  13, 258, 201, 343, 103, 106, 496, 206, 124, 239,
         55, 476, 377, 471, 168,  32, 250, 485]), tensor([424, 382,  90, 403, 135, 466, 137, 128, 115, 242, 457, 160, 188, 164,
        114, 113, 410, 138, 287,  81, 381, 244, 263,  77,   6, 377, 390, 394,
         67,  96, 179, 258,  93, 229, 177, 141, 198,  64, 132, 240, 478, 179,
         87,  82, 353, 138, 235, 390, 356, 168]), tensor([198,   2, 435,   0, 301, 383, 438, 303, 105, 176,  34,  45,  11,  14,
        443, 230,  28, 432, 215, 235, 257,  40, 385, 298,  62, 305, 312, 406,
        428, 434, 182, 199,   5, 364, 109, 498, 328, 352, 288, 171, 440, 478,
         17, 440, 129, 173, 188, 107,  92, 184]), tensor([106,  69, 338, 219, 330, 142, 373,  24, 307, 323, 318, 242, 155,  72,
        427, 389, 185, 316, 211, 461,  83, 445, 382,  26,  14, 341, 420, 399,
        155, 440, 324, 197, 336,  31,  80, 205, 314,  17, 286, 231, 269, 430,
        327,  97, 486, 351, 315, 328, 379,  18]), tensor([414, 472,  55, 468, 102, 123, 115, 349, 307, 146, 201, 207, 426, 288,
         41, 299, 369, 260, 272, 199, 490, 482, 400, 247, 225, 362, 250, 307,
        228,  79, 350, 230, 109, 179,  57, 351, 448, 499, 337, 458,  90, 117,
        319, 453, 152, 351, 385, 209, 360, 292]), tensor([ 34, 332, 396, 204, 126, 208, 208, 421, 307, 446, 495, 124, 303, 496,
        413, 333, 194, 135, 488, 121, 368,   1, 337, 482, 377, 494, 156, 212,
        131, 368, 216, 386, 331, 365, 418, 140, 395, 377, 356, 282, 153, 243,
        334, 258, 357, 351, 304, 296, 353, 133]), tensor([  6, 317, 253, 299, 422, 208, 208,  46, 307, 446,  10, 324, 227, 352,
        424, 160, 149, 249, 346, 292, 215,  28, 337, 321, 377, 225, 157, 212,
        462, 353, 404, 495, 325, 192, 310, 317, 227, 176, 316, 282, 279, 243,
        468,  33,  77, 351, 209, 299, 154, 330]), tensor([208, 317, 306, 254, 281, 208, 208, 208, 307, 446,  81, 271, 164, 283,
         86, 428, 422,   3, 357, 286, 498, 437, 337, 372, 377,  97, 182, 212,
        403, 307, 452, 495, 284, 359, 355, 317, 172, 176, 427, 282, 243, 243,
         60, 375, 267, 351, 209,  96, 154, 154]), tensor([151, 317, 306,  42, 269, 208, 208, 208, 307, 446, 498, 174, 180, 477,
        395, 426,  33,  42, 196, 364, 139, 337, 337, 128, 377, 216,  21, 212,
        366, 307, 268, 495, 284,  91, 254, 317, 295, 176, 391, 282, 243, 243,
         74, 307, 382, 351, 209, 407, 154, 154]), tensor([207, 317, 306, 213, 461, 208, 208, 208, 307, 446, 448,  63, 107, 149,
        272, 297,  79, 215, 396, 221, 397, 417, 337, 128, 377, 289, 394, 212,
         40, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        249, 342,  90, 351, 209, 407, 154, 154]), tensor([183, 317, 306, 213, 305, 208, 208, 208, 307, 446, 380, 430, 459, 206,
        236,  39, 160, 374, 496, 152, 186, 417, 337, 128, 377, 157, 394, 212,
        431, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([432, 317, 306, 213, 227, 208, 208, 208, 307, 446, 385,  32, 291, 234,
        151, 416, 139, 376, 376,  77, 487, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([189, 317, 306, 213, 227, 208, 208, 208, 307, 446, 292, 351, 257, 279,
         11,  41, 128, 248,  25, 250, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 387, 104, 221, 353,
         11, 170, 361, 418, 200, 168, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 122,  92, 308,
         11, 212, 378, 375, 411, 458, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 293,  49, 204,
         11, 448,  49,  36, 442, 245, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 293, 385, 204,
         11,  67, 387,  36, 230, 374, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 293, 197, 204,
         11,  51, 274,  36, 413, 374, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 293, 197, 204,
         11,  15,  90,  36, 434, 374, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 293, 197, 204,
         11, 364,  90,  36, 470, 374, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154]), tensor([289, 317, 306, 213, 227, 208, 208, 208, 307, 446, 105, 293, 197, 204,
         11, 274,  90,  36, 197, 374, 313, 417, 337, 128, 377, 157, 394, 212,
        175, 307, 268, 495, 284,  91,  70, 317, 495, 176, 391, 282, 243, 243,
        235, 484, 479, 351, 209, 407, 154, 154])]
-------------------------------------------------------------------------------
Getting costs
The shape of pi is: torch.Size([50, 112])
Batches with duplicate selections:
Batch 0: [289]
Batch 1: [317]
Batch 2: [306]
Batch 3: [213]
Batch 4: [227]
Batch 5: [208]
Batch 6: [208]
Batch 7: [208]
Batch 8: [307]
Batch 9: [446]
Batch 10: [105]
Batch 11: [293]
Batch 12: [197]
Batch 13: [204]
Batch 14: [11]
Batch 16: [90]
Batch 17: [36]
Batch 19: [374]
Batch 20: [313]
Batch 21: [417]
Batch 22: [337]
Batch 23: [128]
Batch 24: [377]
Batch 25: [157]
Batch 26: [394]
Batch 27: [212]
Batch 28: [175]
Batch 29: [307]
Batch 30: [268]
Batch 31: [495]
Batch 32: [284]
Batch 33: [91]
Batch 34: [70]
Batch 35: [317]
Batch 36: [495]
Batch 37: [176]
Batch 38: [391]
Batch 39: [282]
Batch 40: [243]
Batch 41: [243]
Batch 42: [235]
Batch 43: [484]
Batch 44: [479]
Batch 45: [351]
Batch 46: [209]
Batch 47: [407]
Batch 48: [154]
Batch 49: [154]
  0%|                                                                                                                                                                                                                                                                                             | 0/480 [00:03<?, ?it/s]
Traceback (most recent call last):
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/run.py", line 289, in <module>
    run(opts)
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/run.py", line 230, in run
    train_epoch(
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/train.py", line 135, in train_epoch
    train_batch(
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/train.py", line 190, in train_batch
    cost, log_likelihood, all_dists, coef = model(x, opts.w_list, num_objs=opts.num_objs)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/conda/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/nets/attention_model.py", line 223, in forward
    cost, mask, all_cost_list = self.problem.get_costs(input, pi, w, num_objs, opts.max_capacity)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/problems/bsp/problem_bsp.py", line 111, in get_costs
    BSP.check_duplicates(pi)
  File "/home/jovyan/modified_NCO/multi-objective/MORAM/problems/bsp/problem_bsp.py", line 198, in check_duplicates
    raise ValueError(f"Duplicate selections found in the following batches: {batches_with_duplicates}")
ValueError: Duplicate selections found in the following batches: [(0, [289]), (1, [317]), (2, [306]), (3, [213]), (4, [227]), (5, [208]), (6, [208]), (7, [208]), (8, [307]), (9, [446]), (10, [105]), (11, [293]), (12, [197]), (13, [204]), (14, [11]), (16, [90]), (17, [36]), (19, [374]), (20, [313]), (21, [417]), (22, [337]), (23, [128]), (24, [377]), (25, [157]), (26, [394]), (27, [212]), (28, [175]), (29, [307]), (30, [268]), (31, [495]), (32, [284]), (33, [91]), (34, [70]), (35, [317]), (36, [495]), (37, [176]), (38, [391]), (39, [282]), (40, [243]), (41, [243]), (42, [235]), (43, [484]), (44, [479]), (45, [351]), (46, [209]), (47, [407]), (48, [154]), (49, [154])]
[?2004h(base) ]0;jovyan@edb2125453fd: ~/modified_NCO/multi-objective/MORAM[01;32mjovyan@edb2125453fd[00m:[01;34m~/modified_NCO/multi-objective/MORAM[00m$ exit
[?2004lexit

Script done on 2024-09-24 17:40:49+00:00 [COMMAND_EXIT_CODE="1"]
